var nsGrid = Object.create(nsContainerBase);

nsGrid.initializeComponent = function() 
{
	this.base.initializeComponent();
	this.ITEM_SELECTED = "itemSelected";
	this.ITEM_UNSELECTED = "itemUnselected";
	//this.initializeDOM(ns.NSDATAGRID_CSS);
	
	this.__OUTER_CONTAINER_ID = "divDataSet";
	this.__TITLE_CONTAINER_ID = "divTitleBar";
	this.__TABLE_HEADER_CONTAINER_ID = "divHeaderContainer";
	this.__TABLE_HEADER_ID = "tblHeader";
	this.__TABLE_BODY_CONTAINER_ID = "divBodyContainer";
	this.__TABLE_BODY_ID = "tblBody";
	
	this.__CLASS_TITLEBAR = "dataGridTitleBar";
	this.__CLASS_TABLE = "dataGrid";
	this.__CLASS_TABLE_HEADER_CELL = "dataGridHeader";
	this.__CLASS_BODY_CONTAINER = "dataGridBodyContainer";
	this.__CLASS_ODD_ROW = "dataGridOddRow";
	this.__CLASS_EVEN_ROW = "dataGridEvenRow";
	this.__CLASS_GROUP_CELL = "hbox";
	this.__CLASS_ARROW = "nsGridArrowFill";
	this.__CLASS_SORTING_ASC = "sorted_asc";
	this.__CLASS_SORTING_DESC = "sorted_desc";
	this.__ARROW_COLLAPSE_PATH = "M 0 0 L 0 10 L 10 5 Z";
	this.__ARROW_EXPANDED_PATH = "M 0 0 L 10 0 L 5 10 Z";
	
	this.__DEFAULT_COLUMN_WIDTH = 100;
	this.__MIN_DRAG_OFFSET = 100;
	
	this.columns = [];
	this.selectedItems = [];
	
	this.__title = null;
	this.__dataSource = [];
	this.__enableHierarchical = false;
	this.__enableGrouping = false;
	this.__enableMouseHover = false;
	this.__enableMultiSelection = false;
	this.__customScrollerRequired = false;
	this.__childField = "children";
	this.__groupByField = null;
	this.__columnMinWidth = 10;
	//stores initial Column Count 
	this.__initialColumnCount = 0;
	
	this.__tblHeader = null;
	this.__tblBody = null;
	//stores whether mouse is on GridLine
	this.__onGridLine = false;
	//cell which is being resized
	this.__resizingHeader = null;
	this.__resizingHeaderCell = null;
	this.__resizingBodyCell = null;
	this.__resizeHandler = null;
	
	//object for column dragging
	this.__objColumnDrag = null;
	
	this.__loader = null;
	this.__scroller = null;
	this.__groupCollection = null;
	
	this.__arrWrapper = null;
	this.__fieldColIndex = this.getID() + "_col_index";
	this.__fieldIndex = this.getID() + "_row_index";
	this.__fieldRow = this.getID() + "_row";
	this.__fieldRowVisible = this.getID() + "_row_visible";
	this.__fieldParentIndex = this.getID() + "_parent_index";
	this.__fieldHasChild = this.getID() + "_row_hasChild";
	this.__fieldHasParent = this.getID() + "_row_hasParent";
	this.__fieldIsCollapsed = this.getID() + "_row_isCollapsed";
	
	this.__headerClickRef = null;
	this.__headerMouseOverRef = null;
	this.__headerMouseOutRef = null;
	this.__rowMouseOverRef = null;
	this.__rowMouseOutRef = null;
	this.__rowClickHandlerRef = null;
	this.__arrowClickRef = null;
	this.__headerMouseMoveRef = null;
	this.__headerMouseDownRef = null;
	this.__doResizeRef = null;
	this.__endResizeRef = null;
	this.__synchronizeTablesRef = null;
	this.__dragColumnMoveRef = null;
	this.__dragColumnEndRef = null;
};

nsGrid.setComponentProperties = function() 
{
	this.base.setComponentProperties();
	if(this.hasAttribute("title"))
	{
		this.__title = this.getAttribute("title");
	}
	if(this.hasAttribute("enableHierarchical"))
	{
		this.__enableHierarchical = Boolean.parse(this.getAttribute("enableHierarchical"));
	}
	if(this.hasAttribute("enableGrouping"))
	{
		this.__enableGrouping = Boolean.parse(this.getAttribute("enableGrouping"));
	}
	if(this.hasAttribute("enableMouseHover"))
	{
		this.__enableMouseHover = Boolean.parse(this.getAttribute("enableMouseHover"));
	}
	if(this.hasAttribute("enableMultiSelection"))
	{
		this.__enableMultiSelection = Boolean.parse(this.getAttribute("enableMultiSelection"));
	}
	if(this.hasAttribute("childField"))
	{
		this.__childField = this.getAttribute("childField");
	}
	if(this.hasAttribute("groupByField"))
	{
		this.__groupByField = this.getAttribute("groupByField");
	}
	if(this.hasAttribute("columnMinWidth"))
	{
		this.__columnMinWidth = this.getAttribute("columnMinWidth");
	}
	if(this.hasAttribute("customScrollerRequired"))
	{
		this.__customScrollerRequired =  Boolean.parse(this.getAttribute("customScrollerRequired"));
	}
};

nsGrid.propertyChange = function(attrName, oldVal, newVal, setProperty) 
{
	var attributeName = attrName.toLowerCase();
	if(attributeName === "groupbyfield")
	{
		this.__groupByField = this.getAttribute("groupByField");
		if(this.__enableGrouping)
		{
			this.dataSource(this.__dataSource);
		}
	}
	this.base.propertyChange(attrName, oldVal, newVal, setProperty);
};

nsGrid.setColumn = function(arrColumns)
{
	if(arrColumns && arrColumns.length > 0)
	{
		this.columns = arrColumns;
		for(var count = 0;count < this.columns.length;count++)
		{
			var item = this.columns[count];
			this.__processColumnObject(item,count);
		}
	}
	else
	{
		this.columns = [];
	}
	this.__createStructure();
	
};

nsGrid.dataSource = function(source)
{
	this.__dataSource = source;
	if(this.__dataSource && this.__dataSource.length > 0)
	{
		if(this.__enableGrouping && this.__groupByField && this.__groupByField.length > 0)
		{
			if(!this.__groupCollection)
			{
				this.__groupCollection = new this.util.groupCollection(this.__dataSource,this.__childField);
			}
			this.__arrWrapper = this.__groupCollection.groupBy([this.__groupByField]);
		}
		else
		{
			this.__arrWrapper = this.__dataSource.slice(0);
		}
	}
	else
	{
		this.__arrWrapper = null;
	}
	this.__resetColumnHeaders();
	this.__renderBody(false);
	this.__setHeaderSortFunction();
};

nsGrid.groupBy = function(groupByField)
{
	if(this.__enableGrouping && groupByField && groupByField.length > 0)
	{
		this.setAttribute("groupByField",groupByField);
	}
};

nsGrid.expandAll = function()
{
	if(this.__enableHierarchical || this.__enableGrouping)
	{
		this.__expandCollapseAll(this.__arrWrapper,false);
	}
};

nsGrid.collapseAll = function()
{
	if(this.__enableHierarchical || this.__enableGrouping)
	{
		this.__expandCollapseAll(this.__arrWrapper,true);
	}
};

//assuming column is added at last
//if reposition then use swapColumn
nsGrid.addColumn = function(column)
{
	if(column)
	{
		this.__processColumnObject(column,this.columns.length);
		this.columns[this.columns.length] = column;
		if(this.__tblHeader && this.__tblHeader.tHead && this.__tblHeader.tHead.rows && this.__tblHeader.tHead.rows.length > 0)
		{
			var headerRow = this.__tblHeader.tHead.rows[0];
			if(this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows && this.__tblHeader.tBodies[0].rows.length > 0)
			{
				var headerBodyRow = this.__tblHeader.tBodies[0].rows[0];
				this.__createHeaderHeaderCell(column,headerRow);
			    this.__createHeaderBodyCell(column,headerBodyRow,this.columns.length - 1);
			}
		}
		if(this.__tblBody && this.__tblBody.tHead && this.__tblBody.tHead.rows && this.__tblBody.tHead.rows.length > 0)
	    {
			var bodyRow = this.__tblBody.tHead.rows[0];
	    	if(this.__tblBody.tBodies && this.__tblBody.tBodies.length > 0 && this.__tblBody.tBodies[0].rows && this.__tblBody.tBodies[0].rows.length > 0)
			{
	    		var arrRows = this.__tblBody.tBodies[0].rows;
	    		var arrItems = this.__getAllItems();
	    		this.__createBodyHeaderCell(column,bodyRow);
	    		var row = null;
	    		var item = null;
	    		for (var rowCount = 0; rowCount < arrRows.length; rowCount++) 
	    		{
	    			row = arrRows[rowCount];
	    			item = arrItems[rowCount];
	    			this.__createBodyRowCell(row,item,column,this.columns.length - 1,-1,null,0,true);
	    	    }
			}
	    }
		this.__alignTables(false);
		this.__setHeaderSortFunctionForItem(column);
		return true;
	}
	else
	{
		this.util.throwNSError("NSGrid","Please pass valid column object to be added.");
		return false;
	}
};

nsGrid.removeColumn = function(column)
{
	var index = this.__getColumnIndexForSwapOrRemove(column);
	if(index > -1)
	{
		if(this.__isColumnValidForSwapOrRemove(index,"deleted"))
		{
			this.__removeHeaderCell(index);
			this.__removeBodyColumn(index);
			this.__alignTables(false);
			this.columns.splice(index, 1);

			return true;
		}
	}
	return false;
};

nsGrid.swapColumns = function(sourceColumn,destinationColumn)
{
	var sourceIndex = this.__getColumnIndexForSwapOrRemove(sourceColumn);
	var destinationIndex = this.__getColumnIndexForSwapOrRemove(destinationColumn);
	if(sourceIndex > -1 && destinationIndex > -1)
	{
		var sourceValid = this.__isColumnValidForSwapOrRemove(sourceIndex,"swapped");
		var destinationValid = this.__isColumnValidForSwapOrRemove(destinationIndex,"swapped");
		if(sourceValid && destinationValid)
		{
			this.__swapHeaderCell(sourceIndex,destinationIndex);
			this.__swapBodyCell(sourceIndex,destinationIndex);
			this.__alignTables(false);
			this.util.swapArrayItems(this.columns,sourceIndex,destinationIndex);
			
			return true;
		}
	}
	return false;
};

nsGrid.__processColumnObject = function(objColumn,index)
{
	if(objColumn)
	{
		objColumn[this.__fieldColIndex] = index;
		objColumn["sortable"] = Boolean.parse(objColumn["sortable"]);
		objColumn["sortDescending"] = Boolean.parse(objColumn["sortDescending"]);
		//setData should be before template for checking
		if(objColumn.hasOwnProperty("setData"))
		{
			var setData = objColumn["setData"];
			if (typeof setData === "string" || setData instanceof String)
			{
				if(this.util.isFunction(setData))
				{
					objColumn.setData = window[setData];
				}
			}
		}
		if(objColumn.hasOwnProperty("template") && objColumn["template"])
		{
			objColumn.itemRenderer = this.util.getTemplate(objColumn["template"]);
		}
		else
		{
			var renderer = new this.util.defaultRenderer();
			objColumn.itemRenderer = renderer.getRenderer();
			objColumn.setData = renderer.setData.bind(renderer);
		}
	}
	return objColumn;
};

nsGrid.__createStructure = function()
{
	//this.util.removeAllChildren(this);
	var divOuterContainer = this.__createOuterContainer();
	this.__createTitleBar(divOuterContainer);
	this.__createTableStructure(divOuterContainer);
};

nsGrid.__createOuterContainer = function()
{
	var divOuterContainer = this.util.createDiv(this.getID() + this.__OUTER_CONTAINER_ID);
	if(this.style.width != "")
	{
		divOuterContainer.style.width = this.style.width;
	}
	else if(this.offsetWidth > 0)
	{
		divOuterContainer.style.width = this.offsetWidth + "px";
	}
	else
	{
		divOuterContainer.style.width = "100%";
	}
	if(this.style.height != "")
	{
		divOuterContainer.style.height = this.style.height;
	}
	else if(this.offsetHeight > 0)
	{
		divOuterContainer.style.height = this.offsetHeight + "px";
	}
	else
	{
		divOuterContainer.style.height = "100%";
	}
	this.addChild(divOuterContainer);
	return divOuterContainer;
};

nsGrid.__createTitleBar= function(parentElement)
{
	if(parentElement && this.__title && this.__title.length > 0)
	{
		var divTitleBar = this.util.createDiv(this.getID() + this.__TITLE_CONTAINER_ID,this.__CLASS_TITLEBAR);
		var titleText = document.createTextNode(this.__title);
		divTitleBar.appendChild(titleText);
		parentElement.appendChild(divTitleBar);
		
		return divTitleBar;
	}
	return null;
};

nsGrid.__createTableStructure= function(parentElement)
{
	if(parentElement)
	{
		this.__createHeader(parentElement);
		this.__createBody(parentElement);
	}
};

/******************************Header Creation *************************************/
nsGrid.__createHeader= function(parentElement)
{	
	if(parentElement)
	{
		var divHeaderContainer = this.__createTableAndParent(this.getID() + this.__TABLE_HEADER_CONTAINER_ID,null,this.getID() + this.__TABLE_HEADER_ID);
		divHeaderContainer.style.overflow = "hidden";
		parentElement.appendChild(divHeaderContainer);
		this.__tblHeader = divHeaderContainer.firstChild;
		this.__createHeaderRows();
	}
};

nsGrid.__createHeaderRows= function()
{
	if(this.__tblHeader && this.columns && this.columns.length > 0)
	{
		var header = this.__tblHeader.createTHead();
		var headerRow = header.insertRow(-1);
	    headerRow.style.height = "auto";
	    var body = document.createElement("tbody");
		this.__tblHeader.appendChild(body);
	    var bodyRow = body.insertRow(-1);
	    for (var colIndex = 0; colIndex < this.columns.length; colIndex++)
	    {
	    	var colItem = this.columns[colIndex];
	        this.__createHeaderHeaderCell(colItem,headerRow);
	        this.__createHeaderBodyCell(colItem,bodyRow,colIndex);
	    }
	}
};

nsGrid.__createHeaderHeaderCell = function(colItem,headerRow)
{
	if(colItem && headerRow)
	{
		var headerCell = headerRow.insertCell(-1);
		headerCell.style.width = (colItem["width"]) ; 
	/*	if(colItem.hasOwnProperty("width") && !isNaN(colItem["width"]))
        {
        	headerCell.style.width = Number(colItem["width"]) + "px";
        }
        else
        {
        	headerCell.style.width = this.__DEFAULT_COLUMN_WIDTH + "px";
        }*/
	}
};

nsGrid.__createHeaderBodyCell = function(colItem,bodyRow,index)
{
	if(colItem && bodyRow)
	{
		var headerText = " ";
		if(colItem.hasOwnProperty("headerText") && colItem["headerText"])
        {
        	headerText = colItem["headerText"];
        }
		var bodyCell = bodyRow.insertCell(-1);
		bodyCell.setAttribute("id","col" + colItem["headerText"]);
		this.util.addStyleClass(bodyCell , this.__CLASS_TABLE_HEADER_CELL);
        
        var divCell = this.util.createDiv(this.getID() + "div" + headerText); 
        divCell.style.fontWeight = "bold";
        var headerTextNode = document.createTextNode(headerText);
        divCell.appendChild(headerTextNode);
        bodyCell.appendChild(divCell);
        
        bodyCell.setAttribute("orignalColumnIndex",index);
        bodyCell.setAttribute("currentColumnIndex",index);
        
        this.__headerClickRef = this.__headerClickHandler.bind(this);
    	this.__headerMouseOverRef = this.__headerMouseOverHandler.bind(this);
    	this.__headerMouseOutRef = this.__headerMouseOutHandler.bind(this);
    	this.__headerMouseDownRef = this.__headerMouseDownHandler.bind(this);
        this.util.addEvent(bodyCell,"click",this.__headerClickRef);
        this.util.addEvent(bodyCell,"mouseover",this.__headerMouseOverRef);
        this.util.addEvent(bodyCell,"mouseout",this.__headerMouseOutRef);
        this.util.addEvent(bodyCell,"mousedown",this.__headerMouseDownRef);
	}
};

nsGrid.__setHeaderSortFunction = function()
{
	if(this.__arrWrapper && this.__arrWrapper.length > 0)
    {
		if(this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows.length > 0 && this.__tblHeader.tBodies[0].rows[0].cells.length > 0)
		{
			var headerCells = this.__tblHeader.tBodies[0].rows[0].cells;
			var dataSource = this.__getAllItems();
	        for(var colIndex = 0; colIndex < headerCells.length; colIndex++)
	        {
	        	var headerCell = headerCells[colIndex];
	        	var colItem = this.columns[colIndex];
	        	this.__setHeaderSortFunctionForItem(colItem,dataSource);
	        }
		}
    } 
};

nsGrid.__setHeaderSortFunctionForItem = function(colItem,dataSource)
{
	if(colItem)
	{
		if(colItem.hasOwnProperty("dataField") && colItem["dataField"] && colItem.hasOwnProperty("sortable") && colItem["sortable"] === true)
    	{
			//In case of addColumn() dataSource will be null 
			if(!dataSource)
			{
				dataSource = this.__getAllItems();
			}
    		var item = null;
    		for(var count = 0; count < dataSource.length; count++)
            {
                 item = dataSource[count][colItem["dataField"]];
                 if(item && item != "")
                 {
                	 break;
                 }
            }
            if(item && item != "")
            {
            	colItem.sortFunction = this.__determineSortFunction(item);
            }
            else
            {
            	colItem.sortFunction = "__sortCaseInsensitive";
            }
    	}
	}
};

nsGrid.__removeHeaderCell = function(colIndex)
{
	if(colIndex > -1 && colIndex < this.columns.length)
	{
		if(this.__tblHeader && this.__tblHeader.tHead && this.__tblHeader.tHead.rows && this.__tblHeader.tHead.rows.length > 0)
		{
			var headerRow = this.__tblHeader.tHead.rows[0];
			if(this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows && this.__tblHeader.tBodies[0].rows.length > 0)
			{
				headerRow.deleteCell(colIndex);
				var headerBodyRow = this.__tblHeader.tBodies[0].rows[0];
				headerBodyRow.deleteCell(colIndex);
			}
		}
		return true;
	}
	return false;
};

nsGrid.__swapHeaderCell = function(sourceIndex,destinationIndex)
{
	if(this.__isColumnIndexValid(sourceIndex) && this.__isColumnIndexValid(destinationIndex))
	{
		if(this.__tblHeader && this.__tblHeader.tHead && this.__tblHeader.tHead.rows && this.__tblHeader.tHead.rows.length > 0)
		{
			var headerRow = this.__tblHeader.tHead.rows[0];
			if(this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows && this.__tblHeader.tBodies[0].rows.length > 0)
			{
				var arrHeaderCells = headerRow.getElementsByTagName("td");
				this.__swapCell(arrHeaderCells[sourceIndex],arrHeaderCells[destinationIndex]);
				var headerBodyRow = this.__tblHeader.tBodies[0].rows[0];
				var arrBodyCells = headerBodyRow.getElementsByTagName("td");
				this.__swapCell(arrBodyCells[sourceIndex],arrBodyCells[destinationIndex]);
			}
			return true;
		}
	}
	return false;
};

/******************************End of Header Creation *************************************/

/******************************Body Creation **********************************************/

nsGrid.__createBody= function(parentElement)
{	
	if(parentElement)
	{
		var divBodyContainer = this.__createTableAndParent(this.getID() + this.__TABLE_BODY_CONTAINER_ID,this.__CLASS_BODY_CONTAINER,this.getID() + this.__TABLE_BODY_ID);
		parentElement.appendChild(divBodyContainer);
		this.__tblBody = divBodyContainer.firstChild;
	}
};

nsGrid.__renderBody = function(fromSort)
{
	this.__tblBody.deleteTHead();
    if(this.__tblBody.tBodies && this.__tblBody.tBodies.length > 0)
    {
    	this.__tblBody.removeChild(this.__tblBody.tBodies[0]);
    }
    var body = document.createElement("tbody");
	this.__tblBody.appendChild(body);
	this.__createBodyHeader();
	this.__createBodyBody(this.__arrWrapper,0,0,!fromSort);
	this.__alignTables(fromSort);
	var divBodyContainer = this.getElement(this.getID() + this.__TABLE_BODY_CONTAINER_ID);
	if(this.__customScrollerRequired && !this.__scroller)
	{
		this.__scroller = new NSScroller(divBodyContainer);
	}
	//this does not make elements unselectable
	//this.util.makeElementUnselectable(divBodyContainer,true);
};

nsGrid.__createBodyHeader= function()
{
	var header = this.__tblBody.createTHead();
	var headerRow = header.insertRow(-1);
    headerRow.style.height = "auto";
    for (var colIndex = 0; colIndex < this.columns.length; colIndex++)
    {
        var colItem = this.columns[colIndex];
        this.__createBodyHeaderCell(colItem,headerRow);
    }
};

nsGrid.__createBodyHeaderCell= function(colItem,headerRow)
{
	if(colItem && headerRow)
	{
		var headerCell = headerRow.insertCell(-1);
		headerCell.style.width = (colItem["width"]);
	    /*if(colItem.hasOwnProperty("width") && !isNaN(colItem["width"]))
	    {
	    	headerCell.style.width = Number(colItem["width"]) + "px";
	    }
	    else
	    {
	    	headerCell.style.width = this.__DEFAULT_COLUMN_WIDTH + "px";
	    }*/
	    headerCell.style.height = "0px";
	}
};

nsGrid.__createBodyBody= function(dataSet,parentIndex,level,isReset)
{
    if(dataSet)
    {
    	 var body = this.__tblBody.tBodies[0];
    	 for (var rowIndex = 0; rowIndex < dataSet.length; rowIndex++)
	     {
    		var item = dataSet[rowIndex];
    		//var index = rowIndex + level;
	        var row = body.insertRow(-1);
	        var totalRowCount = this.__getTotalRows() - 1;
	        var index = totalRowCount;
	        row.setAttribute("index",index);
	        var className = ((totalRowCount % 2) === 0) ? this.__CLASS_EVEN_ROW : this.__CLASS_ODD_ROW;
	        this.__createBodyRow(row,item,className,totalRowCount,level,isReset);
	        this.util.addStyleClass(row , className);
	        this.__rowMouseOverRef = this.__rowMouseHover.bind(this);
	    	this.__rowMouseOutRef = this.__rowMouseHover.bind(this);
	    	this.__rowClickHandlerRef = this.__rowClickHandler.bind(this);
	        this.util.addEvent(row,"mouseover",this.__rowMouseOverRef);
	        this.util.addEvent(row,"mouseout",this.__rowMouseOutRef);
	        this.util.addEvent(row,"click",this.__rowClickHandlerRef);
	        var hasChild = false;
	        if((this.__enableHierarchical || this.__enableGrouping) && item.hasOwnProperty(this.__childField) && item[this.__childField]  && item[this.__childField].length > 0)
            {
	        	hasChild = true;
	        	this.__createBodyBody(item[this.__childField],totalRowCount,level + 1,isReset);
            }
	        item[this.__fieldIndex] = index;
    		item[this.__fieldRow] = row;
    		item[this.__fieldParentIndex] = parentIndex;
    		if(parentIndex > 0)
	        {
    			item[this.__fieldHasParent] = true;
	        }
        	else
        	{
        		item[this.__fieldHasParent] = false;
        	}
    		item[this.__fieldHasChild] = hasChild;
	        if(!isReset && item.hasOwnProperty(this.__fieldRowVisible))
	        {
	        	row.style.display = item[this.__fieldRowVisible]? "" : "none";
	        }
	        else
	        {
	        	item[this.__fieldRowVisible] = true;
	        }
	        if(isReset || !item.hasOwnProperty(this.__fieldIsCollapsed))
	        {
	        	item[this.__fieldIsCollapsed] = false;
	        }
	     }
     }
};

nsGrid.__createBodyRow= function(row,item,className,parentIndex,level,isReset)
{
    if(item)
    {
        for (var colIndex = 0; colIndex < this.columns.length; colIndex++)
        {
        	var colItem = this.columns[colIndex];
        	this.__createBodyRowCell(row,item,colItem,colIndex,parentIndex,className,level,isReset);
        }
    }
};

nsGrid.__createBodyRowCell= function(row,item,colItem,colIndex,parentIndex,className,level,isReset)
{
	if(colItem && colItem.hasOwnProperty("dataField") && colItem["dataField"])
	{
		var dataField = colItem["dataField"];
        var cell = row.insertCell(-1);
        //if(className && className.length > 0)
        //{
            this.util.addStyleClass(cell , "dataGridCell");
        //}
        var cellDiv = this.util.createDiv(null);
        cell.appendChild(cellDiv);
        if((this.__enableHierarchical || this.__enableGrouping) && colIndex == 0)
        {
        	if(level == 0)
        	{
        		cell.style.paddingLeft = "1px";
        	}
        	else
        	{
        		cell.style.paddingLeft = (20 * level) + "px";
        	}
        	
        }
        if((this.__enableHierarchical || this.__enableGrouping) && colIndex == 0 && item.hasOwnProperty(this.__childField) && item[this.__childField]  && item[this.__childField].length > 0)
        {
        	this.util.addStyleClass(cellDiv,this.__CLASS_GROUP_CELL);
        	var isCollapsed = false;
        	if(!isReset && item.hasOwnProperty(this.__fieldIsCollapsed))
 	        {
        		isCollapsed = item[this.__fieldIsCollapsed];
 	        }
        	this.__createArrow(parentIndex,cellDiv,isCollapsed);
        	var cellText = this.util.createDiv(null);
        	this.__addCellText(item,cellText,colItem,colIndex);
        	cellDiv.appendChild(cellText);
        }
        else
        {
        	this.__addCellText(item,cellDiv,colItem,colIndex);
        }
	}
};

nsGrid.__removeBodyColumn= function(colIndex)
{
	if(colIndex > -1 && colIndex < this.columns.length)
	{
		if(this.__tblBody && this.__tblBody.tHead && this.__tblBody.tHead.rows && this.__tblBody.tHead.rows.length > 0)
	    {
			var bodyRow = this.__tblBody.tHead.rows[0];
	    	if(this.__tblBody.tBodies && this.__tblBody.tBodies.length > 0 && this.__tblBody.tBodies[0].rows && this.__tblBody.tBodies[0].rows.length > 0)
			{
	    		bodyRow.deleteCell(colIndex);
	    		var arrRows = this.__tblBody.tBodies[0].rows;
	    		var row = null;
	    		for (var rowCount = 0; rowCount < arrRows.length; rowCount++) 
	    		{
	    			row = arrRows[rowCount];
	    			row.deleteCell(colIndex);
	    	    }
			}
	    }
	}
};

nsGrid.__swapBodyCell = function(sourceIndex,destinationIndex)
{
	if(this.__isColumnIndexValid(sourceIndex) && this.__isColumnIndexValid(destinationIndex))
	{
		if(this.__tblBody && this.__tblBody.tHead && this.__tblBody.tHead.rows && this.__tblBody.tHead.rows.length > 0)
		{
			var bodyRow = this.__tblBody.tHead.rows[0];
			if(this.__tblBody.tBodies && this.__tblBody.tBodies.length > 0 && this.__tblBody.tBodies[0].rows && this.__tblBody.tBodies[0].rows.length > 0)
			{
				var arrHeaderCells = bodyRow.getElementsByTagName("td");
				this.__swapCell(arrHeaderCells[sourceIndex],arrHeaderCells[destinationIndex]);
				var arrRows = this.__tblBody.tBodies[0].rows;
	    		var row = null;
	    		var arrBodyCells = [];
	    		for (var rowCount = 0; rowCount < arrRows.length; rowCount++) 
	    		{
	    			row = arrRows[rowCount];
	    			arrBodyCells = row.getElementsByTagName("td");
					this.__swapCell(arrBodyCells[sourceIndex],arrBodyCells[destinationIndex]);
	    	    }
				var headerBodyRow = this.__tblHeader.tBodies[0].rows[0];
				
			}
			return true;
		}
	}
	return false;
};

nsGrid.__createArrow = function(parentRowCount,parentElement,isCollapsed)
{
	 if(parentElement)
	 {
		 var cellArrowParent = this.util.createDiv(null);
		 var arrowID = this.getID() + "compArrow" + parentRowCount;
		 var compArrow = this.util.createDiv(arrowID);
		 compArrow.setAttribute("parent-row-count",parentRowCount);
		 
		 var objSVG = new this.util.svg(compArrow,arrowID + "_svg",20,20,0,0);
		 objSVG.addPath(arrowID + "_path",this.__ARROW_EXPANDED_PATH,this.__CLASS_ARROW);
		 
		 this.__arrowClickRef = this.__arrowClickHandler.bind(this);
		 this.util.addEvent(compArrow,"click",this.__arrowClickRef);
		 cellArrowParent.appendChild(compArrow);
		 parentElement.appendChild(cellArrowParent);
		 this.__setArrowDirection(compArrow,isCollapsed);
		 return compArrow;
	 }
	 return null;
};

nsGrid.__setArrowDirection = function(compArrow,isCollapsed)
{
	if(compArrow)
	{
		var svgUtil = new this.util.svgUtil();
		var pathID = compArrow.getAttribute("id") + "_path";
		if(isCollapsed)
		{
			svgUtil.changePathValue(pathID,this.__ARROW_COLLAPSE_PATH);
		}
		else
		{
			svgUtil.changePathValue(pathID,this.__ARROW_EXPANDED_PATH);
		}
	}
};

nsGrid.__isArrowCollapsed = function(compArrow)
{
	if(compArrow)
	{
		var svgUtil = new this.util.svgUtil();
		var pathValue = svgUtil.getPathValue(compArrow.getAttribute("id") + "_path");
		return (pathValue === this.__ARROW_COLLAPSE_PATH);
	}
	return false;
};

/******************************Create Sort Components*******************************/
nsGrid.__addAscendingIndicator = function(target)
{
     if(target)
     {
          var indicator_Asc = document.createElement("span");
          indicator_Asc.setAttribute("id",this.getID() + "indicator_Asc");
          indicator_Asc.innerHTML = this.util.isBrowserIE() ? "&nbsp<font size='5px' face='webdings'></font>" : "&nbsp;<font size='3px'>&#x25B4;</font>";
          target.firstChild.appendChild(indicator_Asc);
          this.util.addStyleClass(target,this.__CLASS_SORTING_ASC);
     }
};

nsGrid.__removeAscendingIndicator= function(target)
{
     if(target)
     {
          this.util.removeStyleClass(target,this.__CLASS_SORTING_ASC);
          var indicator_Asc = this.getElement(this.getID() + "indicator_Asc");
          if(indicator_Asc && indicator_Asc.parentNode)
          {
        	  indicator_Asc.parentNode.removeChild(indicator_Asc);
          }
     }
};

nsGrid.__addDescendingIndicator= function(target)
{
    if(target)
    {
         var indicatorDesc = document.createElement("span");
         indicatorDesc.setAttribute("id",this.getID() + "indicator_Desc");
         indicatorDesc.innerHTML = this.util.isBrowserIE() ? "&nbsp<font face='webdings'>6</font>" : "&nbsp;<font size='3px'>&#x25BE;</font>";
         target.firstChild.appendChild(indicatorDesc);
         this.util.addStyleClass(target,this.__CLASS_SORTING_DESC);
    }
};

nsGrid.__removeDescendingIndicators= function(target)
{
     if(target)
     {
    	 this.util.removeStyleClass(target,this.__CLASS_SORTING_DESC);
          var indicator_Desc = this.getElement(this.getID() + "indicator_Desc");
          if(indicator_Desc && indicator_Desc.parentNode)
          {
        	  indicator_Desc.parentNode.removeChild(indicator_Desc);
          }
     }
};

nsGrid.__resetIndicators= function(target)
{
     if(target)
     {
          this.__removeAscendingIndicator(target);
          this.__removeDescendingIndicators(target);
     }
};

nsGrid.__resetColumnHeaders= function()
{
     var tblHeaderBody = null;
     //safari doesnot support table.tHead
     if (this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0)
     {
    	 tblHeaderBody = this.__tblHeader.tBodies[0];
     }
     //two header not allowed
     if (!tblHeaderBody || !tblHeaderBody.rows || tblHeaderBody.rows.length != 1)
     {
          return;
     }
     var headers = tblHeaderBody.rows[0].cells;
     for (var colCount = 0; colCount < headers.length; colCount++)
     {
          this.__resetIndicators(headers[colCount]);
     }
};

/******************************End of Create Sort Components*******************************/

/******************************Event Listeners *************************************/

nsGrid.__arrowClickHandler = function(event)
{
	event = this.util.getEvent(event);
	var target = event.target;
	target = this.util.findParent(target,"DIV");
	if(target && target.hasAttribute("parent-row-count"))
	{
		var rowIndex = target.getAttribute("parent-row-count");
		var isCollapse = this.__isArrowCollapsed(target);
		this.__showHideRow(parseInt(rowIndex),target,!isCollapse);
	}
	event.stopImmediatePropagation();
};

nsGrid.__headerClickHandler= function(event)
{
	if(this.__onGridLine)
	{
		 return;
	}
     var target = this.util.getTarget(event);
     //adding the below condition so that if we add a span or a font and click on it then we should navigate till we find the header object
     target = this.util.findParent(target,"TD");
     var columnDetail = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
     this.__handleSorting(target,columnDetail);
};

nsGrid.__headerMouseOverHandler = function(event)
{
	var target = this.util.getTarget(event);
	target = this.util.findParent(target,"TD");
	this.__headerMouseMoveRef = this.__headerMouseMoveHandler.bind(this);
	
	this.util.addEvent(target,"mousemove",this.__headerMouseMoveRef);
};

nsGrid.__headerMouseOutHandler = function(event)
{
	var target =  this.util.getTarget(event);
	target =  this.util.findParent(target,"TD");
	this.__onGridLine = false;
	
	this.util.removeEvent(target,"mousemove",this.__headerMouseMoveRef);
	this.__headerMouseMoveRef = null;
	/*this.util.removeEvent(target,"mousedown",this.__headerMouseDownRef);
	this.__headerMouseDownRef = null;*/
	
	this.util.removeStyleClass(target,"resize-handle-active");
};

nsGrid.__headerMouseMoveHandler = function(event)
{
	event = this.util.getEvent(event);
	var target = this.util.getTarget(event);
	target = this.util.findParent(target,"TD");
	if(this.__isMouseOnElement(target,event.clientX,event.clientY))
	{
		this.util.addStyleClass(target,"resize-handle-active");
		this.__onGridLine = true;
	}
	else
	{
		this.util.removeStyleClass(target,"resize-handle-active");
		this.__onGridLine = false;
	}
};

nsGrid.__headerMouseDownHandler = function(event)
{
	event = this.util.getEvent(event);
    var target = this.util.getTarget(event);
    target = this.util.findParent(target,"TD");
    this.__startResize(event,target);
    this.__startColumnMove(event,target);
};

nsGrid.__rowMouseHover= function(event)
{
	 if(this.__enableMouseHover)
	 {
		 event = this.util.getEvent(event);
	     var target = this.util.getTarget(event);
	     target = this.util.findParent(target,"TR");
	     if (event.type == "mouseover")
	     {
	    	 this.util.addStyleClass(target,"dataGridHover");
	     }
	     else if (event.type == "mouseout")
	     {
	    	 this.util.removeStyleClass(target,"dataGridHover");
	     }
	 }
	 return false;
};

nsGrid.__rowClickHandler= function(event)
{
	event = this.util.getEvent(event);
    var target = this.util.getTarget(event);
    target = this.util.findParent(target,"TR");
    //Multiselection Check
    if (event.shiftKey && this.__enableMultiSelection)
    {
    	this.__multiSectionHandler(target);
    }
    else if(event.ctrlKey && this.__enableMultiSelection)
    {
      if(this.__isRowSelected(target))
      {
    	  this.__markRowUnselected(target);
      }
      else
      {
    	  this.__markRowSelected(target);
      }
    }
    else
    {
    	this.__clearAllRowSelection();
    	this.__markRowSelected(target);
    } 
};

/******************************End of Event Listeners*************************************/

/******************************Column Resize Logic*************************************/

nsGrid.__resize = function(table,cell, desirableWidth)
{
	var cellIndex = cell.cellIndex;
	var cellPaddingLeft = this.util.getDimensionAsNumber(cell,cell.style.paddingLeft);
	var cellPaddingRight = this.util.getDimensionAsNumber(cell,cell.style.paddingRight);
	var pad = parseInt(cellPaddingLeft,10) + parseInt(cellPaddingRight,10);
	var setWidth = Math.max(desirableWidth - pad, this.__columnMinWidth);
	cell.style.width = setWidth + "px";
};

nsGrid.__startResize = function(event,target)
{
	if(!this.__onGridLine)
	{
		return;
	}
	
	 this.util.removeEvent(target,"click",this.__headerClickRef);
	 this.__headerClickRef = null;
     this.util.removeEvent(target,"mouseover",this.__headerMouseOverRef);
     this.__headerMouseOverRef = null;
     this.util.removeEvent(target,"mouseout",this.__headerMouseOutRef);
     this.__headerMouseOutRef = null;
     /*this.util.removeEvent(target,"mousedown",this.__headerMouseDownRef);
     this.__headerMouseDownRef = null;*/
	
	this.__resizingHeader = target;
	this.__resizingHeaderCell = this.__getHeaderTopCell(target);
	this.__resizingBodyCell = this.__getBodyTopCell(target);
	
	this.__createResizeHandler(event);
	
	this.__doResizeRef = this.__doResize.bind(this);
	this.__endResizeRef = this.__endResize.bind(this);
	this.util.addEvent(document,"mousemove",this.__doResizeRef);
	this.util.addEvent(document,"mouseup",this.__endResizeRef);
	
	event.stopImmediatePropagation();
};

nsGrid.__doResize = function(event)
{
	//putting this check as somehow the document evenlistener is not getting detached
	if(!this.__resizingHeader)
	{
		return;
	}
	this.util.makeBodyUnselectable();
	event = this.util.getEvent(event);
	this.__resizeHandler.style.left = event.clientX + "px";
	
	return false;
};

nsGrid.__endResize = function(event)
{
	//putting this check as somehow the document evenlistener is not getting detached
	if(!this.__resizingHeader)
	{
		return;
	}
	this.util.removeEvent(document,"mousemove",this.__doResizeRef);
	this.__doResizeRef = null;
	this.util.removeEvent(document,"mouseup",this.__endResizeRef);
	this.__endResizeRef = null;
	this.util.removeEvent(selectedHeader,"mouseout",this.__headerMouseOutRef);
	this.__headerMouseOutRef = null;
	this.util.removeEvent(selectedHeader,"click",this.__headerClickRef);
	this.__headerClickRef = null;
	
	this.util.makeBodySelectable();
	event = this.util.getEvent(event);
	var selectedHeader = this.__resizingHeader;
	var tableHeader = this.__tblHeader;
	var tableBody = this.__tblBody;
	var desiredWidth = event.clientX - this.util.getCumulativeOffset(selectedHeader).x;
	//this.__resize(tableHeader,this.__resizingHeaderCell,desiredWidth);
	this.__resize(tableBody,this.__resizingBodyCell,desiredWidth);
	
	if(this.__resizeHandler)
	{
		document.body.removeChild(this.__resizeHandler);
	}
	
	this.__resizingHeader = null;
	this.__resizingHeaderCell = null;
	this.__resizingBodyCell = null;
	this.__resizeHandler = null;
	event.stopImmediatePropagation();
	this.__alignTables(false);
};

nsGrid.__createResizeHandler = function(event)
{
	this.__resizeHandler = this.util.createDiv(null,"resize-handle");
	this.__resizeHandler.style.top = this.util.getCumulativeOffset(this.__resizingHeader).y + "px";
	this.__resizeHandler.style.left = event.clientX + "px";
	var divHeader = this.getElement(this.getID() + this.__TABLE_HEADER_CONTAINER_ID);
	var divBody = this.getElement(this.getID() + this.__TABLE_BODY_CONTAINER_ID);
	var scrollBarWidth = this.util.getScrollBarWidth(divBody);
	this.__resizeHandler.style.height = (divHeader.offsetHeight + divBody.offsetHeight - scrollBarWidth) + "px";
	
	document.body.appendChild(this.__resizeHandler);
};

nsGrid.__getHeaderTopCell = function(cell)
{
	if(cell)
	{
		var index = cell.cellIndex;
		if(this.__tblHeader && this.__tblHeader.tHead && this.__tblHeader.tHead.rows.length > 0 && this.__tblHeader.tHead.rows[0].cells.length > 0)
		{
			var headerCells = this.__tblHeader.tHead.rows[0].cells;
			return headerCells[index];
		}
	}
	return null;
};

nsGrid.__getBodyTopCell = function(cell)
{
	if(cell)
	{
		var index = cell.cellIndex;
		if(this.__tblBody && this.__tblBody.tHead && this.__tblBody.tHead.rows.length > 0 && this.__tblBody.tHead.rows[0].cells.length > 0)
		{
			var bodyCells = this.__tblBody.tHead.rows[0].cells;
			return bodyCells[index];
		}
	}
	return null;
};

/*******************************************************End of Column Resize Logic*************************************/

/******************************************************Start of Column Move logic ********************************************************/
nsGrid.__startColumnMove = function(event,target)
{
	if(this.__onGridLine)
	{
		return;
	}
	var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
	var columnIndex = this.__getColumnIndexByObject(objColumn);
	if(columnIndex > -1)
	{
		this.__objColumnDrag = {};
		this.__objColumnDrag.source = target;
		this.__objColumnDrag.objColumn = objColumn;
		this.__objColumnDrag.columnIndex = columnIndex;
		var position = this.util.getEventPosition(event);
		this.__objColumnDrag.dragElement = this.__createCopyItem(target,position);
		this.__objColumnDrag.dragElementAdded = false;
		this.__objColumnDrag.position = position;
		this.__dragColumnMoveRef = this.__dragColumnMoveHandler.bind(this);
		this.__dragColumnEndRef = this.__dragColumnEndHandler.bind(this);
		this.util.addEvent(document,"mousemove",this.__dragColumnMoveRef);
		this.util.addEvent(document,"mouseup",this.__dragColumnEndRef);
	}
};

nsGrid.__dragColumnMoveHandler = function(event)
{
	var event = this.util.getEvent(event);
	var position = this.util.getEventPosition(event);
	var leftOffset = this.__objColumnDrag.position.left - position.left;
    var topOffset = this.__objColumnDrag.position.top - position.top;
    var dragRadius = (leftOffset * leftOffset) + (topOffset * topOffset);
    if(!this.__objColumnDrag.dragElementAdded && dragRadius > this.__MIN_DRAG_OFFSET)
    {
    	document.body.appendChild(this.__objColumnDrag.dragElement);
    	this.__objColumnDrag.dragElementAdded = true;
    }
    this.__objColumnDrag.dragElement.style.left = event.clientX + "px"; //position.left + "px";
    this.__objColumnDrag.dragElement.style.top = event.clientY + "px";
    event.preventDefault();
};

nsGrid.__dragColumnEndHandler = function(event)
{
	this.util.removeEvent(document,"mousemove",this.__dragColumnMoveRef);
	this.__dragColumnMoveRef = null;
	this.util.removeEvent(document,"mouseup",this.__dragColumnEndRef);
	this.__dragColumnEndRef = null;
	if(this.__objColumnDrag.dragElementAdded)
	{
		document.body.removeChild(this.__objColumnDrag.dragElement);
		var position = this.util.getEventPosition(event);
		var tablePosition = this.util.getOffSet(this.__tblHeader);
		if (position.top < tablePosition.top || position.top > (tablePosition.top + this.__tblHeader.offsetHeight)) 
		{
		      return;
		}
		var targetIndex = this.__getHeaderColumnByPosition(position);
	    if (targetIndex > -1 && targetIndex != this.__objColumnDrag.columnIndex) 
	    {
	    	this.swapColumns(this.__objColumnDrag.columnIndex,targetIndex);
	    }
	}
};

nsGrid.__createCopyItem = function(target,position)
{
	var divDrag = null;
	if(target && position)
	{
		divDrag = this.util.createDiv(this.getID() + "Drag","dataGridHeader");
		divDrag.innerHTML = target.innerHTML;
		//divDrag.style.backgroundColor = "red";
		divDrag.style.position = "absolute";
		divDrag.style.left = (position.left) + "px";
		divDrag.style.top = (position.top) + "px";
		divDrag.style.width = target.offsetWidth + "px";
		divDrag.style.height = target.offsetHeight + "px";
		divDrag.style.opacity = 0.7;
	}
	return divDrag;
};

nsGrid.__getHeaderColumnByPosition = function(position) 
{
	if(this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows && this.__tblHeader.tBodies[0].rows.length > 0)
	{
		var headerBodyRowCells = this.__tblHeader.tBodies[0].rows[0].cells;;
	    for (var count = 0; count < headerBodyRowCells.length; count++) 
	    {
	      var rowPosition = this.util.getOffSet(headerBodyRowCells[count]);
	      if (rowPosition.left <= position.left && position.left <= rowPosition.left + headerBodyRowCells[count].offsetWidth) 
	      {
	    	  return count;
	      }
	    }
	    return -1;
	}
};

/******************************************************End of Column Move logic ********************************************************/

/******************************************************Start of Selection Functions*************************************************************/

nsGrid.__isRowSelected= function(row)
{
    if(row)
    {
        return this.util.hasStyleClass(row,"dataGridSelection");
    }   
    return false;
};

nsGrid.__markRowSelected= function(row)
{
    if(row)
    {
        if(!this.__isRowSelected(row))
        {
        	this.util.addStyleClass(row,"dataGridSelection");   
            this.selectedItems.push(row);
        	var index = parseInt(row.getAttribute("index"));
        	var item = this.__getItemByIndex(index);
            this.util.dispatchEvent(this,this.ITEM_SELECTED,item,{index:item[this.__fieldIndex]});
        }
    }
};

nsGrid.__markRowUnselected= function(row)
{
    if(this.__isRowSelected(row))
    {
    	this.util.removeStyleClass(row,"dataGridSelection");
        for (var count=0; count < this.selectedItems.length ; count++)
        {
            if (parseInt(this.selectedItems[count].getAttribute("index")) === parseInt(row.getAttribute("index")))
            {
                this.selectedItems.splice(count,1);
                break;
            }
        }
        var index = parseInt(row.getAttribute("index"));
        var item = this.__getItemByIndex(index);
        this.util.dispatchEvent(this,this.ITEM_UNSELECTED,item,{index:item[this.__fieldIndex]});
    }
};

nsGrid.__clearAllRowSelection= function()
{
    for (var count=0; count < this.selectedItems.length ; count++)
    {
        if (this.selectedItems[count])
        {
        	this.util.removeStyleClass(this.selectedItems[count],"dataGridSelection");
        }
    }
    this.selectedItems = [];
};

nsGrid.__multiSectionHandler= function(lastRow)
{
	 if(!lastRow)
	 {
		 return;
	 }
	 if (this.selectedItems.length === 0)
	 {
		 this.__isRowSelected(lastRow);
	     return;
	 }
	 var firstRow = this.selectedItems[this.selectedItems.length - 1];
	 if(parseInt(lastRow.getAttribute("index")) === parseInt(firstRow.getAttribute("index")))
	 {
		 this.__markRowUnselected(lastRow);
		 return;
	 }
	 var isDown = (parseInt(lastRow.getAttribute("index")) > parseInt(firstRow.getAttribute("index")));
	 var isSelection = !this.__isRowSelected(lastRow);
	 var navigateRow = firstRow;
	 do
	 {
		  navigateRow = isDown ? navigateRow.nextSibling : navigateRow.previousSibling;
		  if (isSelection)
		  {
			  this.__markRowSelected(navigateRow);
		  }
		  else
		  {
			  this.__markRowUnselected(navigateRow);
		  }
	 }
	 while(parseInt(navigateRow.getAttribute("index")) != parseInt(lastRow.getAttribute("index")));
};

nsGrid.__setVisibilityOfColumn = function(index,isVisible)
{
	var style;
    if (isVisible) 
    {
    	style = "";
    }
    else
    {
    	style = "none";
    }
	var rows = this.__tblHeader.getElementsByTagName("tr");
	for (var count = 0; count < rows.length;count++) 
	{
	     var cells = rows[count].getElementsByTagName("td");
	     if(cells.length > index)
	     {
	    	 cells[index].style.display = style;
	     }
	     else
	     {
	    	 return;
	     }
	}
	rows = this.__tblBody.getElementsByTagName("tr");
	for (var count = 0; count < rows.length;count++) 
	{
	     var cells = rows[count].getElementsByTagName("td");
	     cells[index].style.display = style;
	}
	
};

/******************************************************End of Selection Functions*************************************************************/
/******************************************************Start of Sorting Logic*************************************************************/

nsGrid.__handleSorting= function(header,columnDetail)
{
	if(header && columnDetail && columnDetail.sortable)
    {
   	  var sortAscending = false;
   	  if (this.util.hasStyleClass(header,this.__CLASS_SORTING_ASC) || this.util.hasStyleClass(header,this.__CLASS_SORTING_DESC))
	  {
          if(this.util.hasStyleClass(header,this.__CLASS_SORTING_ASC))
          {
               this.__removeAscendingIndicator(header);
               sortAscending = false;
          }
          else if(this.util.hasStyleClass(header,this.__CLASS_SORTING_DESC))
          {
       	   this.__removeDescendingIndicators(header);
       	   sortAscending = true;
          }
	  }
   	  else
   	  {
   		  this.__resetColumnHeaders();
   		  sortAscending = !columnDetail.sortDescending;
   	  }
   	  if(sortAscending)
      {
   		  this.__addAscendingIndicator(header);
      }
   	  else
   	  {
   		  this.__addDescendingIndicator(header);
   	  }
   	  if(this.__enableHierarchical || this.__enableGrouping)
   	  {
   		  this.__sortHierarchicalStructure(this.__arrWrapper,columnDetail,sortAscending); 
   	  }
   	  else
   	  {
   		  this.__sortArrOfObjectsByParam(this.__arrWrapper,columnDetail.sortFunction,columnDetail.dataField,sortAscending);
   	  }
      this.__renderBody(true);
    }
};

nsGrid.__sortHierarchicalStructure= function(dataSource,columnDetail,sortAscending)
{
	if(dataSource && dataSource.length > 0)
	{
		for(var count = 0;count < dataSource.length;count++)
		{
			var item = dataSource[count];
			if(this.__isNodeLastParent(item))
			{
				this.__sortArrOfObjectsByParam(item[this.__childField],columnDetail.sortFunction,columnDetail.dataField,sortAscending);
			}
			else if(item[this.__fieldHasChild])
			{
				this.__sortHierarchicalStructure(item[this.__childField],columnDetail,sortAscending);
			}
		}
	}
};

//This method is based on Stuart Langridge's "sorttable" code
nsGrid.__determineSortFunction= function(item)
{ 
      var sortFunction = "__sortCaseInsensitive";
      if (item.match(/^\d\d[\/-]\d\d[\/-]\d\d\d\dgetElement/))
      {
          sortFunction = "__sortDate";
      }
      if (item.match(/^\d\d[\/-]\d\d[\/-]\d\dgetElement/))
      {
          sortFunction = "__sortDate";
      }
      if (item.match(/^[Ãƒâ€šÃ‚Â£$]/))
      {
          sortFunction = "__sortCurrency";
      }
      if (item.match(/^\d?\.?\d+getElement/))
      {
          sortFunction = "__sortNumeric";
      }
      if (item.match(/^[+-]?\d*\.?\d+([eE]-?\d+)?getElement/))
      {
          sortFunction = "__sortNumeric";
      }
      if(!isNaN(item))
      {
    	  sortFunction = "__sortNumeric";
      }
     
      return sortFunction;
};

nsGrid.__sortArrOfObjectsByParam= function(arrToSort,sortFunctionName,dataField,sortAscending)
{
     if(sortAscending == null || sortAscending == undefined)
     {
         sortAscending = true;  // default to true
     }
     arrToSort.sort(function (item1, item2)
     {
         var retValue = 0;
         if (typeof this[sortFunctionName] === "function")
         {
             retValue = this[sortFunctionName](item1, item2 , dataField, sortAscending);
         }
         return retValue;
     }.bind(this));
};
 
nsGrid.__sortCaseInsensitive= function(item1, item2 , dataField, sortAscending)
{
	if(!item1[dataField] && !item2[dataField])
	{
		return 0;
	}
	var retValue = -1;
	if(!item1[dataField])
	{
		retValue = -1;
	}
	else if(!item2[dataField])
	{
		retValue = 1;
	}
	else
	{
		var firstString = item1[dataField].toLowerCase();
	    var secondString = item2[dataField].toLowerCase();
	      
	    if(firstString == secondString)
	    {
	    	return 0;
	    }
	    if (firstString < secondString)
	    {
	        retValue = -1;
	    }
	    else
	    {
	        retValue = 1;
	    }
	}
	
    if(sortAscending)
    {
        return retValue; 
    }
    return (retValue * -1);
};
 
nsGrid.__sortDate= function(item1, item2 , dataField, sortAscending)
{
      // y2k notes: two digit years less than 50 are treated as 20XX, greater than 50 are treated as 19XX
      var firstDateString = item1[dataField];
      var secondDateString = item2[dataField];
      var firstDate, secondDate, year = -1;
     
      if (firstDateString.length == 10)
      {
           firstDate = firstDateString.substr(6,4) + firstDateString.substr(3,2) + firstDateString.substr(0,2);
      }
      else
      {
           year = firstDateString.substr(6,2);
           if (parseInt(year) < 50)
           {
                year = "20" + year;
           }
           else
           {
                year = "19" + year;
           }
           firstDate = year + firstDateString.substr(3,2) + firstDateString.substr(0,2);
      }
     
      if (secondDateString.length == 10)
      {
           secondDate = secondDateString.substr(6,4)+secondDateString.substr(3,2)+secondDateString.substr(0,2);
      }
      else
      {
           year = secondDateString.substr(6,2);
           if (parseInt(year) < 50)
           {
                year = "20" + year;
           }
           else
           {
                year = "19" + year;
           }
           secondDate = year + secondDateString.substr(3,2) + secondDateString.substr(0,2);
      }
     
      if (firstDate == secondDate)
      {
          return 0;
      }
      var retValue = -1;
      if (firstDate < secondDate)
      {
          retValue = -1;
      }
      else
      {
          retValue = 1;
      }
      if(sortAscending)
      {
          return retValue; 
      }
      return (retValue * -1);
};

nsGrid.__sortCurrency= function(item1, item2 , dataField, sortAscending)
{
      var firstCurrency = item1[dataField].replace(/[^0-9.]/g,"");
      var secondCurrency = item2[dataField].replace(/[^0-9.]/g,"");
      if(sortAscending)
      {
          return parseFloat(firstCurrency) - parseFloat(secondCurrency); 
      }
      return parseFloat(secondCurrency) - parseFloat(firstCurrency);
};

nsGrid.__sortNumeric= function(item1, item2 , dataField, sortAscending)
{
      var firstNumber = parseFloat(item1[dataField]);
      if (isNaN(firstNumber))
      {
          firstNumber = 0;
      }
      var secondNumber = parseFloat(item2[dataField]);
      if (isNaN(secondNumber))
      {
          secondNumber = 0;
      }
      if(sortAscending)
      {
          return (firstNumber - secondNumber);
      }
      return (secondNumber - firstNumber);
};

nsGrid.__reverseTable= function()
{
    // reverse the rows in a tbody
    var tbody = this.tblBody.tBodies[0];
    var indexCount = 0;
    newrows = [];
    for (var rowCount=0; rowCount < tbody.rows.length; rowCount++)
    {
        newrows[newrows.length] = tbody.rows[rowCount];
    }
    for (var rowCount=newrows.length-1; rowCount >= 0; rowCount--)
    {
    	var row = newrows[rowCount];
    	row.setAttribute("index",indexCount);
    	indexCount ++;
        tbody.appendChild(row);
    }
    delete newrows;
};
/******************************************************End of Sorting Logic*************************************************************/

/******************************Custom Function *************************************/

nsGrid.__createTableAndParent = function(containerID,containerStyle,tableID)
{
	var divTableContainer = this.util.createDiv(containerID,containerStyle); 
	var table = document.createElement("TABLE");
	table.setAttribute("id",tableID);
	this.util.addStyleClass(table , this.__CLASS_TABLE);
	divTableContainer.appendChild(table);
	return divTableContainer;
};

nsGrid.__alignTables = function(fromSort)
{
	var divOuterContainer = this.getElement(this.getID() + this.__OUTER_CONTAINER_ID);
	var divHeader = this.getElement(this.getID() + this.__TABLE_HEADER_CONTAINER_ID);
	var divBody = this.getElement(this.getID() + this.__TABLE_BODY_CONTAINER_ID);
	var divTitleBar = this.getElement(this.getID() + this.__TITLE_CONTAINER_ID);
	var topHeight = divHeader.offsetHeight;
	if(divTitleBar)
	{
		topHeight += divTitleBar.offsetHeight;
	}
	divBody.style.height = (divOuterContainer.offsetHeight - topHeight) + "px";
	var tableHeader = this.__tblHeader;
	var tableBody = this.__tblBody;
	var scrollBarWidth = this.util.getScrollBarWidth(divBody);
	divHeader.style.width = (divBody.offsetWidth) + "px";
	//divHeader.style.backgroundColor = "#D8D8D8";
	this.__synchronizeTablesRef = this.__synchronizeTables.bind(this);
	this.util.addEvent(divBody,"scroll",this.__synchronizeTablesRef);
	//tableHeader.style.width = (divBody.offsetWidth - scrollBarWidth) + "px";
	
	if(tableHeader.tHead && tableHeader.tHead.rows.length > 0 && tableBody.tHead && tableBody.tHead.rows.length)
	{
		var headerCells = tableHeader.tHead.rows[0].cells;
		var bodyCells = tableBody.tHead.rows[0].cells;
		if(headerCells && headerCells.length > 0 && bodyCells && bodyCells.length > 0)
		{
			var totalWidth = 0;
			var count = 0;
			var widthToBeSet = 0;
			if(fromSort)
			{
				for(count = 0;count < headerCells.length;count++)
				{
					//widthToBeSet = this.util.getDimensionAsNumber(headerCells[count],headerCells[count].style.width);
					//if(widthToBeSet === 0)
					//{
						widthToBeSet = headerCells[count].offsetWidth;
					//}
					totalWidth += widthToBeSet;
					bodyCells[count].style.width = widthToBeSet + "px";
					headerCells[count].style.width = widthToBeSet + "px";
				}
			}
			else
			{
				for(count = 0;count < headerCells.length;count++)
				{
					//widthToBeSet = this.util.getDimensionAsNumber(bodyCells[count],bodyCells[count].style.width);
					//if(widthToBeSet === 0)
					//{
						widthToBeSet = bodyCells[count].offsetWidth;
					//}
					totalWidth += widthToBeSet;
					headerCells[count].style.width = widthToBeSet + "px";
					bodyCells[count].style.width = widthToBeSet + "px";
				}
			}
			tableBody.style.width = totalWidth + "px";
			tableHeader.style.width = totalWidth + "px";
		}
	}
};

nsGrid.__synchronizeTables = function(event) 
{
	var divHeader = this.getElement(this.getID() + this.__TABLE_HEADER_CONTAINER_ID);
	if(this.__scroller)
	{
		divHeader.scrollLeft = event.scrollLeft;
	}
	else
	{
		var target = this.util.getTarget(event);
		divHeader.scrollLeft = target.scrollLeft;
	}
	
};

nsGrid.__expandCollapseAll = function(dataSource,isCollapse)
{
	if(!dataSource)
	{
		dataSource = this.__arrWrapper;
	}
	if(dataSource && dataSource.length > 0)
	{
		for(var count = 0;count < dataSource.length;count++)
		{
			var item = dataSource[count];
			if(item[this.__fieldHasChild])
			{
				this.__showHideRow(item[this.__fieldIndex],null,isCollapse);
				this.__expandCollapseAll(item[this.__childField],isCollapse);
			}
		}
	}
};

nsGrid.__showHideRow = function(rowIndex,compArrow,isCollapse)
{
	if(rowIndex > -1)
	{
		var item = this.__getItemByIndex(rowIndex);
		if(!compArrow)
		{
			compArrow = this.__getArrows(item[this.__fieldIndex]);
		}
		var arrChildItems = [];
		if(item && item[this.__fieldHasChild])
		{
			if(isCollapse)
			{
				arrChildItems = this.__getAllChildItems(arrChildItems,item);
			}
			else
			{
				arrChildItems = item[this.__childField];
			}
			if(arrChildItems && arrChildItems.length > 0)
			{
				for(var count = 0;count < arrChildItems.length;count++)
				{
					var rowItem = arrChildItems[count];
					var row = rowItem[this.__fieldRow];
					if(isCollapse)
					{
						row.style.display = "none";
						rowItem[this.__fieldRowVisible] = false;
						if(rowItem[this.__fieldHasParent])
						{
							var rowParentIndex = rowItem[this.__fieldParentIndex];
							if(rowParentIndex > -1)
							{
								var divArrow = this.__getArrows(rowParentIndex);
								if(divArrow)
								{
									this.__setArrowDirection(divArrow,true);
									rowItem[this.__fieldIsCollapsed] = true;
								}
							}
						}
					}
					else
					{
						row.style.display = "";
						rowItem[this.__fieldRowVisible] = true;
					}
				}
			}
			this.__setArrowDirection(compArrow,isCollapse);
			item[this.__fieldIsCollapsed] = isCollapse;
		}
	}
};

nsGrid.__isNodeLastParent = function(item)
{
	var retValue = false;
	if(item && item[this.__fieldHasChild])
	{
		var arrChildItems = item[this.__childField];
		if(arrChildItems && arrChildItems.length > 0)
		{
			var hasChild = false;
			for(var count = 0;count < arrChildItems.length;count++)
			{
				var rowItem = arrChildItems[count];
				if(rowItem && rowItem[this.__fieldHasChild])
				{
					hasChild = true;
					break;
				}
			}
			if(!hasChild)
			{
				retValue = true;
			}
		}
	}
	return retValue;
};


nsGrid.__addCellText = function(item,div,colItem,colIndex)
{
	var dataField = colItem["dataField"];
	var itemRenderer = colItem["itemRenderer"];
	var setData = colItem["setData"];
	if(itemRenderer)
	{
		div.appendChild(itemRenderer.cloneNode(true));
		this.__setDataInCell(div,item,dataField,setData,colItem);
		var expectedHeight = this.__calculateCellExpectedHeight(itemRenderer);
		if(expectedHeight > 0)
		{
			//div.children[0].style.height = expectedHeight + "px";
		}
	}
};

nsGrid.__setDataInCell = function(cellItem,data,dataField,setData,colItem)
{
	if(cellItem && setData)
	{
		this.__setRendererProperties(cellItem);
		this.__setRendererInData(cellItem,data);
		//IE bug
		cellItem.data = data;
		if(this.util.isFunction(setData))
	    {
			var strParam = "(cellItem,data,dataField,colItem)"; 
	    	if(this.util.isString(setData))
	    	{
	    		this.util.callFunctionFromString(setData + strParam,function(paramValue){
					if(paramValue === "cellItem")
					{
						return cellItem;
					}
					if(paramValue === "data")
					{
						return data;
					}
					if(paramValue === "dataField")
					{
						return dataField;
					}
					if(paramValue === "colItem")
					{
						return colItem;
					}
					return paramValue;
				});
	    	}
	    	else
	    	{
	    		setData(cellItem,data,dataField,colItem);
	    	}
	    }
	}
};

nsGrid.__setRendererInData = function(cellItem,data)
{
	if(cellItem)
	{
		var compChild = null;
		for(var count = 0; count < cellItem.children.length; count++) 
		{
			compChild = cellItem.children[count];
			if(compChild)
			{
				compChild.data = data;
			}
			//IE 9 Bug,you got to assign it back
			//listItem.children[count] = compChild;
			this.__setRendererInData(compChild,data);
		}
	}
};

nsGrid.__setRendererProperties = function(cellItem)
{
	if(cellItem)
	{
		var compChild = null;
		for(var count = 0; count < cellItem.children.length; count++) 
		{
			compChild = cellItem.children[count];
			var grid = this;
			Array.prototype.slice.call(compChild.attributes).forEach(function(attribute) 
			{
		        if(grid.util.isFunction(attribute.value))
		        {
		        	var newValue = attribute.value + "(this)";
		        	compChild.removeAttribute(attribute.name);
					compChild.setAttribute(attribute.name,newValue);
		        }
			});
			if(compChild)
			{
				if(compChild.hasAttribute("accessor-name"))
				{
					cellItem[compChild.getAttribute("accessor-name")] = compChild;
				}
			}
			this.__setRendererProperties(compChild);
		}
	}
};

nsGrid.__calculateCellExpectedHeight = function(itemRenderer)
{
	var retHeight =  -1;
	if(itemRenderer)
	{
		var tempRenderer = itemRenderer.cloneNode(true);
		tempRenderer.removeAttribute("id");
		this.addChild(tempRenderer);
		retHeight = tempRenderer.offsetHeight;
		if(retHeight <= 0)
		{
			retHeight = this.util.getDimensionAsNumber(tempRenderer,tempRenderer.style.height);
		}
		this.deleteChild(tempRenderer);
	}
	return retHeight;
};

nsGrid.__getAllItems = function()
{
	var	arrItems = [];
	if((this.__enableHierarchical || this.__enableGrouping) && this.__arrWrapper)
	{
		var item = null;
		for(var count = 0;count < this.__arrWrapper.length;count++)
		{
			item = this.__arrWrapper[count];
			var arrChild = [];
			arrChild = this.__getAllChildItems(null,item);
			arrItems.push(item);
			if(arrChild && arrChild.length)
			{
				arrItems.push.apply(arrItems, arrChild);
			}
		}
	}
	else
	{
		arrItems = this.__arrWrapper;
	}
	return arrItems;
};


nsGrid.__getAllChildItems = function(arrItems,item)
{
	if(!arrItems)
	{
		arrItems = [];
	}
	if(item && item[this.__fieldHasChild])
	{
		var arrChild = item[this.__childField];
		for(var count = 0;count < arrChild.length;count++)
		{
			var itemChild = arrChild[count];
			arrItems[arrItems.length] = itemChild;
			if(itemChild && itemChild[this.__fieldHasChild])
			{
				arrItems = this.__getAllChildItems(arrItems,itemChild);
			}
		}
	}
	return arrItems;
};

nsGrid.__getArrows = function(rowCount)
{
	var arrDivs = this.__tblBody.querySelectorAll("div");
	if(arrDivs && arrDivs.length > 0)
	{
		for(var count = 0;count < arrDivs.length;count++)
		{
			var div = arrDivs[count];
			if(div && div.hasAttribute("parent-row-count"))
			{
				var rowParentCount = div.getAttribute("parent-row-count");
				if(rowParentCount && rowParentCount == rowCount)
				{
					return div;
				}
			}
		}
	}
};

nsGrid.__getTotalRows = function()
{
	if(this.__tblBody && this.__tblBody.tBodies && this.__tblBody.tBodies.length > 0)
	{
		return this.__tblBody.tBodies[0].rows.length;
	}
	return 0;
};

nsGrid.__getItemByIndex = function(indexToFind,source)
{
	var retValue = null;
	if(!source)
	{
		source = this.__arrWrapper;
	}
	if(source && source.length > 0)
	{
		for(var count = 0;count < source.length;count++)
		{
			var item = source[count];
			if(item && item[this.__fieldIndex] === indexToFind)
			{
				retValue = item;
			}
			else if(item[this.__fieldHasChild])
			{
				retValue = this.__getItemByIndex(indexToFind,item[this.__childField]);
			}
			if(retValue)
			{
				return retValue;
			}
		}
			
	}
	return retValue;
};

nsGrid.__getColumnObject = function(index)
{
	index = parseInt(index);
	if(this.columns && index > -1 && index < this.columns.length)
	{
		var item = null;
		for(var count = 0;count < this.columns.length;count++)
		{
			item = this.columns[count];
			if(item[this.__fieldColIndex] === index)
			{
				return item;
			}
		}
	}
	return null;
};

nsGrid.__getColumnIndexByObject = function(objColumn)
{
	if(this.columns && objColumn)
	{
		var item = null;
		for(var count = 0;count < this.columns.length;count++)
		{
			if(this.columns[count][this.__fieldColIndex] === objColumn[this.__fieldColIndex])
			{
				return count;
			}
		}
	}
	return -1;
};


nsGrid.__getColumnIndexForSwapOrRemove = function(column)
{
	var index = -1;
	//checking below like this because column = 0 then column will return false;
	if(!this.util.isUndefined(column) && column != null)
	{
		if(this.util.isNumber(column) && this.columns && column < this.columns.length)
		{
			index = column;
		}
		else if(this.util.isString(column))
		{
			for(var count = 0;count < this.columns.length;count++)
			{
				var item = this.columns[count];
				if(item["dataField"] === column)
				{
					index = count;
					break;
				}
			}
		}
	}
	else
	{
		this.util.throwNSError("NSGrid","Please pass valid column information.");
	}
	return index;
};

nsGrid.__isColumnValidForSwapOrRemove = function(columnIndex,operation)
{
	if(this.__isColumnIndexValid(columnIndex))
	{
		if((this.__enableHierarchical && columnIndex === 0) || (this.__enableGrouping && (columnIndex === 0 || this.columns[columnIndex]["dataField"] === this.__groupByField)))
		{
			this.util.throwNSError("NSGrid","This column cannot be " + operation + ".");
			return false;
		}
		return true;
	}
	return false;
	
};

nsGrid.__swapCell = function(sourceCell,destinationCell)
{
	if(sourceCell && destinationCell)
	{
		var cellSource = this.util.copyElement(sourceCell);
		this.util.copyElement(destinationCell,sourceCell);
		this.util.copyElement(cellSource,destinationCell);
		return true;
	}
	return false;
};

nsGrid.__isColumnIndexValid = function(columnIndex)
{
	if(columnIndex > -1 && columnIndex < this.columns.length)
	{
		return true;
	}
	return false;
	
};

nsGrid.__isMouseOnElement = function(element, currentX, currentY)
{
	var offset = this.util.getCumulativeOffset(element);
	return (currentY >= offset.y &&
			currentY <  offset.y + element.offsetHeight &&
            currentX >= offset.x + element.offsetWidth - 5 &&
            currentX <  offset.x + element.offsetWidth);
};

/******************************End of Custom Function *************************************/
/******************************Loader Related Function *************************************/

nsGrid.showLoader = function()
{
	if(!this.__loader)
	{
		var divOuterContainer = this.getElement(this.getID() + this.__OUTER_CONTAINER_ID);
		this.__loader = new this.util.loader(divOuterContainer);
	}
	this.__loader.show();
};

nsGrid.hideLoader = function()
{
	if(this.__loader)
	{
		this.__loader.hide();
	}
};


document.registerElement("ns-grid", {prototype: nsGrid});
