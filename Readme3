function NSList(component,setting) 
{
	//this.base.call(this);
	this.ITEM_SELECTED = "itemSelected";
	this.ITEM_UNSELECTED = "itemUnselected";
	this.ITEM_NAVIGATED = "itemNavigated";
	this.NAVIGATION_UP = "up";
	this.NAVIGATION_DOWN = "down";
	this.ITEM_DROPPING = "itemDropping";
	this.ITEM_DROPPED = "itemDropped";
	this.DRAG_STARTED = "dragStarted";
	this.DRAGGING = "dragging";
	this.DRAG_END = "dragEnd";
	
	this.__setting = setting;
	this.__dataSource = null;
	this.__labelField = "label";
	this.__itemRenderer = null;
	this.__templateID = null;
	this.__setData = null;
	this.__labelFunction = null;
	this.__enableHierarchical = false;
	this.__enableMouseHover = false;
	this.__enableMouseHoverAnimation = false;
	this.__disableHoverField = null;
	this.__disableHoverFunction = null;
	this.__enableKeyboardNavigation = false;
	this.__enableMultipleSelection = false;
	this.__customScrollerRequired = false;
	this.__enableVirtualScroll = false;
	this.__enableDragDrop = false;
	this.__enableDragByHandle = false;
	this.__dragHandlerClass = null;
	this.__rowHeight = -1;
	this.__noDataMessage = "No matching records found";
	
	this.__arrWrapper = null;
	this.__arrInternalSource = null;
	this.__arrFlatHierarchicalSource = [];
	
	this.__divOuterContainer = null;
	this.__divParentContainer = null;
	this.__listContainer = null;
	this.__scroller = null;
	
	this.__template = null;
	this.__currentIndex = -1;
	this.__selectedIndex = -1;
	this.__navigationIndex = -1;
	this.__selectedItem = null;
	this.__selectedItems = [];	
	this.__selectedIndexes = [];
	this.__lastNavigationDirection = null;
	//for keyboard navigation
	this.__pageSize = 0;
	this.__scrollTarget = null;
	this.__startArrayElement = -1;
	this.__listItemHeight = 0;
	//for Virtual Scroll
	this.__virtualRowHeight = 0;
	this.__rowCount = 0;
	this.__scrollOffsetPosition = 0;
	this.__lastScrollPosition = 0;
	this.__divVirtualScrollParent = null;
	this.__divVirtualScroller = null;
	
	this.__childField = "children";
	this.__CLASS_GROUP_CELL = "nsGroupCell";
	this.__CLASS_CELL_CHILD = "nsCellChild";
	
	//removing this.getID() as prefix as move functionality from one list to another would have different fields.
	this.__fieldPrefix = "ns_field";
	this.__fieldIndex =  this.__fieldPrefix + "_item_index";
	this.__fieldItem = this.__fieldPrefix + "_item";
	this.__fieldDisableHover = this.__fieldPrefix + "_disableHover";
	this.__fieldSelected = this.__fieldPrefix + "_selected";
	
	this.__fieldItemLevel = this.__fieldPrefix + "_item_level";
	this.__fieldItemVisible = this.__fieldPrefix + "_item_visible";
	this.__fieldParentIndex = this.__fieldPrefix + "_parent_index";
	this.__fieldHasChild = this.__fieldPrefix + "_item_hasChild";
	this.__fieldHasParent = this.__fieldPrefix + "_item_hasParent";
	this.__fieldIsCollapsed = this.__fieldPrefix + "_item_isCollapsed";
	this.__fieldItemArrow = this.__fieldPrefix + "_item_arrow";
	
	this.__isShiftPressed = false;
	this.__isCtrlPressed = false;
	
	this.__objGrid = null;
	this.__nsListFilter = null;
	this.__nsListDragDrop = null;
	
	this.__keyDownRef = null;
	this.__keyUpRef = null;
	this.base.__setBaseComponent.call(this,component);
};
nsExtendPrototype(NSContainerBase,NSList);
NSList.prototype.constructor = NSList;

NSList.prototype.initializeComponent = function() 
{
	this.base.initializeComponent.call(this);
	this.__setSetting();
	this.__initializePluggins();
};

NSList.prototype.setComponentProperties = function() 
{
	this.base.setComponentProperties.call(this);
	this.__objGrid.__addSVGInPage();
	this.__setTemplate();
	this.__addListenerForBody();
	if(this.__dataSource)
	{
		this.dataSource(this.__dataSource);
	}
	if(!window["nsListMap"])
	{
		window["nsListMap"] = {};
	}
	window["nsListMap"][this.getID()] = this;
};

NSList.prototype.propertyChange = function(attrName, oldVal, newVal, setProperty)
{
	var attributeName = attrName.toLowerCase();
	this.base.propertyChange.call(this,attrName, oldVal, newVal, setProperty);
};

NSList.prototype.removeComponent = function() 
{
	if(this.__keyDownRef)
	{
		this.util.removeEvent(document.body,"keydown",this.__keyDownRef);
		this.__keyDownRef = null;
	}
	if(this.__keyUpRef)
	{
		this.util.removeEvent(document.body,"keyup",this.__keyUpRef);
		this.__keyUpRef = null;
	}
	if(this.__scroller)
	{
		this.__scroller.__destroyElements();
		this.__scroller = null;
	}
	this.base.removeComponent.call(this);
};

NSList.prototype.componentResized = function(event) 
{
	this.base.componentResized.call(this,event);
};

NSList.prototype.expandAll = function()
{
	if(this.__enableHierarchical)
	{
		this.__expandCollapseAll(false);
	}
};

NSList.prototype.collapseAll = function()
{
	if(this.__enableHierarchical)
	{
		this.__expandCollapseAll(true);
	}
};

NSList.prototype.__setSetting = function()
{
	var setting = this.__setting;
	if(setting)
	{
		if(setting.hasOwnProperty("enableHierarchical"))
		{
			this.__enableHierarchical = Boolean.parse(setting["enableHierarchical"]);
		}
		if(setting.hasOwnProperty("enableVirtualScroll"))
		{
			this.__enableVirtualScroll = Boolean.parse(setting["enableVirtualScroll"]);
		}
		if(setting.hasOwnProperty("enableDragDrop"))
		{
			if(!this.__enableVirtualScroll)
			{
				this.__enableDragDrop = Boolean.parse(setting["enableDragDrop"]);
			}
		}
		if(setting.hasOwnProperty("enableDragByHandle"))
		{
			this.__enableDragByHandle = Boolean.parse(setting["enableDragByHandle"]);
		}
		if(setting.hasOwnProperty("dragHandlerClass"))
		{
			this.__dragHandlerClass = setting["dragHandlerClass"];
		}
		if(setting.hasOwnProperty("labelField"))
		{
			this.__labelField = setting["labelField"];
		}
		if(setting.hasOwnProperty("itemRenderer"))
		{
			this.__itemRenderer = setting["itemRenderer"];
			if (typeof this.__itemRenderer === "string" || this.__itemRenderer instanceof String)
			{
				if(this.util.isFunction(this.__itemRenderer))
				{
					this.__itemRenderer = window[this.__itemRenderer];
				}
			}
		}
		if(setting.hasOwnProperty("template"))
		{
			this.__templateID = setting["template"];
		}
		if(setting.hasOwnProperty("setData"))
		{
			this.__setData = setting["setData"];
		}
		if(setting.hasOwnProperty("labelFunction"))
		{
			this.__labelFunction = setting["labelFunction"];
			if (typeof this.__labelFunction === "string" || this.__labelFunction instanceof String)
			{
				if(this.util.isFunction(this.__labelFunction))
				{
					this.__labelFunction = window[this.__labelFunction];
				}
			}
		}
		if(setting.hasOwnProperty("enableMultipleSelection"))
		{
			this.__enableMultipleSelection =  Boolean.parse(setting["enableMultipleSelection"]);
		}
		if(setting.hasOwnProperty("customScrollerRequired"))
		{
			this.__customScrollerRequired =  Boolean.parse(setting["customScrollerRequired"]);
		}
		if(setting.hasOwnProperty("enableKeyboardNavigation"))
		{
			this.__enableKeyboardNavigation =  Boolean.parse(setting["enableKeyboardNavigation"]);
		}
		if(setting.hasOwnProperty("enableMouseHover"))
		{
			this.__enableMouseHover =  Boolean.parse(setting["enableMouseHover"]);
		}
		if(setting.hasOwnProperty("enableMouseHoverAnimation"))
		{
			this.__enableMouseHoverAnimation =  Boolean.parse(setting["enableMouseHoverAnimation"]);
		}
		if(setting.hasOwnProperty("disableHoverField"))
		{
			this.__disableHoverField = setting["disableHoverField"];
		}
		if(setting.hasOwnProperty("disableHoverFunction"))
		{
			this.__disableHoverFunction = setting["disableHoverFunction"];
			if (typeof this.__disableHoverFunction === "string" || this.__disableHoverFunction instanceof String)
			{
				if(this.util.isFunction(this.__disableHoverFunction))
				{
					this.__disableHoverFunction = window[this.__disableHoverFunction];
				}
			}
		}
		if(setting.hasOwnProperty("rowHeight"))
		{
			this.__rowHeight =  parseInt(setting["rowHeight"]);
		}
		if(setting.hasOwnProperty("noDataMessage"))
		{
			this.__noDataMessage = setting["noDataMessage"];
		}
		if(setting.hasOwnProperty("dataSource"))
		{
			this.__dataSource = setting["dataSource"];
		}
		if(setting.hasOwnProperty("childField"))
		{
			this.__childField = setting["childField"];
		}
	}
};

NSList.prototype.dataSource = function(source)
{
	this.__dataSource = source;
	if(this.__listContainer)
	{
		this.util.removeAllChildren(this.__listContainer);
	}
	else
	{
		this.__createStructure();
	}
	if(this.__dataSource && this.__dataSource.length > 0)
	{
		this.__objGrid.dataSource();
	}
	else
	{
		this.__arrWrapper = [];
		this.__arrInternalSource = [];
		this.__updateTotalRecords(0);
	}
	if(this.__enableVirtualScroll)
	{
		this.__updateItemsForVirtualMode();
	}
	this.__renderBody();
	if(!this.__scroller)
	{
		this.__scrollTarget = this.__divOuterContainer;
		if(this.__customScrollerRequired)
		{
			this.__divOuterContainer.style.overflow = "hidden";
			this.__scroller = new NSScroller(this.__parentContainer);
			this.__scrollTarget = this.__scroller.getChildContainer();
		}
	}
};

NSList.prototype.removeItems = function(arrObject)
{
	if(arrObject && arrObject.length > 0)
	{
		var arrIndex = [];
		if(this.util.isNumber(arrObject[0]))
		{
			arrIndex = arrObject;
		}
		else
		{
			for (var count = 0;count < arrObject.length;count++)
		    {
				var item = arrObject[count];
				if(item && item[this.__fieldIndex])
				{
					arrIndex.push(item[this.__fieldIndex]);
				}
		    }
		}
		arrIndex.sort();
   	 	for (var rowIndex = arrIndex.length - 1; rowIndex >= 0; rowIndex--)
	    {
   	 		var index = arrIndex[rowIndex];
   	 		if(index > 0 && index < this.__arrInternalSource.length)
   	 		{
	   	 		//if virtual scroll or Pagination of type Page is enabled then do not remove rows
	   	 		if(!this.__enableVirtualScroll)
	   	 		{
	   	 			this.__listContainer.removeChild(this.__listContainer.childNodes[index]);
	   	 		}
	   	 		this.__arrInternalSource.splice(index, 1);
	   	 		this.__arrWrapper.splice(index, 1);
   	 		}
	    }
	 	this.__updateTotalRecords();
	}
};

NSList.prototype.scrollToIndex = function(selectedIndex,animationRequired)
{
	selectedIndex = parseInt(selectedIndex);
	var source = this.__objGrid.__getFlatSource();
	if(selectedIndex > -1 && source && selectedIndex < source.length)
	{
		var item = this.__getItemByIndex(selectedIndex);
		if(item)
		{
			var targetDimension = -1;
			var scrollTarget = null;
			if(this.__enableVirtualScroll)
			{
				targetDimension = this.__virtualRowHeight * selectedIndex;
				scrollTarget = this.__divVirtualScrollParent;
			}
			else
			{
				if(item[this.__fieldItem])
				{
					targetDimension = (item[this.__fieldItem].offsetTop);
				}
				scrollTarget = this.__scrollTarget;
			}
			if(animationRequired)
			{
				var animation = new this.util.animation(scrollTarget,[
	       	  	    {
	       	  	      time: 1,
	       	  	      property:"scrollTop",
	       	  	      target: targetDimension,
	       	  	    }
	       	  	]);
	   	  	  	animation.animate();
			}
			else
			{
				scrollTarget.scrollTop = targetDimension;
			}
		}
	}
};

NSList.prototype.setSelectedItems = function(arrItems)
{
	if(arrItems && arrItems.length > 0)
	{
		var source = this.__objGrid.__getFlatSource();
		if(source)
		{
			this.__clearAllRowSelection(false);
			var length = arrItems.length;
			var item = null;
			var index = -1;
			for(var count = 0;count < length;count++)
			{
				item = arrItems[count];
				index = this.__getIndexByItem(item);
				if(index > -1 && source && index < source.length)
				{
					this.__setIndex(index,true);
				}
			}
		}
	}
};

NSList.prototype.setSelectedItem = function(arrItems)
{
	this.setSelectedItems([arrItems]);
};

NSList.prototype.setSelectedIndexes = function(arrSelectedIndex)
{
	if(arrSelectedIndex && arrSelectedIndex.length > 0)
	{
		var source = this.__objGrid.__getFlatSource();
		if(source)
		{
			var length = arrSelectedIndex.length;
			var index = -1;
			for(var count = 0;count < length;count++)
			{
				index = arrSelectedIndex[count];
				if(index > -1 && source && index < source.length)
				{
					this.__setIndex(index,true);
				}
			}
		}
	}
};

NSList.prototype.setSelectedIndex = function(selectedIndex)
{
	this.setSelectedIndexes([selectedIndex]);
};

NSList.prototype.getSelectedIndex = function()
{
	return this.__selectedIndex;
};

NSList.prototype.getSelectedItem = function()
{
	return this.__selectedItem;
};

NSList.prototype.getSelectedIndexes = function()
{
	return this.__selectedIndexes;
};

NSList.prototype.getSelectedItems = function()
{
	return this.__selectedItems;
};

NSList.prototype.deselectAll = function()
{
	this.__clearAllRowSelection(true);
};

NSList.prototype.filter = function(strData,setting,enableHighlighting,recordLimit)
{
	this.__nsListFilter.filter(strData,setting,enableHighlighting,recordLimit);
};

NSList.prototype.resetFilter = function()
{
	this.__nsListFilter.reset();
};

NSList.prototype.__highlightDiv = function(divText)
{
	this.__nsListFilter.__highlightDiv(divText);
};

NSList.prototype.__initializePluggins = function()
{
	if(!this.__objGrid)
	{
		if(this.__enableHierarchical)
		{
			this.__objGrid = new NSHierarchicalList(this);
		}
		else
		{
			this.__objGrid = new NSFlatList(this);
		}
	}
	if(!this.__nsListFilter)
	{
		this.__nsListFilter = new NSListFilter(this);
		if(this.__enableDragDrop)
		{
			this.__nsListDragDrop = new NSListDragDrop(this);
		}
	}
};

NSList.prototype.__createStructure = function()
{
	if(!this.__divOuterContainer)
	{
		this.__divOuterContainer = this.util.createDiv(this.getID() + "container","nsListOuterContainer");
		this.__divOuterContainer.style.width = this.util.getStyleValue(this.__baseComponent,"width");
		this.__divOuterContainer.style.height = this.util.getStyleValue(this.__baseComponent,"height");
		this.addChild(this.__divOuterContainer);
		this.__divParentContainer = this.util.createDiv(this.getID() + "parentContainer","nsListParentContainer");
		this.__divOuterContainer.appendChild(this.__divParentContainer);
		this.__listContainer = this.util.createElement("ul",this.getID() + "list","nsListContainer");
		this.__listContainer.style.minHeight = (this.__divOuterContainer.clientHeight - 10) + "px";
		this.__divParentContainer.appendChild(this.__listContainer);
		if(this.__enableVirtualScroll)
		{
			this.__divVirtualScrollParent = this.util.createDiv(this.getID()  + "scrollParent","nsListScrollerCauseParent");
			this.__divVirtualScroller = this.util.createDiv(this.getID()  + "scroll","nsListScrollerCause");
			this.__divVirtualScroller.innerHTML = "&nbsp;";
			this.__divVirtualScrollParent.appendChild(this.__divVirtualScroller);
			this.__divOuterContainer.appendChild(this.__divVirtualScrollParent);
			this.util.addStyleClass(this.__divParentContainer,"nsListBodyContainerVirtual");
			this.util.addEvent(this.__divVirtualScrollParent,"scroll",this.__bodyScrollVirtualHandler.bind(this));
			this.util.addEvent(this.__divParentContainer,"mousewheel",this.__bodyMousewheelVirtualHandler.bind(this));
		}
	}
};

NSList.prototype.__renderBody = function()
{
	this.__listContainer.scrollTop = 0;
	this.util.removeAllChildren(this.__listContainer);
	if(this.__enableVirtualScroll)
	{
		this.__setVirtualMesaurement();
		this.__createListVirtual(this.__rowCount);
	}
	else
	{
		this.__createList(this.__arrInternalSource,0,this.__arrInternalSource.length);
		//5 is offset for number of rows
		var listItem = this.__getListItemByIndex(0);
		if(listItem)
		{
			this.__listItemHeight = listItem.clientHeight;
		}
		this.__pageSize = (this.__divOuterContainer.clientHeight/this.__listItemHeight) - 5;
		this.__startArrayElement = 0;
	}
	this.__setBodyMeasurement();
	if(this.__nsListDragDrop)
	{
		this.__nsListDragDrop.initialize();
	}
};

NSList.prototype.__setVirtualMesaurement = function()
{
	this.__divOuterContainer.style.overflowY = "hidden";
	this.__divParentContainer.style.position = "relative";
	/*this.__listContainer.style.position = "absolute";
	this.__listContainer.style.top = "0px";
	this.__listContainer.style.left = "0px";*/
	this.__divParentContainer.scrollTop = 0;
	if(this.__divVirtualScrollParent)
	{
		this.__divVirtualScrollParent.scrollTop = 0;
	}
	this.__setVirtualVariables(true);
};

NSList.prototype.__setVirtualVariables = function(isReset)
{
	var divScroll = this.__divVirtualScroller;
	if(this.__arrInternalSource && this.__arrInternalSource.length > 0)
	{
		var totalRecords = 0;
		var scrollHeight = 0;
		var virtualRowHeight = 0;
		if(isReset)
		{
			var rect = this.__baseComponent.getBoundingClientRect();
			var availableHeight = rect.height;
			if(this.__rowHeight > 0)
			{
				this.__virtualRowHeight = this.__rowHeight;
			}
			else
			{
				this.__createList(this.__arrInternalSource,0,1);
				var item = this.__arrInternalSource[0];
				var listItem = item[this.__fieldItem];
			    this.__virtualRowHeight = listItem.offsetHeight;
			    listItem.parentNode.removeChild(listItem);
			}
			//Start of workaround for IE issue of limitation of scrollTop Value
			//In IE 11 it is 1533917px 
			//Logic is that this.__divCenterTableBodyContainer.scrollHeight gives max scrollTop Value hence if scrollHeight exceeds this.__divCenterTableBodyContainer.scrollHeight then reset scrollHeight value to this.__divCenterTableBodyContainer.scrollHeight
			//and recalculate rowHeight (this.__virtualRowHeight) value;
			scrollHeight = (this.__totalRecords * this.__virtualRowHeight);
			divScroll.style.maxHeight = scrollHeight + "px";
			divScroll.style.height = scrollHeight + "px";
			//if Custom scroll is there then te recalculation is not required
			if(this.__divVirtualScrollParent.scrollHeight < scrollHeight)
			{
				scrollHeight = this.__divVirtualScrollParent.scrollHeight;
				this.__virtualRowHeight = scrollHeight/this.__totalRecords;
			}
			//end of workaround for IE issue of limitation of scrollTop Value
			this.__rowCount = Math.round(availableHeight/this.__virtualRowHeight) * 2;
			divScroll.style.maxHeight = scrollHeight + "px";
			divScroll.style.height = scrollHeight + "px";
			this.__lastScrollPosition = 0;
			totalRecords = this.__totalRecords;
			virtualRowHeight = this.__virtualRowHeight;
		}
		else
		{
			var listItem = this.__listContainer.children[0];
			virtualRowHeight = listItem.offsetHeight;
			totalRecords = this.__totalRecords;
		}
		scrollHeight = (totalRecords * virtualRowHeight);
		//giving it a bit of padding
		scrollHeight = scrollHeight + 50;
		this.__scrollOffsetPosition = virtualRowHeight;
		divScroll.style.maxHeight = scrollHeight + "px";
		divScroll.style.height = scrollHeight + "px";
	}
	else
	{
		this.__virtualRowHeight = 0;
		this.__rowCount = 0;
		this.__scrollOffsetPosition = 0;
		this.__lastScrollPosition = 0;
		divScroll.style.height = 0 + "px";
	}
};

NSList.prototype.__updateItemsForVirtualMode = function()
{
	var source = this.__objGrid.__getFlatSource();
	if(source && source.length > 0)
	{
		var length = source.length;
		var item = null;
		for (var count = 0; count < length; count++) 
		{
			item = source[count];
			this.__updateItem(item,count);
		}
	}
};

NSList.prototype.__createListVirtual= function(totalRows)
{
	var source = this.__objGrid.__getFlatSource();
	if(source && source.length > 0)
	{
    	if(totalRows > source.length)
    	{
    		totalRows = source.length;
    	}
    	this.__createList(source,0,totalRows);
    }
	else
	{
		this.__createNoDataRow();
	}
};

NSList.prototype.__resetDataInBody = function(fromIndex,toIndex)
{
	this.__objGrid.__resetDataInBody(fromIndex,toIndex);
};

NSList.prototype.__bodyScrollVirtualHandler = function(event)
{
	var target = this.util.getTarget(event);
	var scrollPos = target.scrollTop;
	if(this.__customScrollerRequired)
	{
		//scrollPos = event.scrollTop;
	}
	//console.log(this.__lastScrollPosition + "," + scrollPos);
	if(this.__lastScrollPosition !== scrollPos)
	{
		var itemToBegin = Math.ceil(scrollPos/this.__virtualRowHeight);
    	var itemToLimit =  Math.ceil(itemToBegin + this.__rowCount);
        //console.log(itemToBegin + "," + itemToLimit);
		this.__resetDataInBody(itemToBegin,itemToLimit);
		this.__handleScrollEdgeScenarios();
	}
	this.__lastScrollPosition = scrollPos;
};

NSList.prototype.__bodyMousewheelVirtualHandler = function(event)
{
	event = this.util.getEvent(event);
	this.util.preventDefault(event);
	var target = this.__divVirtualScrollParent;
	var delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));
    var scrollHeight = 3 * parseInt(this.__virtualRowHeight);
    var currentScrollPos = target.scrollTop;
    var contentHeight = this.__divVirtualScroller.clientHeight;
    //scroll-up
    if(delta === 1)
    {
        if((currentScrollPos - scrollHeight) < 0)
        {
        	target.scrollTop = 0;
        }
        else
        {
        	target.scrollTop = currentScrollPos - scrollHeight;
        }
   }
   else
   {
        if((currentScrollPos + scrollHeight) > contentHeight)
        {
        	target.scrollTop = contentHeight;
        }
        else
        {
        	target.scrollTop = currentScrollPos + scrollHeight;
        }
   }
};

NSList.prototype.__handleScrollEdgeScenarios = function()
{
	var target = this.__divVirtualScrollParent;
	if(target.scrollHeight - target.scrollTop === target.clientHeight)
	{
		this.__divParentContainer.scrollTop = this.__divParentContainer.scrollHeight;
	}
	if(target.scrollTop === 0)
	{
		this.__divParentContainer.scrollTop = 0;
	}
};

NSList.prototype.__virtualRowSelection = function()
{
	if(this.__listContainer.children && this.__listContainer.children.length > 0 && this.__arrInternalSource)
	{
		var listItem = null;
		var index = null;
		var item = null;
		for(var count = 0; count < this.__listContainer.children.length; count++) 
		{
			listItem = this.__listContainer.children[count];
			index = this.__getIndexFromTarget(listItem);
			item = this.__arrInternalSource[index];
			if(item && this.__isMouseHoverAllowed(index))
			{
				if(item[this.__fieldSelected])
				{
					//DONOT REPLACE WITH __markRowSelected
					this.util.addStyleClass(listItem,"nsListItemSelected"); 
				}
				else
				{
					//DONOT REPLACE WITH __markRowUnselected
					this.util.removeStyleClass(listItem,"nsListItemSelected");
				}
			}
		}
	}
};

NSList.prototype.__createNoDataRow = function()
{
	var listItem = this.util.createElement("li",null,"nsNoRecordsFound");
	listItem.setAttribute("nsNoData","true");
	var textNode = document.createTextNode(this.__noDataMessage);
	listItem.appendChild(textNode);
	this.__listContainer.appendChild(listItem);
};

NSList.prototype.__setBodyMeasurement = function()
{
	//this.__divParentContainer.style.height = this.__divOuterContainer.clientHeight + "px";
	if(this.__divVirtualScrollParent)
	{
		var viewPortHeight = this.__divParentContainer.clientHeight;
		this.__divVirtualScrollParent.style.maxHeight = viewPortHeight + "px";
	}
};


NSList.prototype.__addListenerForBody = function()
{
	this.__keyDownRef = this.__keyDownHandler.bind(this);
	this.__keyUpRef = this.__keyUpHandler.bind(this);
	this.util.addEvent(document.body,"keydown",this.__keyDownRef);
	this.util.addEvent(document.body,"keyup",this.__keyUpRef);
};

NSList.prototype.__createList = function(dataSet,startIndex,endIndex)
{
	if(dataSet && dataSet.length > 0)
    {
		this.__objGrid.__createList(dataSet,startIndex,endIndex);
    }
	else
	{
		this.__createNoDataRow();
	}
};

NSList.prototype.__createListAt = function(item,index)
{
	if(item && index > -1)
    {
		this.__updateItem(item,index,true);
		var listItem = this.__createListItem(item,false);
		this.__listContainer.insertBefore(listItem, this.__listContainer.childNodes[index]);
    }
};

NSList.prototype.__updateItem = function(item,index,isReset)
{
	if(item)
	{
		item[this.__fieldIndex] = index;
		if(isReset || !item.hasOwnProperty(this.__fieldDisableHover))
		{
			item[this.__fieldDisableHover] = this.__isHoverDisabled(item);
		}
		if(isReset || !item.hasOwnProperty(this.__fieldSelected))
		{
			item[this.__fieldSelected] = false;
		}
	}
};

NSList.prototype.__createListItem = function(item,isAdd)
{
	if(item)
	{
		 if(this.util.isUndefined(isAdd) || isAdd === null)
		 {
			 isAdd = true;
		 }
		 var listItem = this.util.createElement("li",null,"nsListItem");
		 this.__objGrid.__createListItem(listItem,item);
		 if(this.__enableMouseHover)
		 {
			 this.util.addEvent(listItem,"mouseover",this.__itemMouseOverHandler.bind(this));
			 this.util.addEvent(listItem,"mouseout",this.__itemMouseOutHandler.bind(this));
			 if(this.__enableMouseHoverAnimation)
			 {
				 this.util.addStyleClass(listItem,"nsListItemAnimated");
			 }
			 else
			 {
				 this.util.addStyleClass(listItem,"nsListItemNormal");
			 }
		 }
		 this.util.addEvent(listItem,"click",this.__itemClickHandler.bind(this));
		 this.__setListItemProperties(listItem,item);
		 if(isAdd)
		 {
			 this.__listContainer.appendChild(listItem);
		 }
		 return listItem;
	}
	return null;
};

NSList.prototype.__setListItemProperties = function(listItem,item)
{
	this.__objGrid.__setListItemProperties(listItem,item);
};

NSList.prototype.__addCellText = function(listItem,item,div)
{
	if(listItem && item && div)
	{
		if(this.__itemRenderer)
		{
			var objRenderer = this.__itemRenderer(item,this.__labelField,item[this.__fieldIndex],item[this.__fieldDisableHover],listItem);
			if(objRenderer)
			{
				if(this.util.isString(objRenderer))
				{
					var compBodySpan = document.createElement("span");
					compBodySpan.innerHTML = objRenderer;
					div.appendChild(compBodySpan);
				}
				else
				{
					div.appendChild(objRenderer);
				}
			}
		}
		else if(this.__template)
		{
			div.appendChild(this.__template.cloneNode(true));
			this.__setDataInTemplateRenderer(div,item,listItem);
		}
		else if(this.__labelFunction)
		{
			var text = this.__labelFunction(item,this.__labelField);
			div.appendChild(document.createTextNode(text));
		}
		else if(item.hasOwnProperty(this.__labelField) && !this.util.isUndefined(item[this.__labelField]) && item[this.__labelField] != null)
	    {
			var text = item[this.__labelField];
			div.appendChild(document.createTextNode(text));
	    }
		this.__highlightDiv(div);
	}
};

NSList.prototype.__setDataInTemplateRenderer = function(cellItem,data,listItem)
{
	if(cellItem && this.__setData)
	{
		this.__setRendererProperties(cellItem);
		this.__setRendererInData(cellItem,data,listItem);
		//IE bug
		cellItem.data = data;
		if(this.util.isFunction(this.__setData))
	    {
			var strParam = "(cellItem,data,dataField,isDisabled,listItem)"; 
	    	if(this.util.isString(this.__setData))
	    	{
	    		var base = this;
	    		this.util.callFunctionFromString(this.__setData + strParam,function(paramValue){
					if(paramValue === "cellItem")
					{
						return cellItem;
					}
					if(paramValue === "data")
					{
						return data;
					}
					if(paramValue === "dataField")
					{
						return base.__labelField;
					}
					if(paramValue === "isDisabled")
					{
						return data[base.__fieldDisableHover];
					}
					if(paramValue === "listItem")
					{
						return listItem;
					}
					return paramValue;
				});
	    	}
	    	else
	    	{
	    		this.__setData(cellItem,data,this.__labelField,data[this.__fieldDisableHover],listItem);
	    	}
	    }
	}
};

NSList.prototype.__setRendererInData = function(cellItem,data,listItem)
{
	if(cellItem)
	{
		var compChild = null;
		for(var count = 0; count < cellItem.children.length; count++) 
		{
			compChild = cellItem.children[count];
			if(compChild)
			{
				compChild.data = data;
				compChild.listItem = listItem;
			}
			//IE 9 Bug,you got to assign it back
			//listItem.children[count] = compChild;
			this.__setRendererInData(compChild,data,listItem);
		}
	}
};

NSList.prototype.__setRendererProperties = function(cellItem)
{
	if(cellItem)
	{
		var compChild = null;
		for(var count = 0; count < cellItem.children.length; count++) 
		{
			compChild = cellItem.children[count];
			var grid = this;
			Array.prototype.slice.call(compChild.attributes).forEach(function(attribute) 
			{
		        if(grid.util.isFunction(attribute.value))
		        {
		        	var newValue = attribute.value + "(this)";
		        	compChild.removeAttribute(attribute.name);
					compChild.setAttribute(attribute.name,newValue);
		        }
			});
			if(compChild)
			{
				if(compChild.hasAttribute("accessor-name"))
				{
					cellItem[compChild.getAttribute("accessor-name")] = compChild;
				}
			}
			this.__setRendererProperties(compChild);
		}
	}
};

NSList.prototype.__setTemplate = function()
{
	if(this.__templateID)
	{
		this.__template = this.util.getTemplate(this.__templateID);
	}
};

NSList.prototype.__isHoverDisabled = function(item)
{
	if(this.__disableHoverField)
	{
		return Boolean.parse(item[this.__disableHoverField]);
	}
	if(this.__disableHoverFunction)
	{
		return Boolean.parse(this.__disableHoverFunction(item,this.__fieldIndex));
	}
	return false;
};

NSList.prototype.__itemClickHandler = function(event)
{
	event = this.util.getEvent(event);
    var target = this.util.getTarget(event);
    target = this.util.findParent(target,"li");
    var index = this.__getIndexFromTarget(target);
    this.__setIndex(index,false);
    this.__lastNavigationDirection = null;
};

NSList.prototype.__setIndex = function(index,isMultiSelect)
{
	if(index > -1)
	{
		isMultiSelect = Boolean.parse(isMultiSelect);
		if (this.__isShiftPressed && this.__enableMultipleSelection)
	    {
	    	this.__multiSectionHandler(index);
	    }
	    else if(isMultiSelect || (this.__isCtrlPressed && this.__enableMultipleSelection))
	    {
	    	if(this.__isRowSelected(index))
	    	{
	    		this.__markRowUnselected(index);
	    	}
	    	else
	    	{
	    		this.__markRowSelected(index);
	    	}
	    }
	    else
	    {
	    	this.__clearAllRowSelection(false);
	    	this.__markRowSelected(index);
	    } 
	}
};

NSList.prototype.__itemMouseOverHandler = function(event)
{
	 var target = this.util.getTarget(event);
     target = this.util.findParent(target,"li");
     var index = this.__getIndexFromTarget(target);
     var item = this.__getItemByIndex(index);
     if(target && index > -1 && this.__isMouseHoverAllowed(index))
     {
    	 this.util.addStyleClass(target,"nsListItemHover");
    	 this.__navigationIndex = index;
    	 this.util.dispatchEvent(this.__baseComponent,this.ITEM_NAVIGATED,item,{index:this.__navigationIndex});
     }
};

NSList.prototype.__itemMouseOutHandler = function(event)
{
	 var target = this.util.getTarget(event);
     target = this.util.findParent(target,"li");
     if(target)
     {
    	 this.util.removeStyleClass(target,"nsListItemHover");
     }
};

NSList.prototype.__keyDownHandler = function(event)
{
	event = this.util.getEvent(event);
	this.__isShiftPressed = event.shiftKey;
	this.__isCtrlPressed = event.ctrlKey;
	var isShiftCtrlPressed = this.__isShiftPressed || this.__isCtrlPressed;
	var keyCode = this.util.getKeyUnicode(event);
	
	if(this.__enableKeyboardNavigation)
	{
		//key Up
		if(keyCode === this.util.KEYCODE.UP && isShiftCtrlPressed && this.__enableMultipleSelection)
		{
			if(this.__lastNavigationDirection && this.__lastNavigationDirection === this.NAVIGATION_DOWN)
			{
				return this.__keyBoardSelectionHandler(event,this.NAVIGATION_UP);
			}
			if(this.__selectedIndex != 0)
			{
				this.__selectedIndex--;
				this.__navigationIndex--;
				while(!this.__isMouseHoverAllowed(this.__selectedIndex))
				{
					this.__selectedIndex--;
					this.__navigationIndex--;
				}
				return this.__keyBoardSelectionHandler(event,this.NAVIGATION_UP);
			}
		}
		//key down
		else if(keyCode === this.util.KEYCODE.DOWN && isShiftCtrlPressed && this.__enableMultipleSelection)
		{
			if(this.__lastNavigationDirection && this.__lastNavigationDirection === this.NAVIGATION_UP)
			{
				return this.__keyBoardSelectionHandler(event,this.NAVIGATION_DOWN);
			}
			if(this.__arrWrapper && this.__selectedIndex != this.__arrWrapper.length - 1)
			{
				this.__selectedIndex++;
				this.__navigationIndex++;
				while(!this.__isMouseHoverAllowed(this.__selectedIndex))
				{
					this.__selectedIndex++;
					this.__navigationIndex++;
				}
				return this.__keyBoardSelectionHandler(event,this.NAVIGATION_DOWN);
			}
		}
		else if(keyCode === this.util.KEYCODE.UP)
		{
			if(this.__arrWrapper && this.__navigationIndex === -1)
			{
				this.__navigationIndex = this.__arrWrapper.length - 1;
			}
			if(this.__navigationIndex > 0)
			{
				return this.__keyBoardNavigationHandler(event,this.NAVIGATION_UP);
			}
		}
		else if(keyCode === this.util.KEYCODE.DOWN)
		{
			/*if(this.__navigationIndex === -1)
			{
				this.__navigationIndex = 0;
			}*/
			if(this.__arrWrapper && this.__navigationIndex < this.__arrWrapper.length - 1)
			{
				return this.__keyBoardNavigationHandler(event,this.NAVIGATION_DOWN);
			}
		}
		else if(keyCode === this.util.KEYCODE.ENTER)
		{
			this.__clearAllRowSelection(false);
			this.__markRowSelected(this.__navigationIndex);
		}
	}
	if(keyCode === this.util.KEYCODE.SHIFT)
	{
		this.util.makeBodyUnselectable();
	}
};

NSList.prototype.__keyUpHandler = function(event)
{
	if(this.util.getKeyUnicode(event) === this.util.KEYCODE.CTRL)
	{
		this.__isCtrlPressed = false;
	}
	if(this.util.getKeyUnicode(event) === this.util.KEYCODE.SHIFT)
	{
		this.__isShiftPressed = false;
		this.util.makeBodySelectable();
	}
};

NSList.prototype.__keyBoardNavigationHandler = function(event,direction)
{
	var listItem = this.__getListItemByIndex(this.__navigationIndex - this.__startArrayElement);
	this.util.removeStyleClass(listItem,"nsListItemHover");
	(direction === this.NAVIGATION_UP) ? this.__navigationIndex--:this.__navigationIndex++;
	while(!this.__isMouseHoverAllowed(this.__navigationIndex))
	{
		(direction === this.NAVIGATION_UP) ? this.__navigationIndex--:this.__navigationIndex++;
	}
	listItem = this.__getListItemByIndex(this.__navigationIndex - this.__startArrayElement);
	this.util.addStyleClass(listItem,"nsListItemHover");
	if(direction === this.NAVIGATION_DOWN)
	{
		if(this.__enableVirtualScroll)
		{
			this.scrollToIndex(this.__navigationIndex,false);
		}
		else if(Math.floor(this.__navigationIndex % this.__pageSize) === 0)
		{
			var rowOffset = this.util.getPosition(listItem);
			this.__scrollTarget.scrollTop = rowOffset.top;
		}
	}
	else if(direction === this.NAVIGATION_UP)
	{
		if(this.__enableVirtualScroll)
		{
			this.scrollToIndex(this.__navigationIndex,false);
		}
		else
		{
			var rowOffset = this.util.getPosition(listItem);
			this.__scrollTarget.scrollTop = rowOffset.top;
		}
	}
	this.util.dispatchEvent(this.__baseComponent,this.ITEM_NAVIGATED,this.__arrWrapper[this.__navigationIndex].data,{index:this.__navigationIndex});
	this.__lastNavigationDirection = null;
	event.preventDefault();
	return false;
};

NSList.prototype.__keyBoardSelectionHandler = function(event,direction)
{
	if(this.__isRowSelected(this.__selectedIndex))
	{
		this.__markRowUnselected(this.__selectedIndex);
	}
	else
	{
		this.__markRowSelected(this.__selectedIndex);
	}
	if(direction === this.NAVIGATION_DOWN)
	{
		if(this.__enableVirtualScroll)
		{
			this.scrollToIndex(this.__selectedIndex,false);
		}
		else if(Math.floor(this.__selectedIndex % this.__pageSize) === 0)
		{
			var listItem = this.__getListItemByIndex(this.__selectedIndex);
			var rowOffset = this.util.getPosition(listItem);
			this.__scrollTarget.scrollTop = rowOffset.top;
		}
	}
	else if(direction === this.NAVIGATION_UP)
	{
		if(this.__enableVirtualScroll)
		{
			this.scrollToIndex(this.__selectedIndex,false);
		}
		else
		{
			var listItem = this.__getListItemByIndex(this.__selectedIndex);
			var rowOffset = this.util.getPosition(listItem);
			this.__scrollTarget.scrollTop = rowOffset.top;
		}
	}
	this.__lastNavigationDirection = direction;
	event.preventDefault();
	return false;
};

NSList.prototype.__isMouseHoverAllowed = function(index)
{
	var item = this.__getItemByIndex(index);
	if(item)
	{
		return !item[this.__fieldDisableHover];
	}
	return true;
};

NSList.prototype.__markRowSelected= function(index)
{
	if(index > -1)
    {
        if(!this.__isRowSelected(index))
        {
        	this.__setMultiSelectedVars(index,true);
            this.__setValuesForSelectedRow(index);
        	if(this.__enableVirtualScroll)
        	{
        		this.__virtualRowSelection();
        	}
        	else
        	{
        		var listItem = this.__getListItemByIndex(index);
            	this.util.addStyleClass(listItem,"nsListItemSelected"); 
        	}
        }
    }
};

NSList.prototype.__markRowUnselected = function(index)
{
    if(this.__isRowSelected(index) && this.__isMouseHoverAllowed(index))
    {
    	var isUnselected = this.__setMultiSelectedVars(index,false);
        if(isUnselected)
        {
        	this.__setValuesForUnselectedRow(index);
        }
        if(this.__enableVirtualScroll)
    	{
    		this.__virtualRowSelection();
    	}
    	else
    	{
    		var listItem = this.__getListItemByIndex(index);
    		this.util.removeStyleClass(listItem,"nsListItemSelected");
    	}
    }
};

NSList.prototype.__setValuesForSelectedRow = function(index)
{
	if(index > -1 && this.__isMouseHoverAllowed(index))
	{
		var item = this.__getItemByIndex(index);
		if(item)
		{
			item[this.__fieldSelected] = true;
		    this.__selectedIndex = index;
		    this.__navigationIndex = index;
		    this.util.dispatchEvent(this.__baseComponent,this.ITEM_SELECTED,item,{index:index});
		}
	}
};

NSList.prototype.__setValuesForUnselectedRow = function(index)
{
	if(index > -1 && this.__isMouseHoverAllowed(index))
	{
		var item = this.__getItemByIndex(index);
		if(item)
		{
			item[this.__fieldSelected] = false;
	    	this.util.dispatchEvent(this.__baseComponent,this.ITEM_UNSELECTED,item,{index:index});
		}
	}
};

NSList.prototype.__clearAllRowSelection = function(setIndexVariables)
{
	var size = this.__selectedIndexes.length;
    for (var count = size - 1; count >= 0 ; count--)
    {
    	var index = this.__selectedIndexes[count];
        this.__markRowUnselected(index);
    }
    this.__setMultiSelectedVars(-1,true);
    if(setIndexVariables)
    {
    	this.__selectedIndex = -1;
        this.__navigationIndex = -1;
    }
};

NSList.prototype.__multiSectionHandler = function(lastIndex)
{
	 if(lastIndex < 0)
	 {
		 return;
	 }
	 if (this.__selectedIndexes.length === 0)
	 {
		 this.__isRowSelected(lastIndex);
	     return;
	 }
	 var firstIndex = this.__selectedIndexes[this.__selectedIndexes.length - 1];
	 if(lastIndex === firstIndex)
	 {
		 this.__markRowUnselected(lastIndex);
		 return;
	 }
	 var isDown = lastIndex > firstIndex;
	 var isSelection = !this.__isRowSelected(lastIndex);
	 var counter = firstIndex;
	 do
	 {
		  counter = isDown ? (counter + 1) : (counter - 1);
		  if (isSelection)
		  {
			  this.__markRowSelected(counter);
		  }
		  else
		  {
			  this.__markRowUnselected(counter);
		  }
	 }
	 while(counter != lastIndex);	 
};

NSList.prototype.__setMultiSelectedVars = function(index,add)
{
	if(index === -1)
	{
		this.__selectedItems = [];	
		this.__selectedIndexes = [];	
	}
	else if(add)
	{
		var data = this.__getItemByIndex(index);
		this.__selectedItems.push(data);
		this.__selectedIndexes.push(index);
	}
	else
	{
		var isUnselected = false;
		for (var count= 0; count < this.__selectedIndexes.length ; count++)
        {
            if (this.__selectedIndexes[count] === index)
            {
                this.__selectedItems.splice(count,1);
                this.__selectedIndexes.splice(count,1);
                isUnselected = true;
                break;
            }
        }
		return isUnselected;
	}
	
	return true;
};

NSList.prototype.__isRowSelected= function(index)
{
    if(index > -1)
    {
    	var item = this.__getItemByIndex(index);
    	if(item)
    	{
    		return item[this.__fieldSelected];
    	}
    }   
    return false;
};

NSList.prototype.__getIndexFromTarget = function(target)
{
	if(target)
	{
		return parseInt(target.getAttribute("ns-index"));
	}
	return -1;
};

NSList.prototype.__getListItemByIndex = function(index)
{
	if(index > -1)
    {
    	var item = this.__getItemByIndex(index);
    	if(item)
    	{
    		return item[this.__fieldItem];
    	}
    }   
	return null;
};

NSList.prototype.__getItemByIndex = function(indexToFind,source)
{
	if(!source)
	{
		source = this.__objGrid.__getFlatSource();
	}
	if(source && source.length > 0)
	{
		for(var count = 0;count < source.length;count++)
		{
			var item = source[count];
			if(item && item[this.__fieldIndex] === indexToFind)
			{
				return item;
			}
		}
	}
	return null;
};

NSList.prototype.__getIndexByItem = function(itemToFind,source)
{
	if(!source)
	{
		source = this.__objGrid.__getFlatSource();
	}
	if(itemToFind && source && source.length > 0)
	{
		for(var count = 0;count < source.length;count++)
		{
			var item = source[count];
			if(item && item[this.__fieldIndex] === itemToFind[this.__fieldIndex])
			{
				return item[this.__fieldIndex];
			}
		}
	}
	return -1;
};

NSList.prototype.__addItem = function(arrItem,atIndex)
{
	var flatSource = this.__objGrid.__getFlatSource();
	if(this.util.isUndefined(atIndex) || atIndex === null)
	{
		atIndex = flatSource.length;
	}
	if(arrItem && arrItem.length > 0)
	{
		if(this.__listContainer && this.__listContainer.children && this.__listContainer.children.length > 0 && this.__listContainer.children.length < 3)
		{
			var listItem = null;
			for(var count = 0;count < this.__listContainer.children.length;count++)
			{
				var listItem = this.__listContainer.children[count];
				if(listItem.hasAttribute("nsNoData"))
				{
					this.__listContainer.removeChild(listItem);
					break;
				}
			}
		}
		if(!this.__addRemoveRowCallInternal)
   	 	{
			this.__objGrid.__setWrapperSource(arrItem,atIndex);
   	 	};
		var item = null;
		var length = arrItem.length;
		var index = -1;
		for(var count = 0;count < length;count++)
		{
			item = arrItem[count];
			index = atIndex + count;
			if(item)
			{
				this.__dataSource.splice(index, 0, item);
				this.__arrWrapper.splice(index, 0, item);
				this.__arrInternalSource.splice(index, 0, item);
			}
		}
		/*flatSource = this.__objGrid.__getFlatSource();
		this.__updateSourceIndex(flatSource);*/
		for(var count = 0;count < length;count++)
		{
			item = arrItem[count];
			if(this.__enableVirtualScroll)
			{
				
			}
			else
			{
				this.__createListAt(item,item[this.__fieldIndex]);
			}
		}
	}
};

NSList.prototype.__moveItem = function(arrItem,toIndex)
{
	if(arrItem && arrItem.length > 0 && !this.util.isUndefined(toIndex) && toIndex !== null)
	{
		var item = null;
		var length = arrItem.length;
		var index = -1;
		var fromIndex = -1;
		var listContainer = this.__listContainer;
		var listItem = null;
		for(var count = length - 1;count >= 0;count--)
		{
			item = arrItem[count];
			index = toIndex + count;
			if(item)
			{
				fromIndex = item[this.__fieldIndex];
				this.util.moveArrayItem(this.__dataSource,fromIndex,index);
				this.util.moveArrayItem(this.__arrWrapper,fromIndex,index);
				this.util.moveArrayItem(this.__arrInternalSource,fromIndex,index);
				if(this.__enableVirtualScroll)
				{
					
				}
				else
				{
					// donot use item[this.__fieldItem] for getting listItem as after de-serialization the reference get lost 
					// hence getting the item back from dataSource
					item = this.__getItemByIndex(fromIndex);
					listItem = item[this.__fieldItem];
					listContainer.removeChild(listItem);
					index = (index === 0) ? index : (index - 1);
					listContainer.insertBefore(listItem, listContainer.children[index]);
				}
			}
		}
	}
};

NSList.prototype.__updateSourceIndex = function(source)
{
	var item = null;
	var listItem = null;
	var length = source.length;
	for(var count = 0;count < length;count++)
	{
		item = source[count];
		item[this.__fieldIndex] = count;
		listItem = item[this.__fieldItem];
		if(listItem && this.util.isElementOfType(listItem,"li"))
		{
			listItem.setAttribute("ns-index",count);
		}
	}
};

NSList.prototype.__createArrow = function(item,parentRowCount,parentElement,isCollapsed)
{
	 if(parentElement)
	 {
		 var cellArrowParent = this.util.createDiv(null);
		 var arrowID = this.getID() + "compArrow" + parentRowCount;
		 var compArrow = this.util.createDiv(arrowID,"nsArrow");
		 compArrow.style.paddingTop = "3px";
		 compArrow.setAttribute("ns-parent-row-count",parentRowCount);
		 
		 var objSVG = new NSSvg();
		 this.__objGrid.__createArrow(compArrow,objSVG,arrowID,isCollapsed);
		 this.util.addEvent(compArrow,"click",this.__arrowClickHandler.bind(this));
		 cellArrowParent.appendChild(compArrow);
		 parentElement.appendChild(cellArrowParent);
		 item[this.__fieldItemArrow] = compArrow;
		 return compArrow;
	 }
	 return null;
};

NSList.prototype.__setArrowDirection = function(compArrow,isCollapsed)
{
	if(compArrow)
	{
		var objSVG = new NSSvg();
		var useID = compArrow.getAttribute("id") + "use";
		this.__objGrid.__setArrowDirection(objSVG,useID,isCollapsed);
	}
};

NSList.prototype.__isArrowCollapsed = function(compArrow)
{
	if(compArrow && compArrow.hasAttribute("ns-parent-row-count"))
	{
		var rowIndex = parseInt(compArrow.getAttribute("ns-parent-row-count"));
		var item = this.__getItemByIndex(rowIndex);
		if(item)
		{
			return item[this.__fieldIsCollapsed];
		}
	}
	return false;
};

NSList.prototype.__arrowClickHandler = function(event)
{
	event = this.util.getEvent(event);
	var target = this.util.getTarget(event);
	target = this.util.findParent(target,"DIV");
	if(target && target.hasAttribute("ns-parent-row-count"))
	{
		var rowIndex = target.getAttribute("ns-parent-row-count");
		var isCollapse = this.__isArrowCollapsed(target);
		this.__showHideRow(parseInt(rowIndex),target,!isCollapse);
	}
	event.stopImmediatePropagation();
};

NSList.prototype.__expandCollapseAll = function(isCollapse)
{
	if(!this.__enableVirtualScroll && this.__getTotalListItems() < this.__totalRecords)
	{
		this.util.warning("nsList","Please let all the items to render.");
		return;
	}
	var dataSource = this.__arrInternalSource;
	if(dataSource && dataSource.length > 0)
	{
		if(this.__enableVirtualScroll)
		{
			this.__expandCollapseAllVirtual(dataSource,isCollapse);
		}
		else
		{
			this.__expandCollapseAllNormal(dataSource,isCollapse);
		}
	}
};

NSList.prototype.__expandCollapseAllNormal = function(dataSource,isCollapse)
{
	for(var count = 0;count < dataSource.length;count++)
	{
		var item = dataSource[count];
		//setting __fieldIsCollapsed here assuming that __showHideAllArrows() will be called after this function
		item[this.__fieldIsCollapsed] = isCollapse;
		if(parseInt(item[this.__fieldItemLevel]) > 0)
		{
			var row = item[this.__fieldItem];
			if(isCollapse)
			{
				row.style.display = "none";
				item[this.__fieldItemVisible] = false;
			}
			else
			{
				row.style.display = "";
				item[this.__fieldItemVisible] = true;
			}
		}
	}
	this.__showHideAllArrows(isCollapse);
};

NSList.prototype.__expandCollapseAllVirtual = function(dataSource,isCollapse)
{
	for(var count = 0;count < dataSource.length;count++)
	{
		var item = dataSource[count];
		//setting __fieldIsCollapsed here assuming that __showHideAllArrows() will be called after this function
		item[this.__fieldIsCollapsed] = isCollapse;
		if(parseInt(item[this.__fieldItemLevel]) > 0)
		{
			if(isCollapse)
			{
				item[this.__fieldItemVisible] = false;
			}
			else
			{
				item[this.__fieldItemVisible] = true;
			}
		}
	}
	this.__showHideAllArrows(isCollapse);
	this.__objGrid.__resetDataInBody(0,dataSource.length);
	this.__setVirtualVariables(false);
};

NSList.prototype.__showHideRow = function(rowIndex,compArrow,isCollapse)
{
	if(rowIndex > -1)
	{
		var item = this.__getItemByIndex(rowIndex);
		if(!compArrow)
		{
			compArrow = this.__getArrow(item[this.__fieldIndex]);
		}
		var rowLevel = parseInt(item[this.__fieldItemLevel]);
		var arrChildItems = [];
		if(item && item[this.__fieldHasChild])
		{
			var startIndex = 0;
			if(isCollapse)
			{
				arrChildItems = this.__arrInternalSource;
				startIndex = rowIndex;
			}
			else
			{
				arrChildItems = this.__getImmediateChildItems(arrChildItems, item);
			}
			if(this.__enableVirtualScroll)
			{
				this.__showHideRowVirtual(item,arrChildItems,startIndex,rowLevel,isCollapse);
			}
			else
			{
				this.__showHideRowNormal(item,arrChildItems,startIndex,rowLevel,isCollapse);
			}
			this.__setArrowDirection(compArrow,isCollapse);
			item[this.__fieldIsCollapsed] = isCollapse;
		}
	}
};

NSList.prototype.__showHideRowNormal = function(item,arrChildItems,startIndex,rowLevel,isCollapse)
{
	if(arrChildItems && arrChildItems.length > 0)
	{
		for(var count = startIndex;count < arrChildItems.length;count++)
		{
			var rowItem = arrChildItems[count];
			var row = rowItem[this.__fieldItem];
			if(isCollapse)
			{
				if(rowLevel >= parseInt(rowItem[this.__fieldItemLevel]))
				{
					break;
				}
				row.style.display = "none";
				rowItem[this.__fieldItemVisible] = false;
				if(rowItem[this.__fieldHasChild])
				{
					rowItem[this.__fieldIsCollapsed] = true;
					if(rowItem[this.__fieldItemArrow])
					{
						var divArrow = rowItem[this.__fieldItemArrow];
						if(divArrow)
						{
							this.__setArrowDirection(divArrow,true);
						}
					}
				}
			}
			else
			{
				row.style.display = "";
				rowItem[this.__fieldItemVisible] = true;
			}
		}
	}
};

NSList.prototype.__showHideRowVirtual = function(item,arrChildItems,startIndex,rowLevel,isCollapse)
{
	if(arrChildItems && arrChildItems.length > 0)
	{
		for(var count = startIndex;count < arrChildItems.length;count++)
		{
			var rowItem = arrChildItems[count];
			if(isCollapse)
			{
				if(rowLevel >= parseInt(rowItem[this.__fieldItemLevel]))
				{
					break;
				}
				rowItem[this.__fieldItemVisible] = false;
				if(rowItem[this.__fieldHasChild])
				{
					rowItem[this.__fieldIsCollapsed] = true;
				}
			}
			else
			{
				rowItem[this.__fieldItemVisible] = true;
			}
		}
		var arrRows = this.__listContainer.rows;
		var rowLength = arrRows.length;
		var row = item[this.__fieldItem];
		var index = item[this.__fieldIndex];
		//to get actual rowIndex use row.rowIndex
		this.__objGrid.__resetDataInBody(index,index + rowLength,row.rowIndex);
		this.__setVirtualVariables(false,true,isCollapse,true);
	}
};

NSList.prototype.__showHideAllArrows = function(isCollapse)
{
	var arrDivs = this.__getAllArrows();
	if(arrDivs && arrDivs.length > 0)
	{
		for(var count = 0;count < arrDivs.length;count++)
		{
			var div = arrDivs[count];
			if(div && div.hasAttribute("ns-parent-row-count"))
			{
				this.__setArrowDirection(div,isCollapse);
			}
		}
	}
};

NSList.prototype.__getAllItems = function()
{
	return this.__objGrid.__getFlatSource();
};

NSList.prototype.__getImmediateChildItems = function(arrItems,item)
{
	if(!arrItems)
	{
		arrItems = [];
	}
	if(item && item[this.__fieldHasChild])
	{
		var arrChild = this.__arrInternalSource;
		var rowLevel = parseInt(item[this.__fieldItemLevel]);
		var startIndex = item[this.__fieldIndex];
		var length = arrChild.length;
		for(var count = startIndex;count < length;count++)
		{
			var itemChild = arrChild[count];
			var childRowLevel = parseInt(itemChild[this.__fieldItemLevel]);
			if(rowLevel >= childRowLevel)
			{
				break;
			}
			if((rowLevel + 1) === childRowLevel)
			{
				arrItems.push(itemChild);
			}
		}
	}
	return arrItems;
};

NSList.prototype.__getAllChildItems = function(arrItems,item)
{
	if(!arrItems)
	{
		arrItems = [];
	}
	if(item && item[this.__fieldHasChild])
	{
		var arrChild = this.__arrInternalSource;
		var rowLevel = parseInt(item[this.__fieldItemLevel]);
		var startIndex = item[this.__fieldIndex];
		var length = arrChild.length;
		for(var count = startIndex;count < length;count++)
		{
			var itemChild = arrChild[count];
			if(rowLevel >= parseInt(itemChild[this.__fieldItemLevel]))
			{
				break;
			}
			arrItems.push(itemChild);
		}
	}
	return arrItems;
};

NSList.prototype.__getAllVisibleItems = function()
{
	var totalRecords = 0;
	var arrItems = this.__getAllItems();
	if(arrItems && arrItems.length > 0)
	{
		for(var count = 0;count < arrItems.length;count++)
		{
			var item = arrItems[count];
			if(item && item[this.__fieldItemVisible])
			{
				totalRecords += 1;
			}
		}
	}
	return totalRecords;
};

NSList.prototype.__getArrow = function(rowCount)
{
	var arrDivs = this.__getAllArrows();
	if(arrDivs && arrDivs.length > 0)
	{
		for(var count = 0;count < arrDivs.length;count++)
		{
			var div = arrDivs[count];
			if(div && div.hasAttribute("ns-parent-row-count"))
			{
				var rowParentCount = div.getAttribute("ns-parent-row-count");
				if(rowParentCount && rowParentCount == rowCount)
				{
					return div;
				}
			}
		}
	}
};

NSList.prototype.__getAllArrows = function(divParent)
{
	if(!divParent)
	{
		divParent = this.__listContainer;
	}
	return divParent.querySelectorAll(".nsArrow");
};

NSList.prototype.__getTotalListItems = function()
{
	if(this.__listContainer && this.__listContainer.children)
	{
		return this.__listContainer.children.length;
	}
	return 0;
};

NSList.prototype.__updateTotalRecords = function(totalCount)
{
	if(this.util.isUndefined(totalCount) || totalCount === null)
	{
		totalCount = this.__arrInternalSource.length; 
	}
	this.__totalRecords = totalCount;
};

var NSFlatList = function(nsList)
{
	this.__nsList = nsList;
	this.util = nsList.util;
	/********************************Common Functions for Grid ****************************************/
	this.__initialize = function()
	{
	};
	
	this.dataSource = function(source)
	{
		this.__nsList.__arrWrapper = this.__nsList.__dataSource.slice(0);
		this.__setWrapperSource(this.__nsList.__arrWrapper,0);
		this.__nsList.__arrInternalSource = this.__nsList.__arrWrapper.slice(0);
		this.__nsList.__updateTotalRecords();
	};
	
	this.__setWrapperSource = function(source,offset)
	{
		if(source)
		{
			if(!offset)
			{
				offset = 0;
			}
			var length = source.length;
			var count = 0;
			var item = null;
			var index = -1; 
			for (count = 0; count < length; count++) 
			{
				item = source[count];
				index = offset + count;
				this.__setItemProperty(item,index);
			}
		}
	};

	this.__createList= function(dataSet,startIndex,endIndex)
	{
		var item = null;
		var index = -1;
	    for(var count = startIndex; count < endIndex; count++)
	     {
    		item = dataSet[count];
    		index =  item[this.__nsList.__fieldIndex];
    		this.__nsList.__updateItem(item,index);
    		this.__nsList.__createListItem(item);
	     }
	};
	
	this.__createListItem = function(listItem,item)
	{
	};

	this.__addSVGInPage = function()
	{
	};

	this.__resetDataInBody= function(fromIndex,toIndex)
	{
		var listItem = null;
		var item = null;
		var arrRows = this.__nsList.__listContainer.children;
		var rowLength = arrRows.length;
		var length = this.__nsList.__arrInternalSource.length;
		var rowCount = 0;
		for(var count = fromIndex; count < length; count++)
		{
			if(rowLength <= rowCount) 
			{
				break;
			}
			listItem = arrRows[rowCount];
			item = this.__nsList.__arrInternalSource[count];
			if(item)
			{
				this.__resetListItem(listItem,item[this.__nsList.__fieldIndex],item);
				if(item[this.__nsList.__fieldSelected])
				{
					this.util.addStyleClass(listItem,"nsListItemSelected");
				}
				rowCount++;
			}
		}
		for(var rowIndex = rowCount;rowIndex < rowLength;rowIndex++)
		{
			listItem = arrRows[rowIndex];
			listItem.style.display = "none";
			listItem.setAttribute("ns-index",null);
			this.util.removeStyleClass(listItem,"nsListItemSelected");
		}
	};

	this.__setListItemProperties = function(listItem,item)
	{
		if(listItem && item)
		{
			var index = item[this.__nsList.__fieldIndex];
			listItem.setAttribute("ns-index",index);
			item[this.__nsList.__fieldItem] = listItem;
			this.util.removeAllChildren(listItem);
			var divCell = this.util.createDiv(null,"nsListChild");
			listItem.appendChild(divCell);
			this.__nsList.__addCellText(listItem,item,divCell);
		}
	};

	this.__getFlatSource= function()
	{
		return this.__nsList.__arrWrapper;
	};
	/********************************Common Functions for Grid ****************************************/
	this.__setItemProperty = function(item,rowIndex)
	{
		if(item)
		{
			item[this.__nsList.__fieldIndex] = rowIndex;
		}
	};

	this.__resetListItem = function(listItem,index,item)
	{
		listItem.style.display = "";
		listItem.setAttribute("ns-index",index);
		this.util.removeStyleClass(listItem,"nsListItemSelected");
		this.__nsList.__updateItem(item,index);
		this.__setListItemProperties(listItem,item);
	};
};

var NSHierarchicalList = function(nsList)
{
	this.__nsList = nsList;
	this.util = nsList.util;
	this.__ARROW_COLLAPSE_PATH = "M 0 0 L 0 10 L 10 5 Z";
	this.__ARROW_EXPANDED_PATH = "M 0 0 L 10 0 L 5 10 Z";
	this.__CLASS_ARROW = "nsListArrowFill";
	this.__rowCounter = -1;
	/********************************Common Functions for Grid ****************************************/
	this.__initialize = function()
	{
	};
	
	this.dataSource = function(source)
	{
		this.__nsList.__arrWrapper = this.__nsList.__dataSource.slice(0);
		this.__setWrapperSource(this.__nsList.__arrWrapper,0,-1,0);
		this.__nsList.__updateTotalRecords(this.__rowCounter);
		this.__nsList.__arrInternalSource = this.__nsList.__arrFlatHierarchicalSource.slice(0);
	};
	
	this.__setWrapperSource = function(source,offset,parentIndex,level)
	{
		if(source)
		{
			if(level === 0)
			{
				if(!offset)
				{
					offset = 0;
				}
				this.__nsList.__arrFlatHierarchicalSource = [];
				this.__rowCounter = offset;
			}
			var length = source.length;
			var count = 0;
			var item = null;
			for (count = 0; count < length; count++) 
			{
				item = source[count];
				this.__rowCounter++;
				this.__nsList.__arrFlatHierarchicalSource.push(item);
				this.__setItemProperty(item,parentIndex,level);
			}
		}
	};

	this.__createList= function(dataSet,startIndex,endIndex)
	{
		var item = null;
		var index = -1;
	    for(var count = startIndex; count < endIndex; count++)
	     {
    		item = dataSet[count];
    		index =  item[this.__nsList.__fieldIndex];
    		this.__nsList.__updateItem(item,index);
    		this.__nsList.__createListItem(item);
	     }
	};
	
	this.__createListItem = function(listItem,item)
	{
	};

	this.__addSVGInPage = function()
	{
		var objSVG = new NSSvg();
		objSVG.addPath("svgArrowDown",this.__ARROW_EXPANDED_PATH,"0 0 16 16");
		objSVG.addPath("svgArrowRight",this.__ARROW_COLLAPSE_PATH,"0 0 16 16");
	};

	this.__resetDataInBody= function(fromIndex,toIndex)
	{
		var listItem = null;
		var item = null;
		var arrRows = this.__nsList.__listContainer.children;
		var rowLength = arrRows.length;
		var length = this.__nsList.__arrInternalSource.length;
		var rowCount = 0;
		for(var count = fromIndex; count < length; count++)
		{
			if(rowLength <= rowCount) 
			{
				break;
			}
			listItem = arrRows[rowCount];
			item = this.__nsList.__arrInternalSource[count];
			if(item)
			{
				this.__resetListItem(listItem,item[this.__nsList.__fieldIndex],item);
				if(item[this.__nsList.__fieldSelected])
				{
					this.util.addStyleClass(listItem,"nsListItemSelected");
				}
				rowCount++;
			}
		}
		for(var rowIndex = rowCount;rowIndex < rowLength;rowIndex++)
		{
			listItem = arrRows[rowIndex];
			listItem.style.display = "none";
			listItem.setAttribute("ns-index",null);
			this.util.removeStyleClass(listItem,"nsListItemSelected");
		}
	};

	this.__setListItemProperties = function(listItem,item)
	{
		if(listItem && item)
		{
			var index = item[this.__nsList.__fieldIndex];
			var level = item[this.__nsList.__fieldItemLevel];
			var parentIndex = item[this.__nsList.__fieldParentIndex];
			listItem.setAttribute("ns-index",index);
			listItem.setAttribute("ns-level",level);
			if(item[this.__nsList.__fieldHasParent])
		    {
				listItem.setAttribute("ns-parent-index",parentIndex);
		    }
			item[this.__nsList.__fieldItem] = listItem;
			this.util.removeAllChildren(listItem);
			var divCell = this.util.createDiv(null,"nsListChild");
			listItem.appendChild(divCell);
			
			var hierarchicalPadding = 0;
			var divText = null;
			if(item && item.hasOwnProperty(this.__nsList.__labelField) && item[this.__nsList.__labelField])
			{
		        if(item[this.__nsList.__childField]  && item[this.__nsList.__childField].length > 0)
		        {
		        	this.util.addStyleClass(divCell,this.__nsList.__CLASS_GROUP_CELL);
		        	this.__nsList.__createArrow(item,index,divCell,item[this.__nsList.__fieldIsCollapsed]);
		        	var cellText = this.util.createDiv(null,this.__nsList.__CLASS_CELL_CHILD);
		        	cellText.style.verticalAlign = "top";
		        	divText = cellText;
		        	divCell.appendChild(cellText);
		        }
		        else
		        {
		        	this.util.addStyleClass(divCell,this.__nsList.__CLASS_CELL_CHILD);
		        	divText = divCell;
		        	//24 = 16(Arrow Width) + 6(Arrow Parent Padding) + 2(divCell horizontalGap between elements shown in debugger)
		        	hierarchicalPadding = 24;
		        }
		        this.__nsList.__addCellText(listItem,item,divText);
	        	if(level === 0)
	        	{
	        		listItem.style.paddingLeft = "1px";
	        	}
	        	else
	        	{
	        		var paddingLeft = (10 * level) + hierarchicalPadding;
	        		listItem.style.paddingLeft = paddingLeft + "px";
	        	}
			}
		}
	};

	this.__getFlatSource= function()
	{
		return this.__nsList.__arrFlatHierarchicalSource;
	};
	/********************************Common Functions for Grid ****************************************/
	this.__setItemProperty = function(item,parentIndex,level)
	{
		if(item)
		{
			var totalRowCount = this.__rowCounter;
			item[this.__nsList.__fieldIndex] = totalRowCount;
			item[this.__nsList.__fieldItemLevel] = level;
			var hasChild = false;
			if(item.hasOwnProperty(this.__nsList.__childField) && item[this.__nsList.__childField] && item[this.__nsList.__childField].length > 0)
		    {
		    	hasChild = true;
		    	this.__setWrapperSource(item[this.__nsList.__childField],0,totalRowCount,level + 1);
		    }
			item[this.__nsList.__fieldParentIndex] = parentIndex;
			if(parentIndex > -1)
		    {
				item[this.__nsList.__fieldHasParent] = true;
		    }
			else
			{
				item[this.__nsList.__fieldHasParent] = false;
			}
			item[this.__nsList.__fieldHasChild] = hasChild;
			item[this.__nsList.__fieldItemVisible] = true;
			item[this.__nsList.__fieldIsCollapsed] = false;
		}
	};
	
	this.__createArrow = function(compArrow,objSVG,arrowID,isCollapsed)
	{
		 var svg = objSVG.addSVG(compArrow,arrowID + "svg",this.__CLASS_ARROW,null,null,null,null,null,null,true);
		 if(isCollapsed)
		 {
			 objSVG.addUse(svg,arrowID + "use",null,"#svgArrowRight");
		 }
		 else
		 {
			 objSVG.addUse(svg,arrowID + "use",null,"#svgArrowDown");
		 }
	};

	this.__setArrowDirection = function(objSVG,useID,isCollapsed)
	{
		if(isCollapsed)
		{
			objSVG.changeUseHref(useID,"#svgArrowRight");
		}
		else
		{
			objSVG.changeUseHref(useID,"#svgArrowDown");
		}
	};

	this.__resetListItem = function(listItem,index,item)
	{
		listItem.style.display = "";
		listItem.setAttribute("ns-index",index);
		this.util.removeStyleClass(listItem,"nsListItemSelected");
		this.__nsList.__updateItem(item,index);
		this.__setListItemProperties(listItem,item);
	};
};

var NSListFilter = function(nsList)
{
	this.__nsList = nsList;
	
	this.util = nsList.util;
	this.__filteredColumn = [];
	this.__config = {};
	this.__nsDragDrop = null;
	
	this.__initialize = function()
	{
		
	};
	
	this.filter = function(strData,filterSetting,enableHighlighting,recordLimit)
	{
		if(!filterSetting)
		{
			filterSetting = {};
		}
		if(this.util.isUndefinedOrNull(enableHighlighting))
		{
			enableHighlighting = true;
		}
		var config = {
				caseSensitive: Boolean.parse(filterSetting["caseSensitive"]) || true,
				multiline: Boolean.parse(filterSetting["multiline"]) || true,
				matchType: filterSetting["matchType"] || new NSFilter().CONTAINS
		};
		var filter = {};
		var setting = {};
		var field = this.__nsList.__labelField;
		filter[field] = strData;
		setting[field] = {caseSensitive:config["caseSensitive"],multiline:config["multiline"],matchType:config["matchType"]};
		if(filter && Object.keys(filter).length > 0)
		{
			this.__handleFiltering(filter,setting,enableHighlighting,recordLimit);
		}
		else
		{
			this.__resetFiltering();
		}
	};
	
	this.reset = function()
	{
		this.__resetFiltering();
	};
	
	this.__handleFiltering = function(filter,setting,enableHighlighting,recordLimit)
	{
		this.__filteredColumn = [];
		if(filter)
	    {
			 var field = this.__nsList.__labelField;
			 var source = this.__nsList.__arrWrapper;
			 var isHierarchical = false;
			 if(this.__nsList.__enableHierarchical)
			 {
				 isHierarchical = true;
			 }
		   	 var nsFilter = new NSFilter(source,filter,setting,recordLimit,isHierarchical,this.__nsList.__childField);
		   	 this.__nsList.__arrInternalSource = nsFilter.execute();
		   	 if(enableHighlighting)
		   	 {
		   		for(var key in filter) 
	  	        {
	  	        	this.__filteredColumn.push({field:key,text:filter[key]});
	  	        }
		   	 }
		   	 if(isHierarchical)
		   	 {
		   		this.__nsList.__objGrid.__setWrapperSource(this.__nsList.__arrInternalSource,0,-1,0);
		   		this.__nsList.__arrInternalSource = this.__nsList.__arrFlatHierarchicalSource.slice(0); 
		   	 }
		   	 this.__nsList.__updateTotalRecords();
		   	 this.__nsList.__renderBody();
	    }
	};

	this.__resetFiltering = function()
	{
		if(this.__nsList.__dataSource)
		{
			this.__nsList.__arrInternalSource = this.__nsList.__arrWrapper.slice(0);
			this.__filteredColumn = [];
			if(this.__nsList.__enableHierarchical || this.__nsList.__enableGrouping)
			{
				this.__nsList.__objGrid.__setWrapperSource(this.__nsList.__arrInternalSource,0,-1,0);
				this.__nsList.__arrInternalSource = this.__nsList.__arrFlatHierarchicalSource.slice(0); 
			}
			this.__nsList.__updateTotalRecords();
			this.__nsList.__renderBody();
		}
	};

	this.__highlightDiv = function(divText)
	{
		var length = this.__filteredColumn.length;
		for (var count = 0; count < length; count++) 
	    {
			var text = this.__filteredColumn[count].text;
			this.util.highlightText(divText,text,"nsTextHighlight");
	    }
	};
	
	this.__initialize();
};

var NSListDragDrop = function(nsList)
{
	this.__nsList = nsList;
	this.util = nsList.util;
	
	this.__disableDraggableFunction = null;
	this.__disableDropableFunction = null;
	
	this.__emptyListItem = null;
	
	this.initialize = function()
	{
		var container = this.__nsList.__listContainer;
		var setting = {container:container,childNodeType:"LI",isContainerDraggable:true,isContainerDroppable:true,
					   enableDragByHandle:this.__nsList.__enableDragByHandle,dragHandlerClass:this.__nsList.__dragHandlerClass,
					   enableDragAfterHold:false,enableCloneMode:false,holdTime:500,createCloneCallback:this.__createClone.bind(this),
					   createPlaceholderCallback:this.__createPlaceholder.bind(this),nodeDroppableCallback:this.__isListItemDroppable.bind(this),
					   nodeDraggableCallback:this.__isListItemDraggable.bind(this),insertNodeCallback:this.__insertListItemHandler.bind(this),
					   moveNodeCallback:this.__moveListItemHandler.bind(this),removeNodeCallback:this.__removeListItemHandler.bind(this)};
		this.__nsDragDrop = new NSDragDrop(setting);
		this.util.addEvent(container,this.__nsDragDrop.ITEM_DROPPING,this.__itemDroppingHandler.bind(this));
		this.util.addEvent(container,this.__nsDragDrop.ITEM_DROPPED,this.__itemDroppedHandler.bind(this));
		this.util.addEvent(container,this.__nsDragDrop.DRAG_STARTING,this.__dragStartingHandler.bind(this));
		this.util.addEvent(container,this.__nsDragDrop.DRAG_STARTED,this.__dragStartHandler.bind(this));
		this.util.addEvent(container,this.__nsDragDrop.DRAGGING,this.__draggingHandler.bind(this));
		this.util.addEvent(container,this.__nsDragDrop.DRAG_END,this.__dragEndHandler.bind(this));
	};
	
	this.__initialize = function()
	{
		var setting = this.__nsList.__setting;
		if(setting.hasOwnProperty("disableDraggableFunction"))
		{
			this.__disableDraggableFunction = setting["disableDraggableFunction"];
			if (typeof this.__disableDraggableFunction === "string" || this.__disableDraggableFunction instanceof String)
			{
				if(this.util.isFunction(this.__disableDraggableFunction))
				{
					this.__disableDraggableFunction = window[this.__disableDraggableFunction];
				}
			}
		}
		if(setting.hasOwnProperty("disableDropableFunction"))
		{
			this.__disableDropableFunction = setting["disableDropableFunction"];
			if (typeof this.__disableDropableFunction === "string" || this.__disableDropableFunction instanceof String)
			{
				if(this.util.isFunction(this.__disableDropableFunction))
				{
					this.__disableDropableFunction = window[this.__disableDropableFunction];
				}
			}
		}
	};
	
	this.__dragStartingHandler = function(event)
	{
		var listItem = event.node;
		var arrItems = this.__getSelectedItems(listItem);
		var data = {parentID:this.__nsList.__listContainer.getAttribute("id"),arrItems:arrItems};
		this.__nsDragDrop.setDragData(data);
	};
	
	this.__dragStartHandler = function(event)
	{
		var listItem = event.node;
		var data = this.__nsDragDrop.getDragData();
		var arrItems = data.arrItems;
		this.util.dispatchEvent(this.__nsList.__baseComponent,this.__nsList.DRAG_STARTED,arrItems,{items:arrItems});
	};
	
	this.__draggingHandler = function(event)
	{
		var listData = event.item;
		var data = this.__nsDragDrop.getDragData();
		var arrItems = data.arrItems;
		listData.arrItems = arrItems;
 	    this.util.dispatchEvent(this.__nsList.__baseComponent,this.__nsList.DRAGGING,listData,{item:listData});
	};
	
	this.__dragEndHandler = function(event)
	{
		var data = this.__nsDragDrop.getDragData();
		var arrItems = data.arrItems;
 	    this.util.dispatchEvent(this.__nsList.__baseComponent,this.__nsList.DRAG_END,arrItems,{items:arrItems});
	};
	
	this.__itemDroppingHandler = function(event)
	{
		var cancelled = this.util.dispatchEvent(this.__nsList.__baseComponent,this.__nsList.ITEM_DROPPING,event.item,{item:event.item},true,true);
		if(cancelled)
		{
			event.preventDefault();
		}
	};
	
	this.__itemDroppedHandler = function(event)
	{
		this.util.dispatchEvent(this.__nsList.__baseComponent,this.__nsList.ITEM_DROPPED,event.item,{item:event.item},true,false);
	};
	
	this.__createClone = function(listItem)
	{
		var clonedNode = listItem.cloneNode(true);
		clonedNode.setAttribute("id","compClonedNode");
		return clonedNode;
	};
	
	this.__createPlaceholder = function(listItem)
	{
		var listItem = this.util.createElement("li",null,"nsListEmptyItem");
		listItem.innerHTML = "<div class='nsListEmptyChild'>&nbsp;</div>";
		return listItem;
	};
	
	this.__isListItemDroppable = function(listItem)
	{
		var item = this.__getItemFromTarget(listItem);
		return this.__isItemDroppable(listItem,item);
	};
	
	this.__isListItemDraggable = function(listItem)
	{
		var item = this.__getItemFromTarget(listItem);
		return this.__isItemDraggable(listItem,item);
	};
	
	this.__insertListItemHandler = function(container,newListItem,index,currentListItem,data)
	{
		var arrItems = data.arrItems;
		this.__nsList.__addItem(arrItems,index);
	};
	
	this.__moveListItemHandler = function(container,newListItem,index,currentListItem,data)
	{
		var arrItems = data.arrItems;
		this.__nsList.__moveItem(arrItems,index);
	};
	
	this.__removeListItemHandler = function(container,listItem,data)
	{
		
	};
	
	this.__getSelectedItems = function(target)
	{
		var list = this.__nsList;
		var listContainer = list.__listContainer;
		var index = parseInt(list.__getIndexFromTarget(target));
		var item = list.__getItemByIndex(index);
		var arrItems = [];
		var arrSelectedItems = list.getSelectedItems();
		var itemSelected = false; 
		if(arrSelectedItems && arrSelectedItems.length > 0)
		{
			var tempItem = null;
			for(var count = 0;count < arrSelectedItems.length;count++)
			{
				tempItem = this.__cloneItem(arrSelectedItems[count]);
				if(tempItem[list.__fieldIndex] === item[list.__fieldIndex])
				{
					itemSelected = true;
				}
				arrItems.push(tempItem);
			}
		}
		if(!itemSelected || !arrItems || arrItems.length === 0 || !arrItems[0])
		{
			var tempItem = this.__cloneItem(item);
			arrItems = [tempItem];
		}
	};
	
	this.__cloneItem = function(item)
	{
		var list = this.__nsList;
		var tempItem = null;
		if(item)
		{
			tempItem = this.util.cloneObject(item);
			if(list.__enableHierarchical && tempItem[list.__childField] && tempItem[list.__childField].length > 0)
			{
				var arrChild = tempItem[list.__childField];
				var length = arrChild.length;
				var childItem = null;
				var tempChildItem = null;
				for(var count = 0;count < length;count++)
				{
					childItem = arrChild[count];
					tempChildItem = this.__cloneItem(childItem);
					if(tempChildItem)
					{
						tempItem[list.__childField][count] = tempChildItem;
					}
				}
			}
		}
		return tempItem;
	};
	
	this.__getItemFromTarget = function(listItem)
	{
		var itemIndex = this.__nsList.__getIndexFromTarget(listItem);
		return this.__nsList.__getItemByIndex(itemIndex);
	};
	
	this.__isItemDraggable = function(listItem,item) 
    {
		var retValue = true;
		if(this.__disableDraggableFunction)
		{
			retValue = this.__disableDraggableFunction(item,this.__nsList.__labelField,item[this.__nsList.__fieldIndex],item[this.__nsList.__fieldDisableHover],listItem);
			retValue = !retValue;
		}
    	return retValue;
	};
	
	this.__isItemDroppable = function(event) 
    {
		var retValue = true;
		if(this.__disableDropableFunction)
		{
			var target = this.util.getTarget(event);
			target = this.util.findParent(target,"li");
			var index = this.__nsList.__getIndexFromTarget(target);
			var item = this.__nsList.__getItemByIndex(index);
			if(item)
			{
				retValue = this.__disableDropableFunction(item,this.__nsList.__labelField,item[this.__nsList.__fieldIndex],item[this.__nsList.__fieldDisableHover],target);
				retValue = !retValue;
			}
		}
    	return retValue;
	};
	
	this.__initialize();
};
