 "use strict"; 
function NSHierarchicalGrid(nsGrid,nsUtil) 
{
	this.__nsGrid = nsGrid;
	this.util = nsUtil;
	
	this.__ARROW_COLLAPSE_PATH = "M 0 0 L 0 10 L 10 5 Z";
	this.__ARROW_EXPANDED_PATH = "M 0 0 L 10 0 L 5 10 Z";
	this.__CLASS_ARROW = "nsGridArrowFill";
	
	this.__rowCounter = -1;
}
/********************************Common Functions for Grid ****************************************/
NSHierarchicalGrid.prototype.__initialize = function ()
{
};

NSHierarchicalGrid.prototype.propertyChange = function(attrName, oldVal, newVal, setProperty) 
{
	var attributeName = attrName.toLowerCase();
};

NSHierarchicalGrid.prototype.dataSource = function(source)
{
	this.__nsGrid.__arrWrapper = this.__nsGrid.__dataSource.slice(0);
	this.__setWrapperSource(this.__nsGrid.__arrWrapper,-1,0);
	this.__nsGrid.__arrInternalSource = this.__nsGrid.__arrWrapper.slice(0);
	this.__nsGrid.__updateTotalRecords();
};

NSHierarchicalGrid.prototype.__createBodyBody= function(dataSet,startIndex,endIndex)
{
    if(dataSet && dataSet.length > 0)
    {
    	 for (var rowIndex = startIndex; rowIndex < endIndex; rowIndex++)
	     {
    		var item = dataSet[rowIndex];
    		var row = item[this.__nsGrid.__fieldRowHtml];
    		this.__nsGrid.__tblBodyBody.appendChild(row);
    		if(item[this.__nsGrid.__fieldHasChild])
    		{
    			this.__createBodyBody(item[this.__nsGrid.__childField], startIndex, item[this.__nsGrid.__childField].length);
    		}
	     }
    }
};

NSHierarchicalGrid.prototype.__createBody = function()
{
};

NSHierarchicalGrid.prototype.__checkForAdditionalColumns = function()
{
};

NSHierarchicalGrid.prototype.__setMeasurement = function()
{
};

NSHierarchicalGrid.prototype.__addSVGInPage = function(objSVG)
{
	objSVG.addPath("svgArrowDown",this.__ARROW_EXPANDED_PATH,"0 0 16 16");
	objSVG.addPath("svgArrowRight",this.__ARROW_COLLAPSE_PATH,"0 0 16 16");
};

NSHierarchicalGrid.prototype.__setWrapperSource = function(source,offset,parentIndex,level)
{
	if(source)
	{
		if(!offset)
		{
			offset = 0;
		}
		var length = source.length;
		for (var count = 0; count < length; count++) 
		{
			var item = source[count];
			var row = document.createElement("TR");
			item[this.__nsGrid.__fieldRowHtml] = row;
			var index = ++this.__rowCounter + offset;
			row.setAttribute("index",index);
			this.__setBodyRowProperty(row,item,parentIndex,level);
			var colLength = this.__nsGrid.__columns.length;
			for (var colIndex = 0; colIndex < colLength; colIndex++)
	        {
	        	var colItem = this.__nsGrid.__columns[colIndex];
	        	var cell =  row.insertCell(-1);
	        	this.util.addStyleClass(cell , "nsDataGridCell");
	            var cellDiv = this.util.createDiv(null);
	            cell.appendChild(cellDiv);
	            this.__setBodyCellProperty(row,cell,item,index,colItem,colIndex,parentIndex,level);
	        }
		}
	}
};
/********************************End of Common Functions for Grid ****************************************/
NSHierarchicalGrid.prototype.__setBodyRowProperty = function(row,item,parentIndex,level)
{
	if(row && item)
	{
		var totalRowCount = this.__rowCounter;
		this.__nsGrid.__setBodyRowProperty(row,item,totalRowCount);
		item[this.__nsGrid.__fieldIndex] = totalRowCount;
		var hasChild = false;
		if(item.hasOwnProperty(this.__nsGrid.__childField) && item[this.__nsGrid.__childField] && item[this.__nsGrid.__childField].length > 0)
	    {
	    	hasChild = true;
	    	this.__setWrapperSource(item[this.__nsGrid.__childField],0,totalRowCount,level + 1);
	    }
		item[this.__nsGrid.__fieldParentIndex] = parentIndex;
		if(parentIndex > -1)
	    {
			item[this.__nsGrid.__fieldHasParent] = true;
			row.setAttribute("parent-index",parentIndex);
	    }
		else
		{
			item[this.__nsGrid.__fieldHasParent] = false;
		}
		item[this.__nsGrid.__fieldHasChild] = hasChild;
		item[this.__nsGrid.__fieldRowVisible] = false;
		item[this.__nsGrid.__fieldIsCollapsed] = false;
	}
};

NSHierarchicalGrid.prototype.__setBodyCellProperty = function(row,cell,item,currentIndex,colItem,colIndex,parentIndex,level)
{
	var hierarchicalPadding = 0;
	if(colItem && colItem.hasOwnProperty("dataField") && colItem["dataField"])
	{
		var cellDiv = cell.firstChild;
        if(colIndex == 0 && item[this.__nsGrid.__childField]  && item[this.__nsGrid.__childField].length > 0)
        {
        	this.util.addStyleClass(cellDiv,this.__nsGrid.__CLASS_GROUP_CELL);
        	this.__nsGrid.__createArrow(currentIndex,cellDiv,false);
        	var cellText = this.util.createDiv(null,this.__nsGrid.__CLASS_CELL_CHILD);
        	cellText.style.verticalAlign = "top";
        	this.__nsGrid.__addCellText(row,item,cellText,colItem,colIndex);
        	cellDiv.appendChild(cellText);
        }
        else
        {
        	this.util.addStyleClass(cellDiv,this.__nsGrid.__CLASS_CELL_CHILD);
        	this.__nsGrid.__addCellText(row,item,cellDiv,colItem,colIndex);
        	//24 = 16(Arrow Width) + 6(Arrow Parent Padding) + 2(cellDiv horizontalGap between elements shown in debugger)
        	hierarchicalPadding = 24;
        }
        if(colIndex == 0)
        {
        	if(level === 0)
        	{
        		cell.style.paddingLeft = "1px";
        	}
        	else
        	{
        		var paddingLeft = (10 * level) + hierarchicalPadding;
        		cell.style.paddingLeft = paddingLeft + "px";
        	}
        }
	}
	this.__nsGrid.__addPriorityClassInCell(cell,colItem);
};

NSHierarchicalGrid.prototype.__createArrow = function(compArrow,objSVG,arrowID)
{
	 var svg = objSVG.addSVG(compArrow,arrowID + "svg",this.__CLASS_ARROW,null,null,null,null,null,null,true);
	 objSVG.addUse(svg,arrowID + "use",null,"#svgArrowDown");
};

NSHierarchicalGrid.prototype.__setArrowDirection = function(objSVG,useID,isCollapsed)
{
	if(isCollapsed)
	{
		objSVG.changeUseHref(useID,"#svgArrowRight");
	}
	else
	{
		objSVG.changeUseHref(useID,"#svgArrowDown");
	}
};
