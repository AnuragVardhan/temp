this.__scrollToRow = function(row,direction)
	{
		if(row)
		{
			var scrollParent = this.__nsGrid.__divCenterTableBodyContainer;
			var rowRect = row.getBoundingClientRect();
			var currentScroll = scrollParent.scrollTop;
			scrollParent.scrollTop = (direction === this.__nsGrid.NAVIGATION_UP) ? (currentScroll - rowRect.height) : (currentScroll + rowRect.height);
		}
		/*if(row)
		{
			var scrollParent = this.__nsGrid.__divCenterTableBodyContainer;
			var rowRect = row.getBoundingClientRect();
			var rowTop = rowRect.top;
			var rowBottom = rowTop + rowRect.height;
			var scrollParentHeight = scrollParent.getBoundingClientRect().height;
			var currentScroll = scrollParent.scrollTop;
			// scroll up
			if (rowTop < 0)// && 
			{
				scrollParent.scrollTop = currentScroll + rowTop;
				return;
			}
			// scroll down
			//else if (direction === this.__nsGrid.NAVIGATION_UP)//rowBottom  > scrollParentHeight
			//{
				var scrollAmount = rowBottom - scrollParentHeight;
				console.log(rowBottom + "-" + scrollParentHeight + " = " + scrollAmount)
				scrollParent.scrollTop = currentScroll + scrollAmount;
			//}
		}*/
	};
	
	this.__handleFiltering = function(filter,setting,enableHighlighting,recordLimit)
	{
		if(this.__nsGrid.__enableFilter)
		{
			var eventParam = {filter:filter,setting:setting,recordLimit:recordLimit};
			this.__nsGrid.__dispatchEvent(NSGrid.FILTER_CHANGING,eventParam,eventParam);
			this.__filteredColumn = [];
			if(filter)
		    {
				 if(this.util.isUndefinedOrNull(enableHighlighting))
				 {
					enableHighlighting = true;
				 }
				 var isHierarchical = false;
				 var source = this.__nsGrid.__arrWrapper;
				 if(this.__nsGrid.__enableHierarchical || this.__nsGrid.__enableGrouping)
				 {
					 isHierarchical = true;
				 }
			   	 var nsFilter = new NSFilter(source,filter,setting,recordLimit,isHierarchical,this.__nsGrid.__childField,this.__nsGrid.__filterFunction,this.__nsGrid.__hierarchyFilterChildrenFunction);
			   	 this.__nsGrid.__arrInternalSource = nsFilter.execute();
			   	 this.__nsGrid.__arrFilteredGroupedSource =  this.__nsGrid.__arrInternalSource.slice(0);
			   	 if(enableHighlighting)
			   	 {
				   	 if(filter instanceof Array) 
			  	     {
				   		 for (var count = 0; count < filter.length; count++) 
				         {
				 	   		var item = filter[count];
				 	   		var key = Object.keys(item)[0];
				 	   		var colItem = this.__nsGrid.__getColumnObjectByDataField(key);
				 	   		this.__filteredColumn.push({field:key,text:item[key],item:colItem});
				         }
			  	     }
			  		 else if(typeof(filter) === "object") 
			  	     {
			  	        for(var key in filter) 
			  	        {
			  	        	var colItem = this.__nsGrid.__getColumnObjectByDataField(key);
			  	        	this.__filteredColumn.push({field:key,text:filter[key],item:colItem});
			  	        }
			  	     }
			   	 }
			   	 if(isHierarchical)
			   	 {
			   		this.__nsGrid.__objGrid.__setWrapperSource(this.__nsGrid.__arrInternalSource,0,-1,0,false);
			   		this.__nsGrid.__arrInternalSource = this.__nsGrid.__arrFlatHierarchicalSource.slice(0); 
			   	 }
			   	 this.__nsGrid.__updateTotalRecords();
			   	 this.__nsGrid.__renderBody(false);
			   	 this.__nsGrid.__updateVisibleIndexByRow(this.__nsGrid.__arrInternalSource);
			   	 this.isFiltered = true;
			   	 this.__nsGrid.__dispatchEvent(NSGrid.FILTER_CHANGED,eventParam,eventParam);
		    }
		}
	};
	
	this.__nsGrid.__updateVisibleIndexByRow(this.__nsGrid.__arrInternalSource);
