function NSNavigation(component,setting) 
{
	this.__setting = setting;
	
	this.__navigationContainerParent = null;
	this.__navigationContainer = null;
	
	this.__config = null;
	this.__selectedParentMenuItem = null;
	this.__selectedMenu = null;
	this.__selectedMenuItem = null;
	this.__isNavOpen = false;
	this.__dynamicContainer = null;
	
	this.__fieldPrefix = "__ns_nav_field";
	this.__fieldIsOpen = this.__fieldPrefix + "_open";
	this.__fieldElement = this.__fieldPrefix + "_element";
	this.__fieldChildContainer = this.__fieldPrefix + "_childcontainer";
	
	this.__headerItem = null;
	this.__headerItemHeight = 0;
	
	this.base.__setBaseComponent.call(this,component);
};

nsExtendPrototype(NSContainerBase,NSNavigation);
NSNavigation.prototype.constructor = NSNavigation;

NSNavigation.prototype.initializeComponent = function() 
{
	this.base.initializeComponent.call(this);
	this.__setSetting();
};

NSNavigation.prototype.setComponentProperties = function() 
{
	this.base.setComponentProperties.call(this);
	if(this.__config.dataSource)
	{
		this.dataSource(this.__config.dataSource);
	}
};

NSNavigation.prototype.propertyChange = function(attrName, oldVal, newVal, setProperty)
{
	var attributeName = attrName.toLowerCase();
	this.base.propertyChange.call(this,attrName, oldVal, newVal, setProperty);
};

NSNavigation.prototype.removeComponent = function() 
{
	this.base.removeComponent.call(this);
};

NSNavigation.prototype.componentResized = function(event) 
{
	this.base.componentResized.call(this,event);
};

NSNavigation.prototype.isNavOpen = function()
{
	return this.__isNavOpen;
};

NSNavigation.prototype.toggleNavigation = function()
{
	if(this.__isNavOpen)
	{
		this.closeNavigation();
	}
	else
	{
		this.openNavigation();
	}
};

NSNavigation.prototype.openNavigation = function()
{
	this.util.dispatchEvent(this.__baseComponent,NSNavigation.NAVIGATION_OPEN_START);
	this.util.removeStyleClass(this.__config.containerElement,"nsNavCollapsed");
	this.__isNavOpen = true;
	var self = this;
	var transitionEndCallback = function()
	{
		self.__resizeContentContainer();
		this.util.dispatchEvent(this.__baseComponent,NSNavigation.NAVIGATION_OPEN_END);
	};
	var transition = new this.util.transition(this.__baseComponent,transitionEndCallback.bind(this));
};

NSNavigation.prototype.closeNavigation = function()
{
	this.util.dispatchEvent(this.__baseComponent,NSNavigation.NAVIGATION_CLOSE_START);
	this.util.addStyleClass(this.__config.containerElement,"nsNavCollapsed");
	this.__isNavOpen = false;
	var self = this;
	var transitionEndCallback = function()
	{
		self.__resizeContentContainer();
		this.util.dispatchEvent(this.__baseComponent,NSNavigation.NAVIGATION_CLOSE_END);
	};
	var transition = new this.util.transition(this.__baseComponent,transitionEndCallback.bind(this));
};

NSNavigation.prototype.selectMenu = function(item)
{
	this.__handleSelectedMenu(item);
};

NSNavigation.prototype.dataSource = function(source)
{
	this.__config.dataSource = source;
	if(this.__navigationContainer)
	{
		//this.util.removeAllChildren(this.__navigationContainer);
		this.__createItems(this.__config.dataSource,this.__navigationContainer,1);
	}
};

NSNavigation.prototype.__setSetting = function()
{
	if(!this.__setting)
	{
		this.__setting = {};
	}
	this.__config = {
		containerElement: this.__setting["containerElement"] || document.body,
		elementsBeforeMenu: this.__setting["elementsBeforeMenu"] || null,
		pageHeaderContainer: this.__setting["pageHeaderContainer"] || null,
		pageContentContainer: this.__setting["pageContentContainer"] || null,
		header: this.__setting["header"] || null,
		showCollapseIcon: this.util.isUndefinedOrNull(this.__setting["showCollapseIcon"]) ? true : Boolean.parse(this.__setting["showCollapseIcon"]),
		iconCollapse: this.__setting["iconCollapse"] || "<i class='fa fa-bars pull-right'></i>",
		dataSource: this.__setting["dataSource"] || null,
		titleField: this.__setting["titleField"] || "title",
		childField: this.__setting["childField"] || "children",
		iconPosition: this.__setting["iconPosition"] || "left",
		iconMenuExpanded: this.__setting["iconMenuExpanded"] || "<i class='fa fa-angle-left'></i>",
		iconMenuCollapsed: this.__setting["iconMenuCollapsed"] || "<i class='fa fa-angle-left pull-right'></i>",
		context: this.__setting["context"] || window,
		collapseLeftOffset: parseInt(this.__setting["collapseLeftOffset"]) || 0,
		collapseTopOffset: parseInt(this.__setting["collapseTopOffset"]) || 0,
	};
	this.__createStructure();
};

NSNavigation.prototype.__createStructure = function()
{
	if(!this.__navigationContainerParent)
	{
		this.util.removeAllChildren(this.__navigationContainerParent);
		this.__navigationContainerParent = null;
		this.__navigationContainer = null;
	}
	this.openNavigation();
	this.util.addStyleClass(this.__baseComponent,"nsNavMainContainer");
	this.util.addEvent(this.__baseComponent,"mouseleave",this.__parentMouseEventHandler.bind(this,event,null,"mouseleave"));
	this.__navigationContainerParent = this.util.createDiv(this.getID() + "ContainerParent","nsNavContainerParent");
	this.__addElementsBeforeMenu();
	this.__navigationContainer = this.util.createElement("ul",this.getID() + "Container","nsNavContainer");
	this.__navigationContainerParent.appendChild(this.__navigationContainer);
	this.__createHeader(this.__navigationContainer);
	if(this.__config.pageHeaderContainer)
	{
		this.__baseComponent.style.marginTop = this.__config.pageHeaderContainer.offsetHeight + "px";
	}
	this.__baseComponent.appendChild(this.__navigationContainerParent);
	this.__headerItemHeight = this.__headerItem.offsetHeight;
};

NSNavigation.prototype.__addElementsBeforeMenu = function(parent)
{
	if(this.__config.elementsBeforeMenu && this.__config.elementsBeforeMenu.length > 0)
	{
		var length = this.__config.elementsBeforeMenu.length;
		for(var count = 0;count < length;count++)
		{
			parent.appendChild(this.__config.elementsBeforeMenu[count]);
		}
	}
};

NSNavigation.prototype.__createHeader = function(parent)
{
	this.__headerItem = this.util.createElement("li",null,"nsNavHeader");
	if(this.__config.header)
	{
		var span = this.util.createElement("span",null,"nsNavHeaderTitle");
		this.util.addStyleClass(span,"nsNavNonVisibleIcon");
		span.appendChild(document.createTextNode(this.__config.header));
		this.__headerItem.appendChild(span);
	}
	if(this.__config.showCollapseIcon)
	{
		var spanIcon = this.util.createElement("span",null,"nsNavVisibleIcon");
		spanIcon.innerHTML = this.__config.iconCollapse;
		this.util.addEvent(spanIcon,"click",this.__toggleIconClickHandler.bind(this));
		this.__headerItem.appendChild(spanIcon);
	}
	parent.appendChild(this.__headerItem);
};

NSNavigation.prototype.__createItems = function(arrItem,parent,level)
{
	if(arrItem)
	{
		if(!this.util.isArray(arrItem))
		{
			arrItem = [arrItem];
		}
		var item = {};
		for(var count = 0;count < arrItem.length;count++)
		{
			item = arrItem[count];
			if(item)
			{
				var li = this.__createItem(item,level);
				parent.appendChild(li);
				item[this.__fieldElement] = li;
				item[this.__fieldIsOpen] = false;
			}
		}
	}
};

//While Changing this function, see if this change is applicable in __createDynamicItem function
NSNavigation.prototype.__createItem = function(item,level)
{
	var li = this.util.createElement("li",null,"nsNavigationItem");
	li.setAttribute("ns-Nav-Level",level);
	if(item["cssClass"])
	{
		this.util.addStyleClass(li,item["cssClass"]);
	}
	if(level == 1)
	{
		this.util.addEvent(li,"mouseenter",this.__parentMouseEventHandler.bind(this,event,item,"mouseenter"));
		//this.util.addEvent(li,"mouseleave",this.__parentMouseEventHandler.bind(this,event,item,"mouseleave"));
		//this.util.addEvent(li,"click",this.__parentMouseEventHandler.bind(this,event,item,"mouseenter"));
	}
	var anchor = this.util.createElement("a",null);
	li.appendChild(anchor);
	if(item["iconBeforeHtml"])
	{
		var spanIcon = this.util.createElement("span");
		this.util.addStyleClass(spanIcon);
		spanIcon.innerHTML = item["iconBeforeHtml"];
		var icon = spanIcon.firstChild;
		anchor.appendChild(icon);
		anchor.appendChild(document.createTextNode("\u00A0"));
	}
	var spanText = this.util.createElement("span",null,"nsNavMenuText");
	this.util.addStyleClass(spanText,"nsNavNonVisibleIcon");
	spanText.appendChild(document.createTextNode(item[this.__config.titleField]));
	anchor.appendChild(spanText);
	if(item["iconAfterHtml"])
	{
		var spanIcon = this.util.createElement("span");
		spanIcon.innerHTML = item["iconAfterHtml"];
		var icon = spanIcon.firstChild;
		anchor.appendChild(icon);
	}
	var hasChildren = false;
	if(item[this.__config.childField] && item[this.__config.childField].length > 0)
	{
		this.util.addEvent(anchor,"click",this.__parentMenuClickHandler.bind(this,event,item));
		this.util.addStyleClass(li,"nsNavItemParent");
		anchor.setAttribute("href","javascript:void(0)");
		var spanIcon = this.util.createElement("span");
		this.util.addStyleClass(spanIcon,"nsNavNonVisibleIcon");
		spanIcon.innerHTML = this.__config.iconMenuExpanded;
		if(this.__config.iconPosition == "left")
		{
			anchor.insertBefore(spanIcon,anchor.firstChild);
		}
		else
		{
			this.util.addStyleClass(spanIcon,"nsNavContainerPullRight");
			anchor.appendChild(spanIcon);
		}
		var ul = this.util.createElement("ul",null,"nsNavSubNavContainer");
		this.util.addStyleClass(ul,"nsNavNonVisibleIcon");
		li.appendChild(ul);
		this.__createItems(item[this.__config.childField],ul,level + 1);
		item[this.__fieldChildContainer] = ul;
		hasChildren = true;
	}
	else
	{
		if(item["link"])
		{
			anchor.setAttribute("href",item["link"]);
		}
		else 
		{
			anchor.setAttribute("href","javascript:void(0)");
		}
	}
	this.util.addEvent(anchor,"click",this.__menuClickHandler.bind(this,event,item,li,hasChildren));
	if(level > 1)
	{
		this.util.addStyleClass(li,"nsNavigationChildItem");
	}
	if(item["disabled"])
	{
		this.util.addStyleClass(li,"nsNavigationItemDisabled");
	}
	return li;
};

NSNavigation.prototype.__menuClickHandler = function(event,item,li,hasChildren)
{
	event = this.util.getEvent(event);
	if(!hasChildren)
	{
		this.__handleSelectedMenu(item,li);
		if(item["click"])
		{
			if (typeof item["click"] === "string" || item["click"] instanceof String)
			{
				if(this.util.isFunction(item["click"]))
				{
					item["click"] = this.__config.context[item["click"]];
				}
			}
			if(item["click"] && this.util.isFunction(item["click"]))
			{
				item["click"](event);
			}
		}
	}
};

NSNavigation.prototype.__toggleIconClickHandler = function(event)
{
	this.__destroyDynamicItem();
	this.toggleNavigation();
};

NSNavigation.prototype.__parentMenuClickHandler = function(event,item)
{
	if(item && item[this.__fieldElement])
	{
		if(item[this.__fieldIsOpen])
		{
			this.util.removeStyleClass(item[this.__fieldElement],"nsNavItemOpen");
			this.util.removeStyleClass(item[this.__fieldElement],"nsNavItemActive");
			if(item[this.__fieldChildContainer])
			{
				item[this.__fieldChildContainer].style.display = "none";
			}
		}
		else
		{
			this.util.addStyleClass(item[this.__fieldElement],"nsNavItemOpen");
			this.util.addStyleClass(item[this.__fieldElement],"nsNavItemActive");
			if(item[this.__fieldChildContainer])
			{
				item[this.__fieldChildContainer].style.display = "block";	
			}
		}
		item[this.__fieldIsOpen] = !item[this.__fieldIsOpen];
		this.__selectedParentMenuItem = item;
	}
	
};

NSNavigation.prototype.__parentMouseEventHandler = function(event,item,eventType)
{
	event = this.util.getEvent(event);
	//for some reason event.type is coming as load so passing eventType to listener
	switch(eventType)
	{
		case "mouseenter":
			if(item && item[this.__fieldElement] && !this.__isNavOpen)
			{
				this.__createDynamicItem(item);
			}
			//this.util.addStyleClass(item[this.__fieldElement],"nsNavParentHover");
		break;
		case "mouseleave":
			this.__destroyDynamicItem();
			//this.util.removeStyleClass(item[this.__fieldElement],"nsNavParentHover");
		break;
	}
};

NSNavigation.prototype.__resizeContentContainer = function()
{
	if(this.__config.pageContentContainer)
	{
		this.__config.pageContentContainer.style.marginLeft = this.__baseComponent.offsetWidth + "px";	
	}
};

NSNavigation.prototype.__getTopOffset = function()
{
	var offset = 0;
	if(this.__config.elementsBeforeMenu && this.__config.elementsBeforeMenu.length > 0)
	{
		var length = this.__config.elementsBeforeMenu.length;
		for(var count = 0;count < length;count++)
		{
			offset += this.__config.offsetHeight;
		}
	}
	if(!this.__isNavOpen)
	{
		offset += this.__headerItemHeight;
	}
	return offset;
};

NSNavigation.prototype.__createDynamicItem = function(item)
{
	this.__destroyDynamicItem();
	var self = this;
	var createChildren = function(arrItems,parent,level)
	{
		var ul = self.util.createElement("ul",null,"nsNavDynamicSubMenuCont");
		for(var count = 0;count < arrItems.length;count++)
		{
			var item  = arrItems[count];
			var li = self.util.createElement("li",null,"nsNavDynamicMenuItem");
			if(item["cssClass"])
			{
				self.util.addStyleClass(li,item["cssClass"]);
			}
			var anchor = self.util.createElement("a",null);
			li.appendChild(anchor);
			if(item["iconBeforeHtml"])
			{
				var spanIcon = self.util.createElement("span");
				self.util.addStyleClass(spanIcon);
				spanIcon.innerHTML = item["iconBeforeHtml"];
				var icon = spanIcon.firstChild;
				anchor.appendChild(icon);
				anchor.appendChild(document.createTextNode("\u00A0"));
			}
			var spanText = self.util.createElement("span",null,"nsNavDynamicMenuText");
			spanText.appendChild(document.createTextNode(item[self.__config.titleField]));
			anchor.appendChild(spanText);
			if(item["iconAfterHtml"])
			{
				var spanIcon = self.util.createElement("span");
				spanIcon.innerHTML = item["iconAfterHtml"];
				var icon = spanIcon.firstChild;
				anchor.appendChild(icon);
			}
			var hasChildren = false;
			if(item[self.__config.childField] && item[self.__config.childField].length > 0)
			{
				anchor.setAttribute("href","javascript:void(0)");
				var spanIcon = self.util.createElement("span");
				self.util.addStyleClass(spanIcon,"nsNavNonVisibleIcon");
				spanIcon.innerHTML = self.__config.iconMenuExpanded;
				if(self.__config.iconPosition == "left")
				{
					anchor.insertBefore(spanIcon,anchor.firstChild);
				}
				else
				{
					self.util.addStyleClass(spanIcon,"nsNavContainerPullRight");
					anchor.appendChild(spanIcon);
				}
				createChildren(item[self.__config.childField],li,level + 1);
				hasChildren = true;
			}
			else
			{
				if(item["link"])
				{
					anchor.setAttribute("href",item["link"]);
				}
				else 
				{
					anchor.setAttribute("href","javascript:void(0)");
				}
			}
			self.util.addEvent(anchor,"click",self.__menuClickHandler.bind(self,event,item,li,hasChildren));
			if(item["disabled"])
			{
				self.util.addStyleClass(li,"nsNavigationItemDisabled");
			}
			ul.appendChild(li);
		}
		parent.appendChild(ul);
	};
	
	this.__dynamicContainer = this.util.createDiv(this.getID() + "DynamicContainer","nsNavDynamicContainer");
	var spanText = this.util.createElement("span",null,"nsNavDynamicMenuText");
	spanText.appendChild(document.createTextNode(item[this.__config.titleField]));
	this.__dynamicContainer.appendChild(spanText);
	if(item[this.__config.childField] && item[this.__config.childField].length > 0)
	{
		createChildren(item[this.__config.childField],this.__dynamicContainer,1);
	}
	this.__baseComponent.appendChild(this.__dynamicContainer);
	var topOffset = this.__getTopOffset();
	var rect = item[this.__fieldElement].getBoundingClientRect();
	this.__dynamicContainer.style.top = (rect.top + this.__config.collapseTopOffset - topOffset) + "px"; 
	this.__dynamicContainer.style.left = (rect.left + this.__navigationContainer.offsetWidth + this.__config.collapseLeftOffset) + "px";
};

NSNavigation.prototype.__destroyDynamicItem = function()
{
	if(this.__dynamicContainer && this.__dynamicContainer.parentNode)
	{
		this.__dynamicContainer.parentNode.removeChild(this.__dynamicContainer);
		this.__dynamicContainer = null;
	}
};

NSNavigation.prototype.__handleSelectedMenu = function(item,li)
{
	if(!li && item && item[this.__fieldElement])
	{
		li = item[this.__fieldElement];
	}
	if(this.__selectedMenu)
	{
		this.util.removeStyleClass(this.__selectedMenu,"nsNavSelectedMenu");
		this.util.dispatchEvent(this.__baseComponent,NSNavigation.NAVIGATION_MENU_DESELECTED,item,{item:item,menu:li});
		this.__selectedMenu = null;
		this.__selectedMenuItem = null;
	}
	this.util.addStyleClass(li,"nsNavSelectedMenu");
	this.__selectedMenu = li;
	this.__selectedMenuItem = item;
	this.util.dispatchEvent(this.__baseComponent,NSNavigation.NAVIGATION_MENU_SELECTED,item,{item:item,menu:li});
};

NSNavigation.prototype.__resetVariables = function()
{
	this.__selectedParentMenuItem = null;
	this.__selectedMenu = null;
	this.__selectedMenuItem = null;
};

NSNavigation.NAVIGATION_OPEN_START = "navigationOpenStart";
NSNavigation.NAVIGATION_OPEN_END = "navigationOpenEnd";
NSNavigation.NAVIGATION_CLOSE_START = "navigationCloseStart";
NSNavigation.NAVIGATION_CLOSE_END = "navigationCloseEnd";
NSNavigation.NAVIGATION_MENU_SELECTED = "navigationmenuSelected";
NSNavigation.NAVIGATION_MENU_DESELECTED = "navigationMenuDeselected";
