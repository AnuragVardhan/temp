this.__initialize = function()
			{
				this.__tblBody = this.__table.tBodies[0];
				this.__range = {cursor:null,start:null,topLeft:null,bottomRight:null};
				if(!this.__tblMouseDownRef)
				{
					this.__tblMouseDownRef = this.__tblMouseDownHandler.bind(this);
					this.util.addEvent(this.__table,"mousedown", this.__tblMouseDownRef);
				}
				if(!this.__documentMouseDownRef)
				{
					this.__documentMouseDownRef = this.__documentMouseDownHandler.bind(this);
					this.util.addEvent(document,"mousedown", this.__documentMouseDownRef);
				}
				if(!this.__tblKeyEventRef)
				{
					this.__tblKeyEventRef = this.__tblKeyEventHandler.bind(this);
					this.util.addEvent(document,"keypress", this.__tblKeyEventRef);
					this.util.addEvent(document,"keyup", this.__tblKeyEventRef);
					this.util.addEvent(document,"keydown", this.__tblKeyEventRef);
				}
			};
			
			this.__tblMouseDownHandler = function(event)
			{
				var event = this.util.getEvent(event);
				var target = this.util.getTarget(event);
				var cell = this.__closestCell(target);
		        if(cell)
		        {
		        	var position = this.__getCellPosition(cell);
			        this.__selectCell(position,event.shiftKey);
			        event.preventDefault();
			        this.__refreshCells();
		        }
		        if(!this.__documentMouseUpRef)
				{
					this.__documentMouseUpRef = this.__documentMouseUpHandler.bind(this);
					this.util.addEvent(document,"mouseup", this.__documentMouseUpRef);
				}
		        if(!this.__tblMouseMoveRef)
				{
		        	this.__tblMouseMoveRef = this.__movingHandler.bind(this);
					this.util.addEvent(this.__table,"mousemove", this.__tblMouseMoveRef);
				}
			};
			
			this.__documentMouseDownHandler = function(event)
			{
				var event = this.util.getEvent(event);
				var target = this.util.getTarget(event);
				if(this.__setFocus(this.__table === target || (this.__table.compareDocumentPosition(target) & Node.DOCUMENT_POSITION_CONTAINED_BY)))
				{
			    	//scope.$apply();
			    }
			};
			
			this.__documentMouseUpHandler = function(event)
			{
				if(this.__tblMouseMoveRef)
				{
					this.util.removeEvent(this.__table,"mousemove",this.__tblMouseMoveRef);
					this.__tblMouseMoveRef = null;
				}
			};
			
			this.__tblMouseMoveHandler = function(event)
			{
				this.__movingHandler(event);
			};
			
			this.__tblKeyEventHandler = function(event)
			{
				if(this.__hasFocus)
				{
					var event = this.util.getEvent(event);
					var target = this.util.getTarget(event);
					if(!this.__isKeyStrokeValid(target,this.__table))
					{
						if(event.type == "keydown" && this.__KeyMoveHandler(event))
						{
							this.__refreshCells();
							event.stopImmediatePropagation();
							event.preventDefault();
					    }
					}
				}
			};
			
			this.__movingHandler = function(event)
			{
				var event = this.util.getEvent(event);
				var target = this.util.getTarget(event);
				var cell = this.__closestCell(target);
		        if(cell)
		        {
		        	this.__selectCell(this.__getCellPosition(cell),true);
		        	this.__refreshCells();
		        }
			};
			
			this.__focus = function()
			{
			  if(this.__table.ownerDocument.activeElement)
			  {
				 this.__table.ownerDocument.activeElement.blur();
			  }
			  this.__hasFocus = true;
			};
			
			this.__blur = function()
			{
				this.__hasFocus = false;
			};
			
			this.__setFocus = function(enableFocus)
			{
			  	if(this.__hasFocus != enableFocus)
			  	{
				    if(enableFocus)
				    {
				      	this.__focus();
				    }
				    else
				    {
				      	this.__blur();
				    }
				    return true;
			  	}
			};
			
			this.__selectCell = function(position,isExpanding)
			{
				 if(position)
				 {
					 this.__focus();
					 var size = this.__getTotalSize();
					 if(size && size.row && size.col)
					 {
						 if(isExpanding && typeof(isExpanding) == "object")
						 {
							 isExpanding = this.__getBoundCellPosition(isExpanding,size);
						 }
						 this.__setCurrentRange(this.__getBoundCellPosition(position,size),isExpanding);
					 }
				 }
			};
			
			this.__refreshCells = function()
			{
				this.__drawCursorClass("cursor",this.__range.cursor);
		        var position = {topLeft:this.__range.topLeft,bottomRight:this.__range.bottomRight};
		        this.__drawAreaClass("area",position);
			};
			
			this.__drawAreaClass = function(cssClass,position)
			{
				var cell = null;
				var row = null;
				var rowIndex = null;
			  	var colIndex = null;
			  	var processTable = function(arrElement,arrClass)
				{
					arrElement.forEach(function(element) 
					{
						arrClass.forEach(function(cssClass) 
						{
							self.util.removeStyleClass(element,cssClass);
						});
					});
				};
				var addStyleClass = function(element,cssClass)
				{
					self.util.addStyleClass(element,cssClass);
				};
				processTable(this.__table.querySelectorAll("tbody>tr>td." + cssClass),[cssClass,cssClass + "-l",cssClass + "-r"]);
				processTable(this.__table.querySelectorAll("colgroup>col." + cssClass),[cssClass,cssClass + "-l",cssClass + "-r"]);
				processTable(this.__table.querySelectorAll("tbody>tr." + cssClass),[cssClass,cssClass + "-t",cssClass + "-b"]);
			  	if(position && position.topLeft)
			  	{
				    for(rowIndex = position.topLeft.row,row = this.__tblBody.rows[rowIndex];rowIndex <= position.bottomRight.row && row;rowIndex++,row= this.__tblBody.rows[rowIndex])
				    {
				    	addStyleClass(row,cssClass);
				      	if(rowIndex == position.topLeft.row)
				      	{
				      		addStyleClass(row,cssClass + "-t");
				      	}
				      	if(rowIndex == position.bottomRight.row)
				      	{
				      		addStyleClass(row,cssClass + "-b");
				      	}
				      	for(colIndex = position.topLeft.col,cell = row.cells[colIndex];colIndex <= position.bottomRight.col && cell;colIndex++,cell = row.cells[colIndex])
				      	{
				      		addStyleClass(cell,cssClass);
				        	if(colIndex == position.topLeft.col)
				        	{
				        		addStyleClass(cell,cssClass + "-l");
				        	}
				        	if(colIndex == position.bottomRight.col)
				        	{
				        		addStyleClass(cell,cssClass + "-r");
				        	}
				      	}
				    }
				    for(colIndex = position.topLeft.col;colIndex <= position.bottomRight.col;colIndex++)
				    {
				    	cell = this.__getColGroup(colIndex);
				      	addStyleClass(cell,cssClass);
				      	if(colIndex == position.topLeft.col)
			        	{
			        		addStyleClass(cell,cssClass + "-l");
			        	}
			        	if(colIndex == position.bottomRight.col)
			        	{
			        		addStyleClass(cell,cssClass + "-r");
			        	}
				    }
				 }
			};
			
			this.__drawCursorClass = function(cssClass,position)
			{
				var self = this;
				var processTable = function(arrElement)
				{
					arrElement.forEach(function(element) 
					{
						self.util.removeStyleClass(element,cssClass);
					});
				};
				processTable(this.__table.querySelectorAll("tbody>tr>td." + cssClass));
				processTable(this.__table.querySelectorAll("colgroup>col." + cssClass));
				processTable(this.__table.querySelectorAll("tbody>tr." + cssClass));
			  	if(position)
			  	{
			    	var cell = this.__getCell(position);
			    	if(cell)
			    	{
			    		this.util.addStyleClass(cell,cssClass);
			    		this.util.addStyleClass(cell.parentNode,cssClass);
			    	}
			    	this.util.addStyleClass(this.__getColGroup(position.col),cssClass);
			  	}
			};
			
			this.__KeyMoveHandler = function(event)
			{
				var event = this.util.getEvent(event);
			  	if(event.ctrlKey || event.metaKey || event.altKey) 
			  	{
			  		return;
			  	}
			  	var shiftKey = event.shiftKey;
			  	var keyCode = this.util.KEYCODE;
			  	switch(event.keyCode)
			  	{
				  case keyCode.UP:
				    this.__selectMove({row:-1,col:0},shiftKey);
				    return true;
				  case keyCode.DOWN:
				    this.__selectMove({row:+1,col:0},shiftKey);
				    return true;
				  case keyCode.LEFT:
				    this.__selectMove({row:0,col:-1},shiftKey);
				    return true;
				  case keyCode.RIGHT:
				    this.__selectMove({row:0,col:+1},shiftKey);
				    return true;
				  case keyCode.TAB:
				    this.__selectMove({row:0,col:shiftKey ? -1:+1});
				    return true;
				  case keyCode.ESC:
					this.__deSelectCurrentRange();
			    	return true;
			  	}
			};
			
			this.__isKeyStrokeValid = function(target,validElement)
			{
			  	while(target)
			  	{
			    	if(target.tagName == "INPUT" || target.tagName == "TEXTAREA" || target.contentEditable == "true" || target.tagName == "SELECT")
			    	{
			    		return true;	
			    	}
			    	if(target == validElement)
			    	{
			    		return false;
			    	}
			    	target = target.parentNode;
			  	}
			  	return false;
			};
			
			this.__selectMove = function(move,isExpanding)
			{
			  	var cursor = this.__range.cursor || {};
			  	var size = this.__getTotalSize();
			  	if(!size||!size.row||!size.col)
			  	{
			      	return;
			  	}
			  	var position = this.__getBoundCellPosition({row:cursor.row + (move.row || 0),col:cursor.col + (move.col||0)},size);
			  	if(isExpanding && typeof(isExpanding) == "object")
			  	{
			  		isExpanding = this.__getBoundCellPosition(isExpanding,size);
			  	}
			  	this.__selectCell(position,isExpanding);
			};
			
			this.__getColGroup = function(colIndex)
			{
			  	if(!this.__colgroup)
			  	{
			    	this.__colgroup = this.__getElementsSnapshot(this.__table,"colgroup")[0];
			    	if(!this.__colgroup)
			    	{
			      		this.__colgroup = this.__table.ownerDocument.createElement("colgroup");
			      		this.__table.appendChild(this.__colgroup);
			    	}
			  	}
			  	while(!this.__colgroup.children[colIndex])
			  	{
			    	var col = this.__table.ownerDocument.createElement("col");
			    	this.__colgroup.appendChild(col);
			  	}
			  	return this.__colgroup.children[colIndex];
			};
			
			this.__closestCell = function(target)
			{
			  	while(target.parentNode)
			  	{
			    	if(target.parentNode.parentNode == this.__tblBody)
			    	{
			    		return target;	
			    	}
			    	target = target.parentNode;
			  	}
			  	return null;
			};
			
			this.__getCellPosition = function(cell)
			{
				return {row:cell.parentNode.sectionRowIndex,col:cell.cellIndex};
			};
			
			this.__getTotalSize = function()
			{
				 if(this.__tblBody)
				 {
				    var rowLength = this.__tblBody.rows.length;
				    if(rowLength)
				    {
				      	return {row:rowLength,col:this.__tblBody.rows[0].cells.length};
				    }
				 }
				 return null;
			};
				
			this.__getBoundCellPosition = function(cellPosition,totalSize)
			{
				 return {
				    col: ((isNaN(cellPosition.col)|| cellPosition.col >= totalSize.col) ? 0 : ((cellPosition.col<0) ? totalSize.col - 1 : cellPosition.col)),
				    row: ((isNaN(cellPosition.row)|| cellPosition.row >= totalSize.row) ? 0 : ((cellPosition.row<0) ? totalSize.row-1 : cellPosition.row))
				 };
			};
			
			this.__getCell = function(position)
			{
			  	if(position && this.__tblBody)
			  	{
			  		var row = this.__tblBody.rows[position.row];
					if(row && row.cells)
					{
						return row.cells[position.col];
					}
			  	}
			  	return null;
			};
			//range selection methods
			this.__setCurrentRange = function(position,isExpanding)
			{
			  	this.__range.cursor = this.__hasPositionChanged(this.__range.cursor,{row:position.row,col:position.col});
			  	if(typeof(isExpanding) == "object")
			  	{
			  		this.__range.start = this.__hasPositionChanged(this.__range.start,{row:isExpanding.row,col:isExpanding.col});
			  	}
			  	if(!isExpanding || !this.__range.start)
			  	{
			  		this.__range.start = this.__range.topLeft = this.__range.bottomRight = this.__range.cursor;
			  	}
			  	else
			  	{
			  		this.__range.topLeft = this.__hasPositionChanged(this.__range.topLeft,{row:Math.min(this.__range.start.row,this.__range.cursor.row),col:Math.min(this.__range.start.col,this.__range.cursor.col)});
			  		this.__range.bottomRight = this.__hasPositionChanged(this.__range.bottomRight,{row:Math.max(this.__range.start.row,this.__range.cursor.row),col:Math.max(this.__range.start.col,this.__range.cursor.col)});
			 	}
			};
			
			this.__deSelectCurrentRange = function()
			{
				this.__range.cursor = this.__range.start = this.__range.topLeft = this.__range.bottomRight = undefined;
			};
			
			this.__hasPositionChanged = function(oldPosition,newPosition)
			{
			  	return (!oldPosition || oldPosition.row != newPosition.row || oldPosition.col != newPosition.col) ? newPosition : oldPosition;
			};
			
			this.__isValidRange = function(position)
			{
			  	return (this.__range.cursor && this.__range.topLeft.row <= position.row && position.row <= this.__range.bottomRight.row && this.__range.topLeft.col <= position.col && position.col <= this.__range.bottomRight.col);
			};
			//end of range selection methods
			this.__getElementsSnapshot = function(element,type)
			{
				var xPathResult = element.ownerDocument.evaluate(type,element,null,XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,null);
				var length = xPathResult.snapshotLength;
				var arrReturn = new Array(length);
				for(var count = 0;count < length; count++)
				{
					arrReturn[count] = xPathResult.snapshotItem(count);
				}
				return arrReturn;
			};
