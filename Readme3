package com.org;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class FileMerger 
{
	private static final char LINE_FEED = '\n';
    private static final char CARRIAGE_RETURN = '\r';
    private static final char SPACE = ' ';
    private static final char TAB = '\t';
    
    private String currentScript = "";
    private StringBuffer outputBuffer;
    private int pos;
    private char ch;
    private char lastAppend;
    private boolean endReached;
    private boolean contentAppendedAfterLastIdentifier = true;
    
    public void compressFiles(String[] arrInputFile,String outputFile) throws Exception
	{
    	if(arrInputFile != null && arrInputFile.length > 0 && outputFile != null)
		{
    		StringBuilder outputScript = new StringBuilder();
    		for (String filename : arrInputFile)
 		    {
 		    	String inputScript = readFile(filename);
 		    	inputScript = compressScript(inputScript);
 		    	//inputScript = inputScript.replaceAll("\\r", "").replaceAll("\\n", "");
 		    	outputScript.append(inputScript);
 		    }
    		FileWriter outputFileWriter = new FileWriter(outputFile);
		    outputFileWriter.write(outputScript.toString());
		    outputFileWriter.close();
		}
	}
    
    public String readFile(String fileName) 
    {    
        File file = new File(fileName);    
        char[] buffer = null;    
        try 
        {    
            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));    
            buffer = new char[(int)file.length()];    
            int i = 0;    
            int c = bufferedReader.read();    
            while (c != -1) 
            {    
                buffer[i++] = (char)c;    
                c = bufferedReader.read();    
            }    
        } 
        catch (IOException e) 
        {    
            e.printStackTrace();    
        }    
        return new String(buffer);    
    }
    
    public String compressScript(String script) 
    {
    	currentScript = script;
        outputBuffer = new StringBuffer(currentScript.length());
        nextChar();

        while (!endReached) 
        {
            if (Character.isJavaIdentifierStart(ch)) 
            {
                renderIdentifier();
            } 
            else if (ch == ' ') 
            {
                skipWhiteSpace();
            } 
            else if (isWhitespace()) 
            {
                // Compress whitespace
                skipWhiteSpace();
            } 
            else if ((ch == '"') || (ch == '\'')) 
            {
                // Handle strings
                renderString();
            } 
            else if (ch == '/') 
            {
                // Handle comments
                nextChar();
                if (ch == '/') 
                {
                    nextChar();
                    skipLineComment();
                } else if (ch == '*') 
                {
                    nextChar();
                    skipBlockComment();
                } 
                else 
                {
                    append('/');
                }
            } 
            else 
            {
                append(ch);
                nextChar();
            }
            
        }
        currentScript = "";
        pos = 0;
        ch = '\u0000';
        lastAppend = '\u0000';
        endReached = false;
        contentAppendedAfterLastIdentifier = true;
        return outputBuffer.toString();
    }
    
    private void append(char ch) 
    {
        lastAppend = ch;
        outputBuffer.append(ch);
        contentAppendedAfterLastIdentifier = true;
    }
    
    private boolean isWhitespace() 
    {
        return ch == CARRIAGE_RETURN || ch == SPACE || ch == TAB || ch == LINE_FEED;        
    }
    
    private void nextChar() 
    {
        if (!endReached) 
        {
            if (pos < currentScript.length()) 
            {
                ch = currentScript.charAt(pos++);
            } else 
            {
                endReached = true;
                ch = 0;
            }
        }
    }
    
    private void renderIdentifier() 
    {
        if (!contentAppendedAfterLastIdentifier)
        {
            append(SPACE);
        }
        append(ch);
        nextChar();
        while (Character.isJavaIdentifierPart(ch)) 
        {
            append(ch);
            nextChar();
        }
        contentAppendedAfterLastIdentifier = false;
    }
    
    private void renderString() 
    {
        char startCh = ch; // Save quote char
        append(ch);
        nextChar();
        while (true) 
        {
            if ((ch == LINE_FEED) || (ch == CARRIAGE_RETURN) || (endReached)) 
            {
                // JavaScript error: string not terminated
                return;
            } 
            else 
            {
                if (ch == '\\') 
                {
                    append(ch);
                    nextChar();
                    if ((ch == LINE_FEED) || (ch == CARRIAGE_RETURN) || (endReached)) 
                    {
                        // JavaScript error: string not terminated
                        return;
                    }
                    append(ch);
                    nextChar();
                } 
                else 
                {
                    append(ch);
                    if (ch == startCh) 
                    {
                        nextChar();
                        return;
                    }
                    nextChar();
                }
            }
        }
    }
    
    private void skipLineComment() 
    {
        while ((ch != CARRIAGE_RETURN) && (ch != LINE_FEED)) 
        {
            if (endReached) 
            {
                return;
            }
            nextChar();
        }
    }

    private void skipBlockComment() 
    {
        while (true) 
        {
            if (endReached) 
            {
                return;
            }
            if (ch == '*') 
            {
                nextChar();
                if (ch == '/') 
                {
                    nextChar();
                    return;
                }
            } 
            else
            {
                nextChar();
            }
        }
    }
    
    private void renderNewLine() 
    {
        if (lastAppend != '\n' && lastAppend != '\r') 
        {
            //append('\n');
        }
    }
    
    private void skipWhiteSpace() 
    {
        if (ch == LINE_FEED || ch == CARRIAGE_RETURN) 
        {
            renderNewLine();
        } 
        else 
        {
            append(ch);
        }
        nextChar();
        while (ch == LINE_FEED || ch == CARRIAGE_RETURN || ch == SPACE || ch == TAB) 
        {
            if (ch == LINE_FEED || ch == CARRIAGE_RETURN) 
            {
                renderNewLine();
            }
            nextChar();
        }
    }
    
}
