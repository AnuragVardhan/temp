 [draggable] {
  -moz-user-select: none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  user-select: none;
  /* Required to make elements draggable in old WebKit */
  -khtml-user-drag: element;
  -webkit-user-drag: element;
}
.over {
  border: 2px dashed #000;
}
var divDashboard = document.getElementById("divDashboard");
			for(var count = 0;count < divDashboard.children.length;count++)
			{
				var div = divDashboard.children[count];
				div.setAttribute("draggable",true);
				div.addEventListener('dragstart', handleDragStart, false);
				div.addEventListener('dragenter', handleDragEnter, false);
				div.addEventListener('dragover', handleDragOver, false);
				div.addEventListener('dragleave', handleDragLeave, false);
				div.addEventListener('drop', handleDrop, false);
				div.addEventListener('dragend', handleDragEnd, false);
				
			}
			
var dragSrcEl = null;
		function handleDragStart(e) {
			  this.style.opacity = '0.4';  // this / e.target is the source node.
			  dragSrcEl = this;

			  e.dataTransfer.effectAllowed = 'move';
			  e.dataTransfer.setData('text/html', this.innerHTML);
			}

			function handleDragOver(e) {
			  if (e.preventDefault) {
			    e.preventDefault(); // Necessary. Allows us to drop.
			  }

			  e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.

			  return false;
			}

			function handleDragEnter(e) {
			  // this / e.target is the current hover target.
			  this.classList.add('over');
			}

			function handleDragLeave(e) {
			  this.classList.remove('over');  // this / e.target is previous target element.
			}
			function handleDrop(e) {
				  // this / e.target is current target element.

				  if (e.stopPropagation) {
				    e.stopPropagation(); // stops the browser from redirecting.
				  }
				  if (dragSrcEl != this) {
					    // Set the source column's HTML to the HTML of the column we dropped on.
					  swapElements(dragSrcEl,this);
					  dragSrcEl.style.opacity = "";
					  }
				  
				  // See the section on the DataTransfer object.
					dragSrcEl = null;
				  return false;
				}

				function handleDragEnd(e) {
				  // this/e.target is the source node.
					var divDashboard = document.getElementById("divDashboard");
					for(var count = 0;count < divDashboard.children.length;count++)
					{
						var div = divDashboard.children[count];
						div.classList.remove('over');
					}
				}
				function swapElements(obj1, obj2) {
				    // save the location of obj2
				    var parent2 = obj2.parentNode;
				    var next2 = obj2.nextSibling;
				    // special case for obj1 is the next sibling of obj2
				    if (next2 === obj1) {
				        // just put obj1 before obj2
				        parent2.insertBefore(obj1, obj2);
				    } else {
				        // insert obj2 right before obj1
				        obj1.parentNode.insertBefore(obj2, obj1);

				        // now insert obj1 where obj2 was
				        if (next2) {
				            // if there was an element after obj2, then insert obj1 right before that
				            parent2.insertBefore(obj1, next2);
				        } else {
				            // otherwise, just append as last child
				            parent2.appendChild(obj1);
				        }
				    }
				}
