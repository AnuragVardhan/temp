this.addSVG = function(parent,id,className,width,height,fromX,fromY,toX,toY,disableEvents) 
	{
		var svg = this.createSVG(id,className,width,height,fromX,fromY,toX,toY,disableEvents);
		if(parent)
		{
			parent.appendChild(svg);
		}
		return svg;
	};
	
	this.symbolExists = function(id)
	{
		var svg = this.getMainSVG();
		var retValue = (svg.getElementById(id)) ? true : false;
		return retValue;
	};
	
	this.addSymbol = function(id,viewBox,preserveAspectRatio)
	{
		var svg = this.getMainSVG();
		var symbol = this.createSymbol(id,viewBox,preserveAspectRatio);
		svg.appendChild(symbol);
		return symbol;
	};
	
	this.addUse = function(parent,id,className,href,width,height,x,y,transform)
	{
		var use = this.createUse(id,className,href,width,height,x,y,transform);
		if(parent)
		{
			parent.appendChild(use);
			//parent.innerHTML = use.outerHTML;
		}
		return use;
	};
	
	this.addPath = function(id,pathString,viewPort) 
	{
		var path = this.createPath(id + "path",pathString,null);
		this.addElementInSymbol(id,viewPort,path);
	};
	
	this.addCircle = function(id,centerX,centerY,radius,className,viewPort) 
	{
		var circle = this.createCircle(id,centerX,centerY,radius,className);
		this.addElementInSymbol(id,viewPort,circle);
	};
	
	this.addPolygon = function(id,points,className,viewPort) 
	{
		 var polygon = this.createPolygon(id,points,className);
		 this.addElementInSymbol(id,viewPort,polygon);
	};
	
	this.addLine = function(parent,id,xFrom,yFrom,xTo,yTo,className,viewPort) 
	{
		 var line = this.createLine(id,xFrom,yFrom,xTo,yTo,className);
		 this.addElementInSymbol(id,viewPort,line);
	};
	
	this.createSVG = function(id,className,width,height,fromX,fromY,toX,toY,disableEvents)
	{
		var svg = document.createElementNS(this.namespace, "svg");
		svg.setAttribute("xmlns", this.namespace);
		svg.setAttributeNS(this.xmlns, "xmlns:xlink", this.xlink);
		svg.setAttribute("version", this.version);
		if(id)
		{
			svg.setAttribute("id",id);
		}
		if(className)
		{
			 this.util.addStyleClass(svg,className);
		}
		if(this.util.isNumber(width))
		{
			svg.setAttribute("width", width);
		}
		if(this.util.isNumber(height))
		{
			svg.setAttribute("height", height);
		}
		if(this.util.isNumber(fromX) && this.util.isNumber(fromY) && this.util.isNumber(toX) && this.util.isNumber(toY) && toX > 0 && toY > 0)
		{
			var viewBox = fromX + " " + fromY + " " + toX + " " + toY;
			svg.setAttribute("viewBox", viewBox);
		}
		if(disableEvents)
		{
			svg.style.pointerEvents = "none";
		}
		return svg;
	};
	
	this.createSymbol = function(id,viewBox,preserveAspectRatio) 
	{
		 var symbol = document.createElementNS(this.namespace,"symbol");
		 if(id)
		 {
			 symbol.setAttributeNS(null,"id",id);
		 }
		 if(viewBox)
		 {
			 symbol.setAttribute("viewBox", viewBox);
		 }
		 if(preserveAspectRatio)
		 {
			 symbol.setAttribute("preserveAspectRatio", preserveAspectRatio);
		 }
		 return symbol;
	};
	
	this.createUse = function(id,className,href,width,height,x,y,transform)
	{
		var use = document.createElementNS(this.namespace, "use");
		if(id)
		{
			use.setAttributeNS(null,"id",id);
		}
		if(className)
		{
			 this.util.addStyleClass(use,className);
		}
		if(href)
		{
			use.setAttributeNS(this.xlink,"href",href);
		}
		if(this.util.isNumber(width))
		{
			use.setAttribute("width", width);
		}
		if(this.util.isNumber(height))
		{
			use.setAttribute("height", height);
		}
		if(this.util.isNumber(x))
		{
			use.setAttribute("x", x);
		}
		if(this.util.isNumber(y))
		{
			use.setAttribute("y", y);
		}
		if(transform)
		{
			use.setAttribute("transform",transform);
		}
		return use;
	};
	
	this.createLine = function(id,xFrom,yFrom,xTo,yTo,className) 
	{
		 var line = document.createElementNS(this.namespace,"line");
		 if(id)
		 {
			 line.setAttributeNS(null,"id",id);
		 }
		 line.setAttributeNS(null,"x1",xFrom);
		 line.setAttributeNS(null,"y1",yFrom);
		 line.setAttributeNS(null,"x2",xTo);
		 line.setAttributeNS(null,"y2",yTo);
		 if(className)
		 {
			 this.util.addStyleClass(line,className);
		 }
		 return line;
	};
	
	this.createCircle = function(id,centerX,centerY,radius,className) 
	{
		 var circle = document.createElementNS(this.namespace,"circle");
		 if(id)
		 {
			 circle.setAttributeNS(null,"id",id);
		 }
		 circle.setAttributeNS(null,"cx",centerX);
		 circle.setAttributeNS(null,"cy",centerY);
		 circle.setAttributeNS(null,"r",radius);
		 if(className)
		 {
			 this.util.addStyleClass(circle,className);
		 }
		 return circle;
	};
	
	this.createPolygon = function(id,points,className) 
	{
		 var polygon = document.createElementNS(this.namespace,"polygon");
		 if(id)
		 {
			 polygon.setAttributeNS(null,"id",id);
		 }
		 polygon.setAttribute("points",points);
		 if(className)
		 {
			 this.util.addStyleClass(polygon,className);
		 }
		 return polygon;
	};
	
	this.createPath = function(id,pathString,className) 
	{
		 var path = document.createElementNS (this.namespace, "path");
		 if(id)
		 {
			 path.setAttribute("id", id);
		 }
		 path.setAttribute("d", pathString);
		 if(className)
		 {
			 this.util.addStyleClass(path,className);
		 }
		 return path;
	};
	
	this.createGroup = function(id) 
	{
		 var group = document.createElementNS (this.namespace, "g");
		 if(id)
		 {
			 group.setAttribute("id", id);
		 }
		 return group;
	};
	
	this.changeUseHref = function(use,href) 
	{
		 use = this.util.getElement(use);
		 if(use)
		 {
			use.setAttributeNS(this.xlink,"href",href);
			return true;
		 }
		 return false;
	};
