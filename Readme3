"use strict";
var nsGrid = Object.create(nsContainerBase);

nsGrid.initializeComponent = function() 
{
	this.base.initializeComponent();
	this.GRID_TYPE_HIERARCHICAL = "hierarchical";
	this.GRID_TYPE_GROUP = "group";
	this.GRID_TYPE_NORMAL = "normal";
	this.ITEM_UNSELECTED = "itemUnselected";
	this.ITEM_SELECTED = "itemSelected";
	this.ITEM_UNSELECTED = "itemUnselected";
	this.PAGINATION_TYPE_SCROLL = "scroll";
	this.PAGINATION_TYPE_PAGES = "pages";
	this.PAGINATION_MODE_AUTO = "auto";
	this.PAGINATION_MODE_MANUAL = "manual";
	this.RESPONSIVE_MODE_STACK = "stack";
	this.RESPONSIVE_MODE_COLUMN_TOGGLE = "columnToggle";
	//this.initializeDOM(ns.NSDATAGRID_CSS);
	
	this.__OUTER_CONTAINER_ID = "divDataSet";
	this.__TITLE_CONTAINER_ID = "divTitleBar";
	this.__TABLE_LEFT_HEADER_CONTAINER_ID = "divLeftHeaderContainer";
	this.__TABLE_LEFT_HEADER_ID = "tblLeftHeader";
	this.__TABLE_LEFT_BODY_CONTAINER_ID = "divLeftBodyContainer";
	this.__TABLE_LEFT_BODY_ID = "tblLeftBody";
	this.__TABLE_CENTER_HEADER_CONTAINER_ID = "divCenterHeaderContainer";
	this.__TABLE_CENTER_HEADER_ID = "tblCenterHeader";
	this.__TABLE_CENTER_BODY_CONTAINER_ID = "divCenterBodyContainer";
	this.__TABLE_CENTER_BODY_ID = "tblCenterBody";
	this.__TABLE_RIGHT_HEADER_CONTAINER_ID = "divRightHeaderContainer";
	this.__TABLE_RIGHT_HEADER_ID = "tblRightHeader";
	this.__TABLE_RIGHT_BODY_CONTAINER_ID = "divRightBodyContainer";
	this.__TABLE_RIGHT_BODY_ID = "tblRightBody";
	this.__PAGINATION_CONTROL_ID = "divPagination";
	
	this.__CLASS_TABLE = "nsDataGridTable";
	this.__CLASS_TITLEBAR = "nsDataGridTitleBar";
	this.__CLASS_TABLE_HEADER_CELL = "nsDataGridHeader";
	this.__CLASS_BODY_CONTAINER = "nsDataGridBodyContainer";
	this.__CLASS_ODD_ROW = "nsDataGridOddRow";
	this.__CLASS_EVEN_ROW = "nsDataGridEvenRow";
	this.__CLASS_GROUP_CELL = "nsGroupCell";
	this.__CLASS_CELL_CHILD = "nsCellChild";
	this.__CLASS_SORTING_ASC = "nsSortedAsc";
	this.__CLASS_SORTING_DESC = "nsSortedDesc";
	
	this.__DEFAULT_COLUMN_WIDTH = 100;
	this.__MIN_DRAG_OFFSET = 100;
	this.__INFINITE_SCROLL_PADDING = 40;
	this.__INFINITE_SCROLL_INITIAL_LOAD = 250;
	
	this.__columns = [];
	this.__selectedItems = [];
	
	this.__title = null;
	this.__type = this.GRID_TYPE_NORMAL;
	this.__dataSource = [];
	this.__enableHierarchical = false;
	this.__enableGrouping = false;
	this.__enableMouseHover = false;
	this.__enableMultiSelection = false;
	this.__customScrollerRequired = false;
	this.__columnResizable = false;
	this.__columnDraggable = false;
	this.__enableContextMenu = false;
	this.__childField = "children";
	this.__groupByField = null;
	this.__columnMinWidth = 50;
	this.__pageSize = 50;
	this.__rowHeight = -1;
	this.__noDataMessage = "No matching records found";
	//stores initial Column Count 
	this.__initialColumnCount = 0;
	this.__initialTableWidth = 0;
	this.__enablePagination = false;
	this.__enableVirtualScroll = false;
	this.__enableServerCall = false;
	this.__enableExport = false;
	this.__enableResponsive = false;
	this.__isPaginationTypeScroll = true;
	this.__isPaginationModeAuto = true;
	
	this.__isResponsiveModeStack = true;
	this.__isResponsiveModeColumnToggle = false;
	this.__totalRecords = 0;
	this.__contextMenuProvider = null;
	this.__contextMenuSetting = null;
	this.__responsiveMode = this.RESPONSIVE_MODE_STACK;
	this.__fetchRecordCallBack = null;
	//for Virtual Scroll
	this.__virtualRowHeight = 0;
	this.__rowCount = 0;
	this.__leftFixedColumn = 0;
	this.__rightFixedColumn = 0;
	this.__scrollOffsetPosition = 0;
	this.__lastScrollPosition = 0;
	
	this.__divOuterContainer = null;
	this.__divTableWrapper = null;
	this.__divCenterTableContainer = null;
	this.__divCenterTableHeaderContainer = null;
	this.__tblCenterHeader = null;
	this.__divCenterTableBodyContainer = null;
	this.__tblCenterBody = null;
	this.__tblCenterBodyBody = null;
	//stores whether mouse is on GridLine
	this.__onGridLine = false;
	this.__addRemoveRowCallInternal = false;
	//cell which is being resized
	this.__resizingHeader = null;
	this.__resizingHeaderCell = null;
	this.__resizingBodyCell = null;
	this.__resizeHandler = null;
	
	//object for column dragging
	this.__objColumnDrag = null;
	this.__bodyScrollPos = 0;
	//for Page type Pagination
	this.__nsPagination = null;
	//for Infinite Scroll Pagination
	this.__nsScrollEnableDisable = null;
	this.__processArrayAsync = null;
	this.__rowsRendered = false;
	this.__stopScroll = false;
	this.__lastScrollPos = [0,0];
	this.__filteredColumn = [];
	
	this.__loader = null;
	this.__scroller = null;
	this.__groupCollection = null;
	this.__groupSource = null;
	this.__contextMenu = null;
	this.__exportMenu = null;
	this.__exportFileName = null;
	this.__exportMenuDataSource = [{id: 0,title: 'XLS',iconHTML: '<i class="fa fa-file-excel-o fa-lg"></i>'},
	                               {id: 1,title: 'CSV',iconHTML: '<i class="fa fa-file-excel-o fa-lg"></i>',separatorBelow:true},
	                               {id: 2,title: 'DOC',iconHTML: '<i class="fa fa-file-word-o fa-lg"></i>'},
	                               {id: 3,title: 'TEXT',iconHTML: '<i class="fa fa-file-text-o fa-lg"></i>',separatorBelow:true},
	                               {id: 4,title: 'XML',iconHTML: '<i class="fa fa-file-code-o fa-lg"></i>'},
	                               {id: 5,title: 'JSON',iconHTML: '<i class="fa fa-file-o" fa-lg></i>',separatorBelow:true},
	                               {id: 6,title: 'PDF',iconHTML: '<i class="fa fa-file-pdf-o fa-lg"></i>'},
	                               {id: 7,title: 'IMAGE',iconHTML: '<i class="fa fa-file-picture-o fa-lg"></i>',separatorBelow:true},
	                               {id: 8,title: 'XLSX',iconHTML: '<i class="fa fa-file-excel-o fa-lg"></i>'},
	                               {id: 9,title: 'DOCX',iconHTML: '<i class="fa fa-file-word-o fa-lg"></i>'}];
	this.__arrWrapper = null;
	this.__arrInternalSource = null;
	this.__arrFlatHierarchicalSource = [];
	this.__fieldRowHtml = this.getID() + "_row";
	this.__fieldColIndex = this.getID() + "_col_index";
	this.__fieldIndex = this.getID() + "_row_index";
	this.__fieldRow = this.getID() + "_row";
	this.__fieldRowLevel = this.getID() + "_row_level";
	this.__fieldRowVisible = this.getID() + "_row_visible";
	this.__fieldParentIndex = this.getID() + "_parent_index";
	this.__fieldHasChild = this.getID() + "_row_hasChild";
	this.__fieldHasParent = this.getID() + "_row_hasParent";
	this.__fieldIsCollapsed = this.getID() + "_row_isCollapsed";
	this.__fieldRowArrow = this.getID() + "row_arrow";
	
	this.__headerClickRef = null;
	this.__headerMouseOverRef = null;
	this.__headerMouseOutRef = null;
	this.__headerMouseMoveRef = null;
	this.__headerMouseDownRef = null;
	this.__doResizeRef = null;
	this.__endResizeRef = null;
	this.__synchronizeTablesRef = null;
	this.__dragColumnMoveRef = null;
	this.__dragColumnEndRef = null;
	this.__bodyScrollRef = null;
	
	this.__objGrid = null;
	this.__arrFixedHeaderLeftCells = [];
	this.__arrFixedHeaderRightCells = [];
	this.__arrFixedBodyLeftCells = [];
	this.__arrFixedBodyRightCells = [];
};

nsGrid.setComponentProperties = function() 
{
	this.base.setComponentProperties();
	if(this.hasAttribute("nsTitle"))
	{
		this.__title = this.getAttribute("nsTitle");
	}
	if(this.hasAttribute("type"))
	{
		this.__type = this.getAttribute("type");
	}
	if(this.hasAttribute("enableMouseHover"))
	{
		this.__enableMouseHover = Boolean.parse(this.getAttribute("enableMouseHover"));
	}
	if(this.hasAttribute("enableMultiSelection"))
	{
		this.__enableMultiSelection = Boolean.parse(this.getAttribute("enableMultiSelection"));
	}
	if(this.hasAttribute("childField"))
	{
		this.__childField = this.getAttribute("childField");
	}
	if(this.hasAttribute("groupByField"))
	{
		this.__groupByField = this.getAttribute("groupByField");
	}
	if(this.hasAttribute("columnMinWidth"))
	{
		this.__columnMinWidth = this.getAttribute("columnMinWidth");
	}
	if(this.hasAttribute("customScrollerRequired"))
	{
		this.__customScrollerRequired =  Boolean.parse(this.getAttribute("customScrollerRequired"));
	}
	if(this.hasAttribute("columnResizable"))
	{
		this.__columnResizable =  Boolean.parse(this.getAttribute("columnResizable"));
	}
	if(this.hasAttribute("columnDraggable"))
	{
		this.__columnDraggable = Boolean.parse(this.getAttribute("columnDraggable"));
	}
	if(this.hasAttribute("enablePagination"))
	{
		this.__enablePagination = Boolean.parse(this.getAttribute("enablePagination"));
	}
	if(this.hasAttribute("paginationType"))
	{
		this.__paginationType = this.getAttribute("paginationType");
	}
	if(this.hasAttribute("paginationMode"))
	{
		this.__paginationMode =  this.getAttribute("paginationMode");
	}
	if(this.hasAttribute("pageSize"))
	{
		this.__pageSize = parseInt(this.getAttribute("pageSize"));
	}
	if(this.hasAttribute("totalRecords"))
	{
		this.__totalRecords =  parseInt(this.getAttribute("totalRecords"));
	}
	if(this.hasAttribute("fetchRecordCallBack"))
	{
		this.__fetchRecordCallBack =  this.getAttribute("fetchRecordCallBack");
		this.__fetchRecordCallBack = this.util.getFunction(this.__fetchRecordCallBack);
	}
	if(this.hasAttribute("enableContextMenu"))
	{
		this.__enableContextMenu = Boolean.parse(this.getAttribute("enableContextMenu"));
	}
	if(this.hasAttribute("contextMenuProvider"))
	{
		this.__contextMenuProvider =  this.getAttribute("contextMenuProvider");
		this.__contextMenuProvider = this.util.getFunction(this.__contextMenuProvider);
	}
	if(this.hasAttribute("enableVirtualScroll"))
	{
		this.__enableVirtualScroll = Boolean.parse(this.getAttribute("enableVirtualScroll"));
	}
	if(this.hasAttribute("enableServerCall"))
	{
		this.__enableServerCall = Boolean.parse(this.getAttribute("enableServerCall"));
	}
	if(this.hasAttribute("rowHeight"))
	{
		this.__rowHeight =  parseInt(this.getAttribute("rowHeight"));
	}
	if(this.hasAttribute("enableExport"))
	{
		this.__enableExport =  Boolean.parse(this.getAttribute("enableExport"));
	}
	if(this.hasAttribute("exportFileName"))
	{
		this.__exportFileName = this.getAttribute("exportFileName");
	}
	if(this.hasAttribute("enableResponsive"))
	{
		this.__enableResponsive =  Boolean.parse(this.getAttribute("enableResponsive"));
	}
	if(this.hasAttribute("responsiveMode"))
	{
		this.__responsiveMode = this.getAttribute("responsiveMode");
	}
	if(this.hasAttribute("noDataMessage"))
	{
		this.__noDataMessage = this.getAttribute("noDataMessage");
	}
	if(this.hasAttribute("leftFixedColumn"))
	{
		this.__leftFixedColumn =  parseInt(this.getAttribute("leftFixedColumn"));
	}
	if(this.hasAttribute("rightFixedColumn"))
	{
		this.__rightFixedColumn =  parseInt(this.getAttribute("rightFixedColumn"));
	}
	this.__setGridType();
	this.__objGrid.__initialize();
	this.__setPaginationType();
	this.__setPaginationMode();
	this.__setResponsiveMode();
	this.__checkForVirtualMode();
	this.__addSVGInPage();
	this.__addStyleInDOM();
};

nsGrid.propertyChange = function(attrName, oldVal, newVal, setProperty) 
{
	this.__objGrid.propertyChange(attrName, oldVal, newVal, setProperty);
	this.base.propertyChange(attrName, oldVal, newVal, setProperty);
};

nsGrid.componentResized = function(event) 
{
	this.__setMeasurement();
	this.__renderBody(false);
	this.base.componentResized(event);
};

nsGrid.deviceViewChanged = function(conditionTrue,queryIndex,query) 
{
	queryIndex = parseInt(queryIndex);
	//console.log(conditionTrue,queryIndex);
	/*if(queryIndex < 0)
	{
		queryIndex = 0;
	}*/
	if(this.__isResponsiveModeStack)
	{
		if(conditionTrue)
		{
			this.util.addStyleClass(this,"nsMobileStackGrid");
		}
		else
		{
			this.util.removeStyleClass(this,"nsMobileStackGrid");
		}
	}
	else if(this.__isResponsiveModeColumnToggle)
	{
		var className = "nsMobileColumnToggleGrid";
		var postFix = "";
		switch(queryIndex)
		{
			case 0:
				postFix = ">960";
				break;
			case 1:
				postFix = "960";
				break;
			case 2:
				postFix = "800";
				break;
			case 3:
				postFix = "640";
				break;
			case 4:
				postFix = "480";
				break;
			case 5:
				postFix = "320";
				break;
		}
		var base = this;
		var reset = function()
		{
			base.util.removeStyleClass(base,"nsMobileColumnToggleGrid960");
			base.util.removeStyleClass(base,"nsMobileColumnToggleGrid800");
			base.util.removeStyleClass(base,"nsMobileColumnToggleGrid640");
			base.util.removeStyleClass(base,"nsMobileColumnToggleGrid480");
			base.util.removeStyleClass(base,"nsMobileColumnToggleGrid320");
		};
		if(postFix)
		{
			reset();
			if(postFix != ">960" && conditionTrue)
			{
				this.util.addStyleClass(this,className + postFix);
			}
		}
	}
	this.base.deviceViewChanged(conditionTrue,query);
};

nsGrid.setColumn = function(arrColumns)
{
	if(arrColumns && arrColumns.length > 0)
	{
		this.__columns = arrColumns;
		this.__objGrid.__checkForAdditionalColumns();
		for(var count = 0;count < this.__columns.length;count++)
		{
			var item = this.__columns[count];
			this.__processColumnObject(item,count);
		}
	}
	else
	{
		this.__columns = [];
	}
	this.__createStructure();
	this.__addColumnPseudoStyle();
};

nsGrid.setContextMenuSetting = function(contextMenuSetting)
{
	this.__contextMenuSetting = contextMenuSetting;
};

nsGrid.dataSource = function(source)
{
	var start = new Date().getTime();
	this.__dataSource = source;
	this.__rowsRendered = false;
	if(this.__dataSource && this.__dataSource.length > 0)
	{
		this.__objGrid.dataSource();
	}
	else
	{
		this.__arrWrapper = [];
		this.__arrInternalSource = [];
		this.__updateTotalRecords(0);
	}
	this.__setMeasurement();
	this.__resetColumnHeaders();
	this.__renderBody(false);
	this.__setHeaderSortFunction();
	//this.style.display = "";
	var end = new Date().getTime();
	var time = end - start;
	/*
	var dragResizeSetting = {element:this,
			dragEnabled:true,
			resizeEnabled:true,
			minWidth:100,
			minHeight:100};
	this.__nsDragResizeElements = new this.util.nsDragResizeElements(dragResizeSetting);*/
	console.log('Execution time: ' + (time / 1000.0));
};

nsGrid.addRows = function(source)
{
	this.__stopScroll = true;
	if(source && source.length > 0)
	{
		var startIndex = this.__arrInternalSource.length;
		if(!this.__addRemoveRowCallInternal)
   	 	{
			this.__objGrid.__setWrapperSource(source,startIndex);
   	 	}
		this.__arrInternalSource = this.__arrInternalSource.concat(source);
		this.__createBodyBody(this.__arrInternalSource,startIndex,this.__arrInternalSource.length);
   	 	if(!this.__addRemoveRowCallInternal)
   	 	{
   	 		this.__arrWrapper = this.__arrWrapper.concat(source);
   	 		this.__updateTotalRecords();
   	 	}
   	 	this.__addRemoveRowCallInternal = false;
	}
	this.__stopScroll = false;
};

nsGrid.removeRows = function(arrIndex)
{
	if(!this.__enableHierarchical && !this.__enableGrouping && arrIndex && arrIndex.length > 0)
	{
		arrIndex.sort();
   	 	for (var rowIndex = arrIndex.length - 1; rowIndex >= 0; rowIndex--)
	    {
   	 		var index = arrIndex[rowIndex];
   	 		if(index > 0 && index < this.__arrInternalSource.length)
   	 		{
	   	 		//if virtual scroll or Pagination of type Page is enabled then do not remove rows
	   	 		if(!(this.__enableVirtualScroll || (this.__enablePagination && !this.__isPaginationTypeScroll)))
	   	 		{
	   	 			this.__tblCenterBodyBody.deleteRow(index);
	   	 		}
	   	 		this.__arrInternalSource.splice(index, 1);
	   	 		this.__arrWrapper.splice(index, 1);
   	 		}
	    }
   	 	if(!this.__addRemoveRowCallInternal)
	 	{
	 		this.__updateTotalRecords();
	 	}
	 	this.__addRemoveRowCallInternal = false;
	}
};

nsGrid.groupBy = function(groupByField)
{
	if(this.__enableGrouping && groupByField && groupByField.length > 0)
	{
		this.setAttribute("groupByField",groupByField);
	}
};

nsGrid.expandAll = function()
{
	if(this.__enableHierarchical || this.__enableGrouping)
	{
		this.__expandCollapseAll(false);
	}
};

nsGrid.collapseAll = function()
{
	if(this.__enableHierarchical || this.__enableGrouping)
	{
		this.__expandCollapseAll(true);
	}
};

nsGrid.setFontSize = function(fontSize)
{
	if(this.__tblCenterHeader)
	{
		this.__tblCenterHeader.style.fontSize = fontSize;
	}
	if(this.__tblCenterBody)
	{
		this.__tblCenterBody.style.fontSize = fontSize;
	}
};

//assuming column is added at last
//if reposition then use swapColumn
nsGrid.addColumn = function(objColumn)
{
	if(objColumn)
	{
		this.__processColumnObject(objColumn,this.__columns.length);
		this.__columns[this.__columns.length] = objColumn;
		if(this.__tblCenterHeader && this.__tblCenterHeader.tHead && this.__tblCenterHeader.tHead.rows && this.__tblCenterHeader.tHead.rows.length > 0)
		{
			var headerRow = this.__tblCenterHeader.tHead.rows[0];
			if(this.__tblCenterHeader.tBodies && this.__tblCenterHeader.tBodies.length > 0 && this.__tblCenterHeader.tBodies[0].rows && this.__tblCenterHeader.tBodies[0].rows.length > 0)
			{
				var headerBodyRow = this.__tblCenterHeader.tBodies[0].rows[0];
				var rendererRow = this.__tblCenterHeader.tBodies[0].rows[1];
				this.__createHeaderHeaderCell(objColumn,headerRow);
			    this.__createHeaderBodyCell(objColumn,headerBodyRow,rendererRow,this.__columns.length - 1);
			}
		}
		if(this.__tblCenterBody && this.__tblCenterBody.tHead && this.__tblCenterBody.tHead.rows && this.__tblCenterBody.tHead.rows.length > 0)
	    {
			var bodyRow = this.__tblCenterBody.tHead.rows[0];
	    	if(this.__tblCenterBody.tBodies && this.__tblCenterBody.tBodies.length > 0 && this.__tblCenterBody.tBodies[0].rows && this.__tblCenterBody.tBodies[0].rows.length > 0)
			{
	    		var arrRows = this.__tblCenterBody.tBodies[0].rows;
	    		var arrItems = this.__arrInternalSource;
	    		this.__createBodyHeaderCell(objColumn,bodyRow);
	    		var row = null;
	    		var item = null;
	    		for (var rowCount = 0; rowCount < arrRows.length; rowCount++) 
	    		{
	    			row = arrRows[rowCount];
	    			item = arrItems[rowCount];
	    			var cell = this.__createBodyRowCell(row);
	    			this.__setBodyCellProperty(row,cell,item,objColumn,this.__columns.length - 1,-1,0,true);
	    	    }
			}
	    }
		this.__alignTables(false);
		this.__setHeaderSortFunctionForItem(objColumn);
		this.__addColumnPseudoStyle();
		return true;
	}
	else
	{
		this.util.warning("nsGrid","Please pass valid Column object to be added.");
		return false;
	}
};

//programmatic method to call deviceViewChanged
nsGrid.changeDeviceView = function(conditionTrue)
{
	this.deviceViewChanged(conditionTrue);
	
};

nsGrid.removeColumn = function(column)
{
	var index = this.__getColumnIndexForSwapOrRemove(column);
	if(index > -1)
	{
		if(this.__isColumnValidForSwapOrRemove(index,"deleted"))
		{
			this.__removeHeaderCell(index);
			this.__removeBodyColumn(index);
			this.__alignTables(false);
			this.__columns.splice(index, 1);
			this.__addColumnPseudoStyle();
			return true;
		}
	}
	return false;
};

nsGrid.swapColumns = function(sourceColumn,destinationColumn)
{
	var sourceIndex = this.__getColumnIndexForSwapOrRemove(sourceColumn);
	var destinationIndex = this.__getColumnIndexForSwapOrRemove(destinationColumn);
	if(sourceIndex > -1 && destinationIndex > -1)
	{
		var sourceValid = this.__isColumnValidForSwapOrRemove(sourceIndex,"swapped");
		var destinationValid = this.__isColumnValidForSwapOrRemove(destinationIndex,"swapped");
		if(sourceValid && destinationValid)
		{
			this.__swapHeaderCell(sourceIndex,destinationIndex);
			this.__swapBodyCell(sourceIndex,destinationIndex);
			this.__alignTables(false);
			this.util.swapArrayItems(this.__columns,sourceIndex,destinationIndex);
			this.__addColumnPseudoStyle();
			return true;
		}
	}
	return false;
};

nsGrid.sortBy = function(column,isAscending)
{
	var index = this.__getColumnIndexForSwapOrRemove(column);
	if(index > -1 && this.__tblCenterHeader.tBodies && this.__tblCenterHeader.tBodies.length > 0 && this.__tblCenterHeader.tBodies[0].rows && this.__tblCenterHeader.tBodies[0].rows.length > 0)
	{
		var headerBodyRow = this.__tblCenterHeader.tBodies[0].rows[0];
		var arrHeaderCells = headerBodyRow.getElementsByTagName("td");
		var cell = arrHeaderCells[index];
	    var columnDetail = this.__getColumnObject(cell.getAttribute("currentColumnIndex"));
	    this.__handleSorting(cell,columnDetail,isAscending);
	}
};

nsGrid.updateRow = function(index)
{
	var item = this.__getItemByIndex(index);
	if(item)
	{
		var row = item[this.__fieldRow];
		var cells = row.getElementsByTagName("td");
		for (var colIndex = 0; colIndex < this.__columns.length; colIndex++)
        {
			var cell = cells[colIndex];
        	var colItem = this.__columns[colIndex];
        	this.__updateCellText(row,cell,item,colItem,index,colIndex);
        }
	}
};

nsGrid.filter = function(filter,setting,recordLimit)
{
	this.__handleFiltering(filter,setting,recordLimit);
};

nsGrid.resetFilter = function()
{
	this.__resetFiltering();
};

nsGrid.highlightText = function(dataField,text)
{
	var colItem = this.__getColumnObjectByDataField(dataField);
	if(colItem)
	{
		var index = colItem[this.__fieldColIndex];
		var arrRows = this.__tblCenterBodyBody.rows;
		var length = arrRows.length;
		for(var rowIndex = 0; rowIndex < length; rowIndex++)
	    {
			var cell = arrRows[rowIndex].cells[index];
			if(cell)
			{
				var divText = cell.querySelector("." + this.__CLASS_CELL_CHILD);
				if(divText)
				{
					this.util.unHighlightText(divText);
					this.util.highlightText(divText,text,"nsTextHighlight");
				}
			}
	    }
	}
};

nsGrid.unHighlightText = function()
{
	var arrRows = this.__tblCenterBodyBody.rows;
	var length = arrRows.length;
	for(var rowIndex = 0; rowIndex < length; rowIndex++)
    {
		var colLength = this.__columns.length;
		for(var colIndex = 0; colIndex < colLength; colIndex++)
	    {
			var cell = arrRows[rowIndex].cells[colIndex];
			if(cell)
			{
				var divText = cell.querySelector("." + this.__CLASS_CELL_CHILD);
				if(divText)
				{
					this.util.unHighlightText(divText);
				}
			}
	    }
    }
};

nsGrid.removeComponent = function()
{
	if(this.__scroller)
	{
		this.__scroller.__destroyElements();
		this.__scroller = null;
	}
	if(this.__contextMenu)
	{
		this.__contextMenu.remove();
		this.__contextMenu = null;
	}
	if(this.__exportMenu)
	{
		this.__exportMenu.remove();
		this.__exportMenu = null;
	}
	if(this.__bodyScrollRef)
	{
		this.util.removeEvent(this.__divCenterTableBodyContainer,"scroll",this.__bodyScrollRef);
		this.__bodyScrollRef = null;
	}
	if(this.__synchronizeTablesRef)
	{
		this.util.removeEvent(this.__divCenterTableBodyContainer,"scroll",this.__synchronizeTablesRef);
		this.__synchronizeTablesRef = null;
	}
	this.base.removeComponent();
};

nsGrid.__processColumnObject = function(objColumn,index)
{
	if(objColumn)
	{
		objColumn[this.__fieldColIndex] = index;
		if(objColumn.hasOwnProperty("width"))
		{
			var widthUnit = this.util.getDimensionUnit(objColumn["width"]);
			if(widthUnit === 0)
			{
				objColumn["width"] = objColumn["width"] + "px";
			}
		}
		objColumn["sortable"] = Boolean.parse(objColumn["sortable"]);
		objColumn["searchable"] = Boolean.parse(objColumn["searchable"]);
		objColumn["sortDescending"] = Boolean.parse(objColumn["sortDescending"]);
		if(this.__columnResizable)
		{
			if(objColumn.hasOwnProperty("resizable"))
			{
				objColumn["resizable"] = Boolean.parse(objColumn["resizable"]);
			}
			else
			{
				objColumn["resizable"] = true;
			}
		}
		else
		{
			objColumn["resizable"] = false;
		}
		if(this.__columnDraggable)
		{
			if(objColumn.hasOwnProperty("draggable"))
			{
				objColumn["draggable"] = Boolean.parse(objColumn["draggable"]);
			}
			else
			{
				objColumn["draggable"] = true;
			}
		}
		else
		{
			objColumn["draggable"] = false;
		}
		if(objColumn.hasOwnProperty("showMenu"))
		{
			objColumn["showMenu"] = Boolean.parse(objColumn["showMenu"]);
		}
		else
		{
			objColumn["showMenu"] = true;
		}
		if(objColumn.hasOwnProperty("minWidth"))
		{
			objColumn["minWidth"] = this.util.getDimensionAsNumber(null,objColumn["minWidth"]);
		}
		else
		{
			objColumn["minWidth"] = this.__columnMinWidth;
		}
		//itemRendrer property gets precedence over template
		if(objColumn.hasOwnProperty("itemRenderer"))
		{
			var itemRenderer = objColumn["itemRenderer"];
			if (typeof itemRenderer === "string" || itemRenderer instanceof String)
			{
				if(this.util.isFunction(itemRenderer))
				{
					objColumn.itemRenderer = window[itemRenderer];
				}
			}
		}
		else if(objColumn.hasOwnProperty("template") && objColumn["template"])
		{
			//setData should be before template for checking
			if(objColumn.hasOwnProperty("setData"))
			{
				var setData = objColumn["setData"];
				if (typeof setData === "string" || setData instanceof String)
				{
					if(this.util.isFunction(setData))
					{
						objColumn.setData = window[setData];
					}
				}
			}
			objColumn.templateRenderer = this.util.getTemplate(objColumn["template"]);
			/*else
			{
				var renderer = new this.util.defaultRenderer();
				objColumn.templateRenderer = renderer.getRenderer();
				objColumn.setData = renderer.setData.bind(renderer);
			}*/
		}
		else if(objColumn.hasOwnProperty("labelFunction"))
		{
			var labelFunction = objColumn["labelFunction"];
			if (typeof labelFunction === "string" || labelFunction instanceof String)
			{
				if(this.util.isFunction(labelFunction))
				{
					objColumn.labelFunction = window[labelFunction];
				}
			}
		}
		if(objColumn.hasOwnProperty("headerRenderer"))
		{
			var headerRenderer = objColumn["headerRenderer"];
			if (typeof headerRenderer === "string" || headerRenderer instanceof String)
			{
				if(this.util.isFunction(headerRenderer))
				{
					objColumn.headerRenderer = window[headerRenderer];
				}
			}
		}
		else if(objColumn.hasOwnProperty("headerTemplate") && objColumn["headerTemplate"])
		{
			objColumn.headerTemplate = this.util.getTemplate(objColumn["headerTemplate"]);
		}
		if(objColumn.hasOwnProperty("filterRenderer"))
		{
			var filterRenderer = objColumn["filterRenderer"];
			if (typeof filterRenderer === "string" || filterRenderer instanceof String)
			{
				if(this.util.isFunction(filterRenderer))
				{
					objColumn.filterRenderer = window[filterRenderer];
				}
			}
		}
		else if(objColumn.hasOwnProperty("filterTemplate") && objColumn["filterTemplate"])
		{
			objColumn.filterTemplate = this.util.getTemplate(objColumn["filterTemplate"]);
		}
		if(this.__isResponsiveModeColumnToggle)
		{
			if(!objColumn.hasOwnProperty("priority"))
			{
				objColumn.priority = 6;
			}
			objColumn.priority = parseInt(objColumn.priority);
		}
	}
	return objColumn;
};

nsGrid.__createStructure = function()
{
	var divOuterContainer = this.__createOuterContainer();
	var divTitleBar = this.__createTitleBar(divOuterContainer);
	this.__createTableStructure(divOuterContainer);
	if(divTitleBar && this.__title && this.__title.length > 0)
	{
		var spanTitle = divTitleBar.firstChild;
		var body = document.body || document.getElementsByTagName('body')[0];
		var bodyPaddingLeft = this.util.getDimensionAsNumber(body,this.util.getStyleValue(body,"padding-left"));
		var bodyPaddingTop = this.util.getDimensionAsNumber(body,this.util.getStyleValue(body,"padding-top"));
		var bodyMarginLeft = this.util.getDimensionAsNumber(body,this.util.getStyleValue(body,"margin-left"));
		var bodyMarginTop = this.util.getDimensionAsNumber(body,this.util.getStyleValue(body,"margin-top"));
		var paddingLeft = this.util.getDimensionAsNumber(this,this.util.getStyleValue(this,"padding-left"));
		var paddingTop = this.util.getDimensionAsNumber(this,this.util.getStyleValue(this,"padding-top"));
		var marginLeft = this.util.getDimensionAsNumber(this,this.util.getStyleValue(this,"margin-left"));
		var marginTop = this.util.getDimensionAsNumber(this,this.util.getStyleValue(this,"margin-top"));
		var setting = {offsetX:(-1 * (bodyPaddingLeft + bodyMarginLeft + paddingLeft + marginLeft)),offsetY:(-1 * (bodyPaddingTop + bodyMarginTop + paddingTop + marginTop))};
		this.util.addAnimatedLineOnHover(spanTitle,setting);
	}
};

nsGrid.__createOuterContainer = function()
{
	if(this.__divOuterContainer)
	{
		this.removeComponent();
		this.__divOuterContainer.parentNode.removeChild(this.__divOuterContainer);
		this.__divOuterContainer = null;
	}
	this.__divOuterContainer = this.util.createDiv(this.getID() + this.__OUTER_CONTAINER_ID,"nsDataGridContainer");
	this.__divOuterContainer.style.width = this.util.getStyleValue(this,"width");
	this.__divOuterContainer.style.height = this.util.getStyleValue(this,"height");
	this.addChild(this.__divOuterContainer);
	return this.__divOuterContainer;
};

nsGrid.__createTitleBar= function(parentElement)
{
	if(parentElement && ((this.__title && this.__title.length > 0) || this.__enableExport))
	{
		var divTitleBar = this.util.createDiv(this.getID() + this.__TITLE_CONTAINER_ID,this.__CLASS_TITLEBAR);
		if(this.__title && this.__title.length > 0)
		{
			var spanTitle = document.createElement("span");
			var titleText = document.createTextNode(this.__title);
			spanTitle.appendChild(titleText);
			divTitleBar.appendChild(spanTitle);
		}
		if(this.__enableExport)
		{
			var spanExport = document.createElement("span");
			spanExport.style.cursor = "pointer";
			spanExport.style.float = "right";
			var objSVG = new NSSvg();
			var exportID = new NSSvgShapes().__EXPORT_ICON_ID;
			var svg = objSVG.addSVG(spanExport,exportID + "exportsvg","nsExportIcon");
			objSVG.addUse(svg,exportID + "use",null,"#" + exportID);
			divTitleBar.appendChild(spanExport);
			if(!this.__exportMenu)
			{
				var exportMenuSetting = {parent:spanExport,dataSource:this.__exportMenuDataSource,isContextMenu:false,createRunTime:false,eventType:"click",defaultHandler:this.__exportHandler.bind(this),
						position:this.util.POS_BOTTOMLEFT};
				this.__exportMenu = new NSMenu(exportMenuSetting);
			}
		}
		parentElement.appendChild(divTitleBar);
		return divTitleBar;
	}
	return null;
};

nsGrid.__createTableStructure= function(parentElement)
{
	if(parentElement)
	{
		this.__divTableWrapper = this.util.createDiv(this.getID() + "TableWrapper","nsTableWrapper");
		parentElement.appendChild(this.__divTableWrapper);
		this.__divCenterTableContainer = this.util.createDiv(this.getID() + "CenterTableContainer","nsCenterContainer");
		this.__divTableWrapper.appendChild(this.__divCenterTableContainer);
		this.__createHeader();
		this.__createBody();
	}
};

nsGrid.__createPaginationControl= function(parentElement)
{
	if(parentElement)
	{
		var divPagination = this.util.createDiv(this.getID() + this.__PAGINATION_CONTROL_ID,"center");
		parentElement.appendChild(divPagination);
		var setting = {
				parent:divPagination,
				totalRecords : this.__totalRecords,
				pageSize : this.__pageSize,
				//containerStyle:"pagination",
				//activeStyle:"active",
				//disabledStyle:"disabled",
				textFirst:"Home",
				textLast:"Last",
				textPrev:"Prev",
				textNext:"Next",
				showFirstLast:true
		};
		this.__nsPagination = new NSPagination(setting);
		this.__nsPagination.util.addEvent(divPagination,this.__nsPagination.PAGE_CHANGE,this.__pageChangeHandler.bind(this));
	}
};

nsGrid.__pageChangeHandler= function(event)
{
	if(!event)
	{
		event = {oldIndex:0,newIndex:1,fromRecord:0,toRecord:this.__pageSize - 1};
	}
	console.log("OldPage::" + event.oldIndex + ",NewPage::" + event.newIndex);
	if(this.__fetchRecordCallBack && this.__totalRecords > event.fromRecord)
	{
		this.__fetchRecordCallBack(event.fromRecord,event.toRecord,this.__pageSize);
	}
};

/******************************Header Creation *************************************/
nsGrid.__createHeader= function()
{	
	this.__divCenterTableHeaderContainer = this.__createHeaderContainer(this.__divCenterTableContainer,this.__divCenterTableHeaderContainer,this.getID() + this.__TABLE_CENTER_HEADER_CONTAINER_ID,this.getID() + this.__TABLE_CENTER_HEADER_ID);
	this.__tblCenterHeader = this.__divCenterTableHeaderContainer.firstChild;
	this.__createHeaderRows();
};

nsGrid.__createHeaderContainer= function(tableContainer,headerContainer,containerID,tableID)
{
	if(headerContainer)
	{
		headerContainer.parentNode.removeChild(headerContainer);
	}
	headerContainer = this.__createTableAndParent(containerID,null,tableID);
	this.util.addStyleClass(headerContainer,"nsDataGridHeaderContainer");
	headerContainer.style.overflow = "hidden";
	tableContainer.appendChild(headerContainer);
	var table = headerContainer.firstChild;
	this.util.addStyleClass(table,"nsDataGridHeader");
	return headerContainer;
};

nsGrid.__createHeaderRows= function()
{
	if(this.__tblCenterHeader && this.__columns && this.__columns.length > 0)
	{
		var header = this.__tblCenterHeader.createTHead();
		var headerRow = header.insertRow(-1);
	    headerRow.style.height = "auto";
	    var body = document.createElement("tbody");
		this.__tblCenterHeader.appendChild(body);
	    var bodyRow = body.insertRow(-1);
	    var rendererRow = body.insertRow(-1);
	    for (var colIndex = 0; colIndex < this.__columns.length; colIndex++)
	    {
	    	var colItem = this.__columns[colIndex];
	        this.__createHeaderHeaderCell(colItem,headerRow);
	        this.__createHeaderBodyCell(colItem,bodyRow,rendererRow,colIndex);
	    }
	}
};

nsGrid.__createHeaderHeaderCell = function(colItem,headerRow)
{
	if(colItem && headerRow)
	{
		var headerCell = headerRow.insertCell(-1);
		headerCell.style.width = colItem["width"]; 
		this.__addPriorityClassInCell(headerCell,colItem);
	}
};

nsGrid.__createHeaderBodyCell = function(colItem,bodyRow,rendererRow,index)
{
	if(colItem && bodyRow && rendererRow)
	{
		var bodyCell = bodyRow.insertCell(-1);
		var colID = "col" + colItem["headerText"];
		bodyCell.setAttribute("id",colID);
		this.util.addStyleClass(bodyCell , this.__CLASS_TABLE_HEADER_CELL);
		bodyCell.setAttribute("orignalColumnIndex",index);
	    bodyCell.setAttribute("currentColumnIndex",index);
	    
	    this.__headerClickRef = this.__headerClickHandler.bind(this);
    	this.__headerMouseOverRef = this.__headerMouseOverHandler.bind(this);
    	this.__headerMouseOutRef = this.__headerMouseOutHandler.bind(this);
    	this.__headerMouseDownRef = this.__headerMouseDownHandler.bind(this);
        this.util.addEvent(bodyCell,"click",this.__headerClickRef);
        this.util.addEvent(bodyCell,"mouseover",this.__headerMouseOverRef);
        this.util.addEvent(bodyCell,"mouseout",this.__headerMouseOutRef);
        this.util.addEvent(bodyCell,"mousedown",this.__headerMouseDownRef);
        
        var divCell = this.util.createDiv(colID + "container","nsDataGridHeaderCellContainer"); 
        bodyCell.appendChild(divCell);
		var divText = this.util.createDiv(colID + "text");
		divCell.appendChild(divText);
		this.__addHeaderRenderer(divText,colItem,index);
		if(colItem.hasOwnProperty("sortable") && colItem["sortable"])
		{
			var divSorting = this.util.createDiv(colID + "SortContainer");
			divCell.appendChild(divSorting);
			var divSortAsc = this.util.createDiv(colID + "SortAsc","nsSortAsc"); 
			divSorting.appendChild(divSortAsc);
			var divSortSpacer = this.util.createDiv(colID + "SortSpacer","nsSortSpacer"); 
			divSorting.appendChild(divSortSpacer);
			var divSortDesc = this.util.createDiv(colID + "SortDesc","nsSortDesc"); 
			divSorting.appendChild(divSortDesc);
		}
		if(colItem["showMenu"])
		{
			var arrMenu = this.__getHeaderMenuDataProvider(bodyCell);
			if(arrMenu && arrMenu.length > 0)
			{
				var divMenuContainer = this.util.createDiv(colID + "MenuContainer");
				var objSVG = new NSSvg();
				var svg = objSVG.addSVG(divMenuContainer,colID + "menusvg","nsMenuArrowSVG",null,null,null,null,null,null,true);
				objSVG.addUse(svg,colID + "use","nsMenuUse","#svgCircleDownArrow");
				divCell.appendChild(divMenuContainer);
				
				var menuSetting = {parent:divMenuContainer,isContextMenu:false,createRunTime:false,dataSource:arrMenu,targetType:"TD"
								,defaultHandler:this.__headerMenuHandler.bind(this),eventHandler:this.__headerMenuClickHandler.bind(this)
								,position:this.util.POS_BOTTOMRIGHT};
				//place the menu for 2nd last and last column to bottom right
				if(index === this.__columns.length - 1 || index === this.__columns.length - 2)
				{
					menuSetting.position = this.util.POS_BOTTOMLEFT;
				}
				var headerMenu = new NSMenu(menuSetting);
			}
		}
		var rendererCell = rendererRow.insertCell(-1);
		this.util.addStyleClass(rendererCell,"nsDataGridHeaderRenderer");
		this.__addFilterRenderer(rendererRow,rendererCell,colItem,index,colID);
		this.__addPriorityClassInCell(bodyCell,colItem);
		this.__addPriorityClassInCell(rendererCell,colItem);
	}
};

nsGrid.__addHeaderRenderer = function(div,colItem,colIndex)
{
	if(colItem)
	{
		var templateRenderer = colItem["headerTemplate"];
		var itemRenderer = colItem["headerRenderer"];
		if(itemRenderer)
		{
			var objRenderer = itemRenderer(colItem,colIndex);
			if(objRenderer)
			{
				if(this.util.isString(objRenderer))
				{
					var compSpan = document.createElement("span");
					compSpan.innerHTML = objRenderer;
					div.appendChild(compSpan);
				}
				else
				{
					div.appendChild(objRenderer);
				}
			}
		}
		else if(templateRenderer)
		{
			div.appendChild(templateRenderer.cloneNode(true));
		}
		else
		{
			this.util.addStyleClass(div,"nsHeaderText");
			var headerText = " ";
			if(colItem.hasOwnProperty("headerText") && colItem["headerText"])
	        {
	        	headerText = colItem["headerText"];
	        }
			var headerTextNode = document.createTextNode(headerText);
			div.appendChild(headerTextNode);
		}
	}
};

nsGrid.__addFilterRenderer = function(rendererRow,rendererCell,colItem,colIndex,colID)
{
	if(colItem && (colItem["filterTemplate"] || colItem["filterRenderer"]))
	{
		var divHeaderRendererContainer = this.util.createDiv(colID + "rendererContainer"); 
		var divRenderer = this.util.createDiv(colID + "renderer",null);
		divHeaderRendererContainer.appendChild(divRenderer);
		rendererCell.appendChild(divHeaderRendererContainer);
		var templateRenderer = colItem["filterTemplate"];
		var itemRenderer = colItem["filterRenderer"];
		if(itemRenderer)
		{
			var objRenderer = itemRenderer(colItem,colIndex);
			if(objRenderer)
			{
				if(this.util.isString(objRenderer))
				{
					var compSpan = document.createElement("span");
					compSpan.innerHTML = objRenderer;
					divRenderer.appendChild(compSpan);
				}
				else
				{
					divRenderer.appendChild(objRenderer);
				}
			}
		}
		else if(templateRenderer)
		{
			divRenderer.appendChild(templateRenderer.cloneNode(true));
		}
	}
};

nsGrid.__setHeaderSortFunction = function()
{
	if(this.__arrWrapper && this.__arrWrapper.length > 0)
    {
		if(this.__tblCenterHeader.tBodies.length > 0 && this.__tblCenterHeader.tBodies[0].rows.length > 0 && this.__tblCenterHeader.tBodies[0].rows[0].cells.length > 0)
		{
			var headerCells = this.__tblCenterHeader.tBodies[0].rows[0].cells;
			var dataSource = this.__getAllItems();
	        for(var colIndex = 0; colIndex < headerCells.length; colIndex++)
	        {
	        	var colItem = this.__columns[colIndex];
	        	this.__setHeaderSortFunctionForItem(colItem,dataSource);
	        }
		}
    } 
};

nsGrid.__setHeaderSortFunctionForItem = function(colItem,dataSource)
{
	if(colItem)
	{
		if(colItem.hasOwnProperty("dataField") && colItem["dataField"] && colItem.hasOwnProperty("sortable") && colItem["sortable"] === true)
    	{
			//In case of addColumn() dataSource will be null 
			if(!dataSource)
			{
				dataSource = this.__getAllItems();
			}
    		var item = null;
    		for(var count = 0; count < dataSource.length; count++)
            {
                 item = dataSource[count][colItem["dataField"]];
                 if(!this.util.isUndefined(item) && item != null && item != "")
                 {
                	 break;
                 }
            }
    		if(!this.util.isUndefined(item) && item != null && item != "")
            {
            	colItem.sortFunction = this.__determineSortFunction(item.toString());
            }
            else
            {
            	colItem.sortFunction = "__sortCaseInsensitive";
            }
    	}
	}
};

nsGrid.__removeHeaderCell = function(colIndex)
{
	if(colIndex > -1 && colIndex < this.__columns.length)
	{
		if(this.__tblCenterHeader && this.__tblCenterHeader.tHead && this.__tblCenterHeader.tHead.rows && this.__tblCenterHeader.tHead.rows.length > 0)
		{
			var headerRow = this.__tblCenterHeader.tHead.rows[0];
			if(this.__tblCenterHeader.tBodies && this.__tblCenterHeader.tBodies.length > 0 && this.__tblCenterHeader.tBodies[0].rows && this.__tblCenterHeader.tBodies[0].rows.length > 0)
			{
				headerRow.deleteCell(colIndex);
				var headerBodyRow = this.__tblCenterHeader.tBodies[0].rows[0];
				var rendererRow = this.__tblCenterHeader.tBodies[0].rows[1];
				headerBodyRow.deleteCell(colIndex);
				rendererRow.deleteCell(colIndex);
			}
		}
		return true;
	}
	return false;
};

nsGrid.__swapHeaderCell = function(sourceIndex,destinationIndex)
{
	if(this.__isColumnIndexValid(sourceIndex) && this.__isColumnIndexValid(destinationIndex))
	{
		if(this.__tblCenterHeader && this.__tblCenterHeader.tHead && this.__tblCenterHeader.tHead.rows && this.__tblCenterHeader.tHead.rows.length > 0)
		{
			var headerRow = this.__tblCenterHeader.tHead.rows[0];
			if(this.__tblCenterHeader.tBodies && this.__tblCenterHeader.tBodies.length > 0 && this.__tblCenterHeader.tBodies[0].rows && this.__tblCenterHeader.tBodies[0].rows.length > 0)
			{
				var arrHeaderCells = headerRow.getElementsByTagName("td");
				this.__swapCell(arrHeaderCells[sourceIndex],arrHeaderCells[destinationIndex]);
				var headerBodyRow = this.__tblCenterHeader.tBodies[0].rows[0];
				var rendererRow = this.__tblCenterHeader.tBodies[0].rows[1];
				var arrBodyCells = headerBodyRow.getElementsByTagName("td");
				var arrRendererCells = rendererRow.getElementsByTagName("td");
				this.__swapCell(arrBodyCells[sourceIndex],arrBodyCells[destinationIndex]);
				this.__swapCell(arrRendererCells[sourceIndex],arrRendererCells[destinationIndex]);
			}
			return true;
		}
	}
	return false;
};

nsGrid.__removeHeader = function()
{
	if(this.__tblCenterHeader && this.__tblCenterHeader.tHead)
	{
		this.__tblCenterHeader.deleteTHead();
	}
	if(this.__tblCenterHeader.tBodies && this.__tblCenterHeader.tBodies.length > 0)
    {
    	this.__tblCenterHeader.removeChild(this.__tblCenterHeader.tBodies[0]);
    }
};
/******************************End of Header Creation *************************************/

/******************************Body Creation **********************************************/
nsGrid.__createBody = function()
{	
	this.__divCenterTableBodyContainer = this.__createTableAndParent(this.getID() + this.__TABLE_CENTER_BODY_CONTAINER_ID,this.__CLASS_BODY_CONTAINER,this.getID() + this.__TABLE_CENTER_BODY_ID);
	this.__divCenterTableContainer.appendChild(this.__divCenterTableBodyContainer);
	this.__tblCenterBody = this.__divCenterTableBodyContainer.firstChild;
	
	var addScrollDiv = false;
	if(this.__enableVirtualScroll)
	{
		this.__bodyScrollRef = this.__bodyScrollVirtualHandler.bind(this);
		this.util.addEvent(this.__divCenterTableBodyContainer,"scroll",this.__bodyScrollRef);
		addScrollDiv = true;
	}
	else if(this.__enablePagination && this.__isPaginationTypeScroll)
	{
		this.__bodyScrollRef = this.__bodyScrollHandler.bind(this);
		this.util.addEvent(this.__divCenterTableBodyContainer,"scroll",this.__bodyScrollRef);
		this.__nsScrollEnableDisable = new this.util.nsScrollEnableDisable(this.__divCenterTableBodyContainer,this.__bodyScrollRef,this.__infiniteScrollEnabler.bind(this));
		addScrollDiv = true;
	}
	if(addScrollDiv)
	{
		var divScroll = this.util.createDiv(this.__divCenterTableBodyContainer.id  + "scroll","nsGridScrollerCause"); 
		this.__divCenterTableBodyContainer.appendChild(divScroll);
	}
	this.__objGrid.__createBody();
};

nsGrid.__setVirtualMesaurement = function()
{
	this.__divCenterTableBodyContainer.style.position = "relative";
	this.__divCenterTableBodyContainer.style.overflow = "auto";
	this.__tblCenterBody.style.position = "absolute";
	this.__tblCenterBody.style.top = "0px";
	this.__tblCenterBody.style.left = "0px";
	this.__divCenterTableBodyContainer.scrollTop = 0;
	this.__setVirtualVariables(true);
};

nsGrid.__setVirtualVariables = function(isReset)
{
	var divScroll = this.getElement(this.__divCenterTableBodyContainer.id + "scroll");
	if(this.__arrInternalSource && this.__arrInternalSource.length > 0)
	{
		var scrollHeight = 0;
		if(isReset)
		{
			var availableHeight = 0;//this.util.getStyleValue(this,"height",false);
			if(this.hasAttribute("nsHeight"))
			{
				availableHeight = this.util.getDimensionAsNumber(this,this.getAttribute("nsHeight"));
			}
			else if(this.style.height != "")
			{
				availableHeight  = this.util.getDimensionAsNumber(this,this.style.height);
			}
			else
			{
				availableHeight  = this.offsetHeight;
			}
			if(this.__rowHeight > 0)
			{
				this.__virtualRowHeight = this.__rowHeight;
			}
			else
			{
				this.__objGrid.__createBodyBody(this.__arrInternalSource,0,1);
				var item = this.__arrInternalSource[0];
				var row = item[this.__fieldRowHtml];
			    this.__virtualRowHeight = row.offsetHeight;
			    this.__tblCenterBodyBody.deleteRow(0);
			}
			//Start of workaround for IE issue of limitation of scrollTop Value
			//In IE 11 it is 1533917px 
			//Logic is that this.__divCenterTableBodyContainer.scrollHeight gives max scrollTop Value hence if scrollHeight exceeds this.__divCenterTableBodyContainer.scrollHeight then reset scrollHeight value to this.__divCenterTableBodyContainer.scrollHeight
			//and recalculate rowHeight (this.__virtualRowHeight) value;
			scrollHeight = (this.__totalRecords * this.__virtualRowHeight);
			divScroll.style.maxHeight = scrollHeight + "px";
			divScroll.style.height = scrollHeight + "px";
			if(this.__divCenterTableBodyContainer.scrollHeight < scrollHeight)
			{
				scrollHeight = this.__divCenterTableBodyContainer.scrollHeight;
				this.__virtualRowHeight = scrollHeight/this.__totalRecords;
			}
			//end of workaround for IE issue of limitation of scrollTop Value
			this.__rowCount = Math.round(availableHeight/this.__virtualRowHeight) * 2;
			this.__lastScrollPosition = 0;
		}
		else
		{
			var row = this.__tblCenterBody.tBodies[0].rows[0];
			this.__virtualRowHeight = row.offsetHeight;
		}
		scrollHeight = (this.__totalRecords * this.__virtualRowHeight);
		this.__scrollOffsetPosition = this.__virtualRowHeight;
		divScroll.style.maxHeight = scrollHeight + "px";
		divScroll.style.height = scrollHeight + "px";
	}
	else
	{
		this.__virtualRowHeight = 0;
		this.__rowCount = 0;
		this.__scrollOffsetPosition = 0;
		this.__lastScrollPosition = 0;
		divScroll.style.height = 0 + "px";
	}
};

nsGrid.__renderBody = function(fromSort)
{
	if(this.__processArrayAsync)
    {
		this.__processArrayAsync.stop();
    }
	var resetTable = function(tblData)
	{
		tblData.deleteTHead();
	    if(tblData.tBodies && tblData.tBodies.length > 0)
	    {
	    	tblData.removeChild(tblData.tBodies[0]);
	    }
	};
	var createBody = function()
	{
		return document.createElement("tbody");
	};
	var addBodyInTable = function(tblData,tblBody)
	{
		if(tblData && tblBody)
		{
			tblData.appendChild(tblBody);
		}
	};
	resetTable(this.__tblCenterBody);
	this.__tblCenterBodyBody = createBody();
    this.__divCenterTableBodyContainer.scrollTop = 0;
    this.__lastScrollPos = [0,0];
	if(this.__enableContextMenu)
	{
		this.__initializeContextMenu();
	}
	this.__createFixedHeaderRows();
	this.__createBodyHeader();
	if(this.__enableVirtualScroll)
	{
		addBodyInTable(this.__tblCenterBody,this.__tblCenterBodyBody);
		this.__setVirtualMesaurement();
		this.__createBodyBodyVirtual(this.__rowCount);
	}
	else if(this.__enablePagination && this.__isPaginationTypeScroll)
	{
		addBodyInTable(this.__tblCenterBody,this.__tblCenterBodyBody);
		var source = this.__arrInternalSource.slice(0);
		if(this.__isPaginationModeAuto || this.__rowsRendered)
		{
			this.__arrInternalSource = source.slice(0,this.__INFINITE_SCROLL_INITIAL_LOAD);
		}
		this.__createBodyBody(this.__arrInternalSource,0,this.__arrInternalSource.length);
		if((this.__isPaginationModeAuto || this.__rowsRendered) && this.__totalRecords > this.__getTotalRows()) 
		{
			this.__arrInternalSource = source.slice(0);//this.__objGrid.__setSourceForAsync();
			this.__processArrayAsync = new this.util.processArrayAsync(this.__arrInternalSource,this.__createRowAsync,20,this.__asyncSourceCompleteHandler,this);
			this.__processArrayAsync.start(this.__getTotalRows());
		}
	}
	else 
	{
		this.__createBodyBody(this.__arrInternalSource,0,this.__arrInternalSource.length);
		addBodyInTable(this.__tblCenterBody,this.__tblCenterBodyBody);
	}
	this.__createFixedBodyRow(this.__tblCenterBody.tHead.rows[0]);
	if(!fromSort)
	{
		this.__setBodyMeasurement();
	}
	this.__alignTables(fromSort);
	if(this.__customScrollerRequired && !this.__scroller)
	{
		this.__scroller = new NSScroller(this.__divCenterTableBodyContainer);
	}
	this.__setFixedHeaderCellsPosition();
	this.__setFixedBodyCellsPosition();
	var setting = {table:this.__tblCenterBody,isSameTableMove:false,dropEndHandler:this.__rowDropEndHandler.bind(this)};
	var rowMover = new NSTableRowMover(setting);
	
	//this does not make elements unselectable
	//this.util.makeElementUnselectable(this.__divCenterTableBodyContainer,true);
};

nsGrid.__rowDropEndHandler = function(currentRow,targetTable,targetRow)
{
	console.log(currentRow + "," + targetTable + "," + targetRow);
	if(currentRow && targetTable && targetTable.tBodies && targetTable.tBodies.length > 0)
	{
		targetTable.tBodies[0].appendChild(currentRow.cloneNode(true));
	}
};

nsGrid.__createRowAsync= function(item,index,array)
{
	this.__objGrid.__createRowAsync(item,index,array);
	console.log(index + " rendererd");
};

nsGrid.__asyncSourceCompleteHandler= function()
{
	console.log("CompleteHandler");
};

nsGrid.__createBodyHeader= function()
{
	var header = this.__tblCenterBody.createTHead();
	var headerRow = header.insertRow(-1);
    headerRow.style.height = "auto";
    for (var colIndex = 0; colIndex < this.__columns.length; colIndex++)
    {
        var colItem = this.__columns[colIndex];
        this.__createBodyHeaderCell(colItem,headerRow);
    }
};

nsGrid.__createBodyHeaderCell= function(colItem,headerRow)
{
	if(colItem && headerRow)
	{
		var headerCell = headerRow.insertCell(-1);
		headerCell.style.width = (colItem["width"]);
	    headerCell.style.height = "0px";
	    this.__addPriorityClassInCell(headerCell,colItem);
	}
};

nsGrid.__createBodyBodyVirtual= function(rowCount)
{
	if(this.__arrInternalSource && this.__arrInternalSource.length > 0)
	{
		 this.__objGrid.__createBodyBodyVirtual(this.__arrInternalSource,rowCount);
	}
	else
	{
		this.__createNoDataRow();
	}
};

nsGrid.__resetDataInBody= function(fromIndex,toIndex)
{
	this.__objGrid.__resetDataInBody(fromIndex,toIndex);
};

nsGrid.__createBodyBody= function(dataSet,startIndex,endIndex,callAsync)
{
	this.__stopScroll = true;
    if(dataSet && dataSet.length > 0)
    {
    	this.__objGrid.__createBodyBody(dataSet,startIndex,endIndex);
    }
    else
    {
    	this.__createNoDataRow();
    }
    this.__stopScroll = false;
    if(callAsync && this.__processArrayAsync)
    {
    	this.__processArrayAsync.start(this.__getTotalRows());
    }
};

nsGrid.__setBodyRowProperty = function(row,item,totalRowCount)
{
	if(row && item)
	{
		if(this.__rowHeight > 0)
		{
			row.style.height = this.__rowHeight + "px";
		}
		else if(this.__virtualRowHeight > 0)
		{
			row.style.height = this.__virtualRowHeight + "px";
		}
		else
		{
			row.style.height = "auto";
		}
		this.util.addStyleClass(row , "nsGridRow");
	    var className = ((totalRowCount % 2) === 0) ? this.__CLASS_EVEN_ROW : this.__CLASS_ODD_ROW;
	    this.util.addStyleClass(row , className);
	    if(this.__enableMouseHover)
	    {
	    	this.util.addEvent(row,"mouseover",this.__rowMouseHover.bind(this));
		    this.util.addEvent(row,"mouseout",this.__rowMouseHover.bind(this));
	    }
	    this.util.addEvent(row,"click",this.__rowClickHandler.bind(this));
	}
};

nsGrid.__createBodyRowCell= function(row)
{
    var cell = row.insertCell(-1);
    //cell.className = "nsDataGridCell";
    this.util.addStyleClass(cell , "nsDataGridCell");
    var cellDiv = this.util.createDiv(null);
    cell.appendChild(cellDiv);
    return cell;
};

nsGrid.__setBodyCellProperty = function(row,cell,item,colItem,colIndex,parentIndex,level,isReset)
{
	var hierarchicalPadding = 0;
	if(colItem && colItem.hasOwnProperty("dataField") && colItem["dataField"])
	{
		var cellDiv = cell.firstChild;
        if((this.__enableHierarchical || this.__enableGrouping) && colIndex == 0 && item.hasOwnProperty(this.__childField) && item[this.__childField]  && item[this.__childField].length > 0)
        {
        	this.util.addStyleClass(cellDiv,this.__CLASS_GROUP_CELL);
        	var isCollapsed = false;
        	if(!isReset && item.hasOwnProperty(this.__fieldIsCollapsed))
 	        {
        		isCollapsed = item[this.__fieldIsCollapsed];
 	        }
        	this.__createArrow(parentIndex,cellDiv,isCollapsed);
        	var cellText = this.util.createDiv(null,this.__CLASS_CELL_CHILD);
        	cellText.style.verticalAlign = "top";
        	this.__addCellText(row,item,cellText,colItem,colIndex);
        	cellDiv.appendChild(cellText);
        }
        else
        {
        	this.util.addStyleClass(cellDiv,this.__CLASS_CELL_CHILD);
        	this.__addCellText(row,item,cellDiv,colItem,colIndex);
        	//24 = 16(Arrow Width) + 6(Arrow Parent Padding) + 2(cellDiv horizontalGap between elements shown in debugger)
        	hierarchicalPadding = 24;
        }
        if(colIndex == 0)
        {
        	if(this.__enableHierarchical)
            {
            	if(level === 0)
            	{
            		cell.style.paddingLeft = "1px";
            	}
            	else
            	{
            		var paddingLeft = (10 * level) + hierarchicalPadding;
            		cell.style.paddingLeft = paddingLeft + "px";
            	}
            }
        	else if(this.__enableGrouping)
        	{
        		if(level === 0)
        		{
        			cell.style.paddingLeft = "1px";
        		}
        	}
        }
	}
	this.__addPriorityClassInCell(cell,colItem);
};

nsGrid.__removeBodyColumn= function(colIndex)
{
	if(colIndex > -1 && colIndex < this.__columns.length)
	{
		if(this.__tblCenterBody && this.__tblCenterBody.tHead && this.__tblCenterBody.tHead.rows && this.__tblCenterBody.tHead.rows.length > 0)
	    {
			var bodyRow = this.__tblCenterBody.tHead.rows[0];
	    	if(this.__tblCenterBody.tBodies && this.__tblCenterBody.tBodies.length > 0 && this.__tblCenterBody.tBodies[0].rows && this.__tblCenterBody.tBodies[0].rows.length > 0)
			{
	    		bodyRow.deleteCell(colIndex);
	    		var arrRows = this.__tblCenterBody.tBodies[0].rows;
	    		var row = null;
	    		for (var rowCount = 0; rowCount < arrRows.length; rowCount++) 
	    		{
	    			row = arrRows[rowCount];
	    			row.deleteCell(colIndex);
	    	    }
			}
	    }
	}
};

nsGrid.__swapBodyCell = function(sourceIndex,destinationIndex)
{
	if(this.__isColumnIndexValid(sourceIndex) && this.__isColumnIndexValid(destinationIndex))
	{
		if(this.__tblCenterBody && this.__tblCenterBody.tHead && this.__tblCenterBody.tHead.rows && this.__tblCenterBody.tHead.rows.length > 0)
		{
			var bodyRow = this.__tblCenterBody.tHead.rows[0];
			if(this.__tblCenterBody.tBodies && this.__tblCenterBody.tBodies.length > 0 && this.__tblCenterBody.tBodies[0].rows && this.__tblCenterBody.tBodies[0].rows.length > 0)
			{
				var arrHeaderCells = bodyRow.getElementsByTagName("td");
				this.__swapCell(arrHeaderCells[sourceIndex],arrHeaderCells[destinationIndex]);
				var arrRows = this.__tblCenterBody.tBodies[0].rows;
	    		var row = null;
	    		var arrBodyCells = [];
	    		for (var rowCount = 0; rowCount < arrRows.length; rowCount++) 
	    		{
	    			row = arrRows[rowCount];
	    			arrBodyCells = row.getElementsByTagName("td");
					this.__swapCell(arrBodyCells[sourceIndex],arrBodyCells[destinationIndex]);
	    	    }
			}
			return true;
		}
	}
	return false;
};

nsGrid.__createArrow = function(item,parentRowCount,parentElement,isCollapsed)
{
	 if(parentElement)
	 {
		 var cellArrowParent = this.util.createDiv(null);
		 var arrowID = this.getID() + "compArrow" + parentRowCount;
		 var compArrow = this.util.createDiv(arrowID,"nsArrow");
		 compArrow.style.paddingTop = "3px";
		 compArrow.setAttribute("ns-parent-row-count",parentRowCount);
		 
		 var objSVG = new NSSvg();
		 this.__objGrid.__createArrow(compArrow,objSVG,arrowID);
		 this.util.addEvent(compArrow,"click",this.__arrowClickHandler.bind(this));
		 cellArrowParent.appendChild(compArrow);
		 parentElement.appendChild(cellArrowParent);
		 this.__setArrowDirection(compArrow,isCollapsed);
		 item[this.__fieldRowArrow] = compArrow;
		 return compArrow;
	 }
	 return null;
};

nsGrid.__setArrowDirection = function(compArrow,isCollapsed)
{
	if(compArrow)
	{
		var objSVG = new NSSvg();
		var useID = compArrow.getAttribute("id") + "use";
		this.__objGrid.__setArrowDirection(objSVG,useID,isCollapsed);
	}
};

nsGrid.__isArrowCollapsed = function(compArrow)
{
	if(compArrow && compArrow.hasAttribute("ns-parent-row-count"))
	{
		var rowIndex = parseInt(compArrow.getAttribute("ns-parent-row-count"));
		var item = this.__getItemByIndex(rowIndex);
		if(item)
		{
			return item[this.__fieldIsCollapsed];
		}
	}
	return false;
};

nsGrid.__createNoDataRow = function()
{
	var row = this.__tblCenterBodyBody.insertRow(-1);
	this.util.addStyleClass(row,"nsNoRecordsFound");
	if(this.__rowHeight > 0)
	{
		row.style.height = this.__rowHeight + "px";
	}
	else
	{
		row.style.height = "auto";
	}
	var cell = row.insertCell(-1);
	cell.setAttribute("colspan",this.__columns.length);
	var textNode = document.createTextNode(this.__noDataMessage);
	cell.appendChild(textNode);
};
/******************************Fixed Column ***************************************/
nsGrid.__createFixedHeaderRows= function()
{
	this.__arrFixedHeaderLeftCells = [];
	this.__arrFixedHeaderRightCells = [];
	this.__arrFixedBodyLeftCells = [];
	this.__arrFixedBodyRightCells = [];
	var centerHeaderHeaderCells = [];
	var centerHeaderBodyCells = [];
	var centerHeaderRendererCells = [];
	//var centerBodyHeaderCells = []; 
	if(this.__tblCenterHeader && this.__tblCenterHeader.tHead && this.__tblCenterHeader.tHead.rows && this.__tblCenterHeader.tHead.rows.length > 0)
	{
		var centerHeaderRow = this.__tblCenterHeader.tHead.rows[0];
		centerHeaderHeaderCells = centerHeaderRow.cells;
	}
	if(this.__tblCenterHeader.tBodies && this.__tblCenterHeader.tBodies.length > 0 && this.__tblCenterHeader.tBodies[0].rows && this.__tblCenterHeader.tBodies[0].rows.length > 0)
	{
		var centerBodyRow = this.__tblCenterHeader.tBodies[0].rows[0];
		centerHeaderBodyCells = centerBodyRow.cells;
		var centerRendererRow = this.__tblCenterHeader.tBodies[0].rows[1];
		centerHeaderRendererCells = centerRendererRow.cells;
	}
	/*if(this.__tblCenterBody && this.__tblCenterBody.tHead && this.__tblCenterBody.tHead.rows && this.__tblCenterBody.tHead.rows.length > 0)
	{
		var centerHeaderRow = this.__tblCenterBody.tHead.rows[0];
		centerBodyHeaderCells = centerHeaderRow.cells;
	}*/
	var setCellProperties = this.__setFixedCellProperties.bind(this);
	var setCells = function(arrFixed,startIndex,endIndex)
	{
		for (var colIndex = startIndex; colIndex < endIndex; colIndex++)
	    {
	    	var headerHeaderCell = centerHeaderHeaderCells[colIndex];
	    	setCellProperties(arrFixed,headerHeaderCell);
	    	var headerBodyCell = centerHeaderBodyCells[colIndex];
	    	setCellProperties(arrFixed,headerBodyCell);
	    	var headerRendererCell = centerHeaderRendererCells[colIndex];
	    	setCellProperties(arrFixed,headerRendererCell);
	    	//var bodyHeaderCell = centerBodyHeaderCells[colIndex];
	    	//setCellProperties(arrFixed,bodyHeaderCell);
	    }
	};
	this.__callFixedHeaderArrayCallback.bind(this)(setCells);
};

nsGrid.__createFixedBodyRow = function(row)
{
	var centerBodyBodyCells = row.cells;
	var setCellProperties = this.__setFixedCellProperties.bind(this);
	var setCells = function(arrFixed,startIndex,endIndex)
	{
	    for (var colIndex = startIndex; colIndex < endIndex; colIndex++)
	    {
	    	var fixedCell = centerBodyBodyCells[colIndex];
	    	setCellProperties(arrFixed,fixedCell);
	    }
	};
	this.__callFixedBodyArrayCallback.bind(this)(setCells);
};

nsGrid.__callFixedHeaderArrayCallback = function(callBack)
{
	if(this.__leftFixedColumn > 0 && this.__columns && this.__columns.length > this.__leftFixedColumn)
	{
		callBack(this.__arrFixedHeaderLeftCells,0,this.__leftFixedColumn);
	}
	if(this.__rightFixedColumn > 0 && this.__columns && this.__columns.length > this.__rightFixedColumn)
	{
		callBack(this.__arrFixedHeaderRightCells,this.__columns.length - this.__rightFixedColumn,this.__columns.length);
	}
};

nsGrid.__callFixedBodyArrayCallback = function(callBack)
{
	if(this.__leftFixedColumn > 0 && this.__columns && this.__columns.length > this.__leftFixedColumn)
	{
		callBack(this.__arrFixedBodyLeftCells,0,this.__leftFixedColumn);
	}
	if(this.__rightFixedColumn > 0 && this.__columns && this.__columns.length > this.__rightFixedColumn)
	{
		callBack(this.__arrFixedBodyRightCells,this.__columns.length - this.__rightFixedColumn,this.__columns.length);
	}
};

nsGrid.__setFixedCellProperties = function(arrFixed,cell)
{
	this.__setFixedBackground(cell);
	cell.style.position = "relative";
	//cell.style.borderRight = "thick solid #0000FF";
	arrFixed.push(cell);
};

nsGrid.__setFixedBackground = function(cell) 
{
	var row = cell.parentNode;
	var cellBackground = this.util.getStyleValue(cell,"background-color");
	cellBackground = (cellBackground == "transparent" || cellBackground == "rgba(0, 0, 0, 0)") ? null : cellBackground;

	var rowBackground = this.util.getStyleValue(row,"background-color");
	rowBackground = (rowBackground == "transparent" || rowBackground == "rgba(0, 0, 0, 0)") ? null : rowBackground;

	var background = rowBackground ? rowBackground : "white";
	background = cellBackground ? cellBackground : background;
	
	cell.style.backgroundColor = background;
};

nsGrid.__setFixedHeaderCellsPosition = function()
{
	var divBodyContainer = this.__divCenterTableBodyContainer;
	var scrollWidth = divBodyContainer.scrollWidth;
	var clientWidth = divBodyContainer.clientWidth;
	var maxScrollLeft = scrollWidth - clientWidth;
	var scrollBarWidth = this.util.getScrollBarWidth(this.__divCenterTableBodyContainer);
	var left = Math.max(0,Math.min(divBodyContainer.scrollLeft,(maxScrollLeft - scrollBarWidth)));
	var right = Math.max(0,Math.max(scrollWidth - clientWidth - left,scrollBarWidth));
	for(var count = 0;count < this.__arrFixedHeaderLeftCells.length;count++)
	{
		this.__arrFixedHeaderLeftCells[count].style.left = left + "px";
		console.log(maxScrollLeft + "," + scrollBarWidth + "," +  left);
	}
	for(var count = 0;count < this.__arrFixedHeaderRightCells.length;count++)
	{
		this.__arrFixedHeaderRightCells[count].style.right = right + "px";
	}
};

nsGrid.__setFixedBodyCellsPosition = function()
{
	var divBodyContainer = this.__divCenterTableBodyContainer;
	var scrollWidth = divBodyContainer.scrollWidth;
	var clientWidth = divBodyContainer.clientWidth;
	var left = divBodyContainer.scrollLeft;
	var right = scrollWidth - clientWidth - left;
	for(var count = 0;count < this.__arrFixedBodyLeftCells.length;count++)
	{
		this.__arrFixedBodyLeftCells[count].style.left = left + "px";
	}
	for(var count = 0;count < this.__arrFixedBodyRightCells.length;count++)
	{
		this.__arrFixedBodyRightCells[count].style.right = right + "px";
	}
};

nsGrid.__isFixedColumnApplied = function()
{
	return ((this.__leftFixedColumn > 0) || (this.__rightFixedColumn > 0));
};
/******************************End of Fixed Column logic **************************/

/******************************Create Sort Components*******************************/
nsGrid.__addAscendingIndicator = function(target)
{
     if(target)
     {
    	 this.__setSortIcons(target,true,false);
         this.util.addStyleClass(target,this.__CLASS_SORTING_ASC);
     }
};

nsGrid.__removeAscendingIndicator= function(target)
{
     if(target)
     {
          this.util.removeStyleClass(target,this.__CLASS_SORTING_ASC);
          this.__setSortIcons(target,false,false);
     }
};

nsGrid.__addDescendingIndicator= function(target)
{
    if(target)
    {
    	this.__setSortIcons(target,false,true);
        this.util.addStyleClass(target,this.__CLASS_SORTING_DESC);
    }
};

nsGrid.__removeDescendingIndicators= function(target)
{
     if(target)
     {
    	 this.util.removeStyleClass(target,this.__CLASS_SORTING_DESC);
    	 this.__setSortIcons(target,false,false);
     }
};

nsGrid.__resetIndicators= function(target)
{
     if(target)
     {
          this.__removeAscendingIndicator(target);
          this.__removeDescendingIndicators(target);
          this.__setSortIcons(target,true,true);
     }
};

nsGrid.__resetColumnHeaders= function()
{
     var tblHeaderBody = null;
     //safari doesnot support table.tHead
     if (this.__tblCenterHeader.tBodies && this.__tblCenterHeader.tBodies.length > 0)
     {
    	 tblHeaderBody = this.__tblCenterHeader.tBodies[0];
     }
     //two header not allowed
     if (!tblHeaderBody || !tblHeaderBody.rows || tblHeaderBody.rows.length < 1)
     {
          return;
     }
     var headers = tblHeaderBody.rows[0].cells;
     for (var colCount = 0; colCount < headers.length; colCount++)
     {
          this.__resetIndicators(headers[colCount]);
     }
};

nsGrid.__setSortIcons= function(target,isAscVisible,isDescVisible)
{
	if(target)
	{
		if(isAscVisible != null)
		{
			 var divSortAsc = document.getElementById(target.getAttribute("id") + "SortAsc");
			 if(divSortAsc)
			 {
				 divSortAsc.style.display = isAscVisible ? "" : "none";
			 }
		}
		if(isDescVisible != null)
		{
			 var divSortDesc = document.getElementById(target.getAttribute("id") + "SortDesc");
			 if(divSortDesc)
			 {
				 divSortDesc.style.display = isDescVisible ? "" : "none";
			 }
		}
	}
};

/******************************End of Create Sort Components*******************************/

/******************************Event Listeners *************************************/

nsGrid.__arrowClickHandler = function(event)
{
	event = this.util.getEvent(event);
	var target = this.util.getTarget(event);
	target = this.util.findParent(target,"DIV");
	if(target && target.hasAttribute("ns-parent-row-count"))
	{
		var rowIndex = target.getAttribute("ns-parent-row-count");
		var isCollapse = this.__isArrowCollapsed(target);
		this.__showHideRow(parseInt(rowIndex),target,!isCollapse);
	}
	event.stopImmediatePropagation();
};

nsGrid.__headerClickHandler= function(event)
{
	if(this.__onGridLine)
	{
		 return;
	}
     var target = this.util.getTarget(event);
     //adding the below condition so that if we add a span or a font and click on it then we should navigate till we find the header object
     target = this.util.findParent(target,"TD");
     var columnDetail = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
     this.__handleSorting(target,columnDetail);
};

nsGrid.__headerMouseOverHandler = function(event)
{
	var target = this.util.getTarget(event);
	target = this.util.findParent(target,"TD");
	this.__headerMouseMoveRef = this.__headerMouseMoveHandler.bind(this);
	this.util.addEvent(target,"mousemove",this.__headerMouseMoveRef);
};

nsGrid.__headerMouseOutHandler = function(event)
{
	var target =  this.util.getTarget(event);
	target =  this.util.findParent(target,"TD");
	this.__onGridLine = false;
	
	this.util.removeEvent(target,"mousemove",this.__headerMouseMoveRef);
	this.__headerMouseMoveRef = null;
	/*this.util.removeEvent(target,"mousedown",this.__headerMouseDownRef);
	this.__headerMouseDownRef = null;*/
	
	this.util.removeStyleClass(target,"nsResizeHandleActive");
};

nsGrid.__headerMouseMoveHandler = function(event)
{
	event = this.util.getEvent(event);
	var target = this.util.getTarget(event);
	target = this.util.findParent(target,"TD");
	var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
	//var offset = this.util.getEventPosition(event);
	if(objColumn && objColumn["resizable"])
	{
		var posEvent = this.util.getEventPosition(event,this.__divCenterTableHeaderContainer);
		if(this.__isMouseOnElement(target,posEvent.left,posEvent.top))
		{
			this.util.addStyleClass(target,"nsResizeHandleActive");
			this.__onGridLine = true;
		}
		else
		{
			this.util.removeStyleClass(target,"nsResizeHandleActive");
			this.__onGridLine = false;
		}
	}
};

nsGrid.__headerMouseDownHandler = function(event)
{
	event = this.util.getEvent(event);
    var target = this.util.getTarget(event);
    target = this.util.findParent(target,"TD");
    var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
    if(objColumn)
	{
    	if(objColumn["resizable"])
    	{
    		this.__startResize(event,target);
    	}
    	if(objColumn["draggable"])
    	{
		    this.__startColumnMove(event,target);
    	}
	}
};

nsGrid.__headerMenuClickHandler = function(event)
{
	 event = this.util.getEvent(event);
     event.stopImmediatePropagation();
};

nsGrid.__getHeaderMenuDataProvider = function(target)
{
	var source = [];
	if(target)
	{
		target = this.util.findParent(target,"TD");
		var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
		var colIndex = objColumn[this.__fieldColIndex];
		if(objColumn)
		{
			if(objColumn["sortable"])
			{
				source.push({id:1,title: "Sort Ascending"});
				source.push({id:2,title: "Sort Descending"});
			}
			if(this.__isColumnValidForSwapOrRemove(colIndex))
			{
				source.push({id:3,title: "Remove Column"});
			}
		}
	}
	return source;
};

nsGrid.__headerMenuHandler = function(target,item)
{
	if(target && item)
	{
		target = this.util.findParent(target,"TD");
		var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
		if(objColumn)
		{
			var colIndex = objColumn[this.__fieldColIndex];
			//Sort Ascending
			if(item["id"] === 1)
			{
				this.sortBy(colIndex,true);
			}
			//Sort Descending
			else if(item["id"] === 2)
			{
				this.sortBy(colIndex,false);
			}
			//Remove Column
			else if(item["id"] === 3)
			{
				this.removeColumn(colIndex);
			}
		}
	}
};

nsGrid.__rowMouseHover= function(event)
{
	 /*event = this.util.getEvent(event);
     var target = this.util.getTarget(event);
     target = this.util.findParent(target,"TR");
     if (event.type == "mouseover")
     {
    	 this.util.addStyleClass(target,"nsDataGridHover");
     }
     else if (event.type == "mouseout")
     {
    	 this.util.removeStyleClass(target,"nsDataGridHover");
     }*/
	 return false;
};

nsGrid.__rowClickHandler= function(event)
{
	event = this.util.getEvent(event);
    var target = this.util.getTarget(event);
    target = this.util.findParent(target,"TR");
    //Multiselection Check
    if (event.shiftKey && this.__enableMultiSelection)
    {
    	this.__multiSectionHandler(target);
    }
    else if(event.ctrlKey && this.__enableMultiSelection)
    {
      if(this.__isRowSelected(target))
      {
    	  this.__markRowUnselected(target);
      }
      else
      {
    	  this.__markRowSelected(target);
      }
    }
    else
    {
    	this.__clearAllRowSelection();
    	this.__markRowSelected(target);
    } 
};

nsGrid.__bodyScrollHandler = function(event)
{
	var target = this.util.getTarget(event);
	if(this.__stopScroll)
	{
		target.scrollLeft = this.__lastScrollPos[0];
		target.scrollTop = this.__lastScrollPos[1];
		return;
	}
	var scrollPos = target.scrollTop;
	var scrollValue = (target.scrollHeight * 95) /100;
	if(scrollPos > this.__bodyScrollPos)
	{
		if((target.scrollHeight - scrollPos) < scrollValue)
	    {
			if(this.__isPaginationModeAuto || this.__rowsRendered)
	        {
				if(this.__totalRecords > this.__getTotalRows())
				{
					if(this.__processArrayAsync)
					{
						this.__processArrayAsync.stop();
					}
					var totalRows = this.__getTotalRows();
					this.__createBodyBody(this.__arrInternalSource,totalRows,totalRows + 20,true);
				}
	        }
			else
			{
				var fromRecord =  this.__getTotalRows();
				if(fromRecord === this.__totalRecords)
				{
					this.__rowsRendered = true;
					alert(this.__rowsRendered);
				}
				else
				{
					var toRecord = fromRecord +  this.__pageSize - 1;
					toRecord = (toRecord < this.__totalRecords) ? toRecord : ((toRecord === this.__totalRecords) ? this.__totalRecords - 1 : this.__totalRecords);
					this.__fetchRecordCallBack(fromRecord,toRecord,this.__pageSize);
				}
			}
	    }
	}
	this.__lastScrollPos = [target.scrollLeft,target.scrollTop];
	this.__bodyScrollPos = target.scrollTop;
};

nsGrid.__infiniteScrollEnabler = function(event)
{
	var target = this.util.getTarget(event);
	var scrollPos = target.scrollTop;
	var itemToBegin = 0;
	var tableTop = 0; 
    if(scrollPos > this.__scrollOffsetPosition)
    {
    	tableTop = scrollPos - this.__scrollOffsetPosition;
    	itemToBegin = Math.ceil(tableTop/this.__virtualRowHeight);
    }
    else
    {
    	tableTop = 0;
    	itemToBegin = 0;
    }
    return (itemToBegin <= this.__getTotalRows());
};

nsGrid.__bodyScrollVirtualHandler = function(event)
{
	var target = this.util.getTarget(event);
	var scrollPos = target.scrollTop;
	if(this.__lastScrollPosition !== scrollPos)
	{
		var itemToBegin = 0;
    	var itemToLimit = 0;
    	var tableTop = 0; 
    	//console.log(this.__rowCount + "," + scrollPos + "," +  this.__scrollOffsetPosition);
        if(scrollPos > this.__scrollOffsetPosition)
        {
        	tableTop = scrollPos - this.__scrollOffsetPosition;
        	//console.log("In Scroll::" + tableTop);
        	itemToBegin = Math.ceil(tableTop/this.__virtualRowHeight);
        }
        else
        {
        	tableTop = 0;
        	//console.log("In Not Scroll::" + scrollPos + "," + this.__scrollOffsetPosition);
        	itemToBegin = 0;
        }
        itemToLimit = Math.ceil(itemToBegin + this.__rowCount);
        //console.log(itemToBegin + "," + itemToLimit);
        //if(itemToBegin < (this.__totalRecords - this.__rowCount))
        //{
        	this.__tblCenterBody.style.top = tableTop + "px";
            //console.log(itemToBegin + "," + itemToLimit);
            this.__resetDataInBody(itemToBegin,itemToLimit);
        //}
	}
	this.__lastScrollPosition = scrollPos;
};

/******************************End of Event Listeners*************************************/

/******************************Column Resize Logic*************************************/

nsGrid.__resize = function(table,cell,desirableWidth)
{
	var cellPaddingLeft = this.util.getDimensionAsNumber(cell,cell.style.paddingLeft);
	var cellPaddingRight = this.util.getDimensionAsNumber(cell,cell.style.paddingRight);
	var pad = parseInt(cellPaddingLeft,10) + parseInt(cellPaddingRight,10);
	var objColumn = this.__getColumnObject(this.__resizingHeader.getAttribute("currentColumnIndex"));
	var minWidth = this.__columnMinWidth;
	if(objColumn)
	{
		minWidth = objColumn["minWidth"];
	}
	var setWidth = Math.max((desirableWidth - pad), minWidth);
	cell.style.width = setWidth + "px";
};

nsGrid.__startResize = function(event,target)
{
	if(!this.__onGridLine)
	{
		return;
	}
	
	 this.util.removeEvent(target,"click",this.__headerClickRef);
	 this.__headerClickRef = null;
     this.util.removeEvent(target,"mouseover",this.__headerMouseOverRef);
     this.__headerMouseOverRef = null;
     this.util.removeEvent(target,"mouseout",this.__headerMouseOutRef);
     this.__headerMouseOutRef = null;
     /*this.util.removeEvent(target,"mousedown",this.__headerMouseDownRef);
     this.__headerMouseDownRef = null;*/
	
	this.__resizingHeader = target;
	this.__resizingHeaderCell = this.__getHeaderTopCell(target);
	this.__resizingBodyCell = this.__getBodyTopCell(target);
	
	this.__createResizeHandler(event);
	
	this.__doResizeRef = this.__doResize.bind(this);
	this.__endResizeRef = this.__endResize.bind(this);
	this.util.addEvent(document,"mousemove",this.__doResizeRef);
	this.util.addEvent(document,"mouseup",this.__endResizeRef);
	
	event.stopImmediatePropagation();
};

nsGrid.__doResize = function(event)
{
	//putting this check as somehow the document evenlistener is not getting detached
	if(!this.__resizingHeader)
	{
		return;
	}
	this.util.makeBodyUnselectable();
	event = this.util.getEvent(event);
	var posEvent = this.util.getEventPosition(event);
	this.__resizeHandler.style.left = posEvent.left + "px";
	
	return false;
};

nsGrid.__endResize = function(event)
{
	//putting this check as somehow the document evenlistener is not getting detached
	if(!this.__resizingHeader)
	{
		return;
	}
	this.util.removeEvent(document,"mousemove",this.__doResizeRef);
	this.__doResizeRef = null;
	this.util.removeEvent(document,"mouseup",this.__endResizeRef);
	this.__endResizeRef = null;
	this.util.removeEvent(selectedHeader,"mouseout",this.__headerMouseOutRef);
	this.__headerMouseOutRef = null;
	this.util.removeEvent(selectedHeader,"click",this.__headerClickRef);
	this.__headerClickRef = null;
	this.util.makeBodySelectable();
	event = this.util.getEvent(event);
	var selectedHeader = this.__resizingHeader;
	var tableHeader = this.__tblCenterHeader;
	var tableBody = this.__tblCenterBody;
	var posEvent = this.util.getEventPosition(event,this.__divCenterTableBodyContainer);
	var desiredWidth = posEvent.left - this.util.getCumulativeOffset(selectedHeader).x;
	this.__resize(tableHeader,this.__resizingHeaderCell,desiredWidth);
	this.__resize(tableBody,this.__resizingBodyCell,desiredWidth);
	if(this.__resizeHandler)
	{
		document.body.removeChild(this.__resizeHandler);
	}
	this.__resizingHeader = null;
	this.__resizingHeaderCell = null;
	this.__resizingBodyCell = null;
	this.__resizeHandler = null;
	event.stopImmediatePropagation();
	this.__handleColumnResize();
};

nsGrid.__createResizeHandler = function(event)
{
	this.__resizeHandler = this.util.createDiv(null,"nsResizeHandle");
	var posEvent = this.util.getEventPosition(event);
	this.__resizeHandler.style.top = this.util.getCumulativeOffset(this.__resizingHeader).y + "px";
	this.__resizeHandler.style.left = posEvent.left + "px";
	var scrollBarWidth = this.util.getScrollBarWidth(this.__divCenterTableBodyContainer);
	this.__resizeHandler.style.height = (this.__divCenterTableHeaderContainer.offsetHeight + this.__divCenterTableBodyContainer.offsetHeight - scrollBarWidth) + "px";
	
	document.body.appendChild(this.__resizeHandler);
};

nsGrid.__getHeaderTopCell = function(cell)
{
	if(cell)
	{
		var index = cell.cellIndex;
		if(this.__tblCenterHeader && this.__tblCenterHeader.tHead && this.__tblCenterHeader.tHead.rows.length > 0 && this.__tblCenterHeader.tHead.rows[0].cells.length > 0)
		{
			var headerCells = this.__tblCenterHeader.tHead.rows[0].cells;
			return headerCells[index];
		}
	}
	return null;
};

nsGrid.__getBodyTopCell = function(cell)
{
	if(cell)
	{
		var index = cell.cellIndex;
		if(this.__tblCenterBody && this.__tblCenterBody.tHead && this.__tblCenterBody.tHead.rows.length > 0 && this.__tblCenterBody.tHead.rows[0].cells.length > 0)
		{
			var bodyCells = this.__tblCenterBody.tHead.rows[0].cells;
			return bodyCells[index];
		}
	}
	return null;
};

/*******************************************************End of Column Resize Logic*************************************/

/******************************************************Start of Column Move logic ********************************************************/
nsGrid.__startColumnMove = function(event,target)
{
	if(this.__onGridLine)
	{
		return;
	}
	var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
	var columnIndex = this.__getColumnIndexByObject(objColumn);
	if(columnIndex > -1)
	{
		this.__objColumnDrag = {};
		this.__objColumnDrag.source = target;
		this.__objColumnDrag.objColumn = objColumn;
		this.__objColumnDrag.columnIndex = columnIndex;
		var position = this.util.getEventPosition(event);
		this.__objColumnDrag.dragElement = this.__createCopyItem(target,position);
		this.__objColumnDrag.dragElementAdded = false;
		this.__objColumnDrag.position = position;
		this.__dragColumnMoveRef = this.__dragColumnMoveHandler.bind(this);
		this.__dragColumnEndRef = this.__dragColumnEndHandler.bind(this);
		this.util.addEvent(document,"mousemove",this.__dragColumnMoveRef);
		this.util.addEvent(document,"mouseup",this.__dragColumnEndRef);
	}
};

nsGrid.__dragColumnMoveHandler = function(event)
{
	event = this.util.getEvent(event);
	var position = this.util.getEventPosition(event);
	var leftOffset = this.__objColumnDrag.position.left - position.left;
    var topOffset = this.__objColumnDrag.position.top - position.top;
    var dragRadius = (leftOffset * leftOffset) + (topOffset * topOffset);
    if(!this.__objColumnDrag.dragElementAdded && dragRadius > this.__MIN_DRAG_OFFSET)
    {
    	document.body.appendChild(this.__objColumnDrag.dragElement);
    	this.__objColumnDrag.dragElementAdded = true;
    }
    var posEvent = this.util.getEventPosition(event);
    this.__objColumnDrag.dragElement.style.left = posEvent.left + "px"; //position.left + "px";
    this.__objColumnDrag.dragElement.style.top = posEvent.top + "px";
    event.preventDefault();
};

nsGrid.__dragColumnEndHandler = function(event)
{
	this.util.removeEvent(document,"mousemove",this.__dragColumnMoveRef);
	this.__dragColumnMoveRef = null;
	this.util.removeEvent(document,"mouseup",this.__dragColumnEndRef);
	this.__dragColumnEndRef = null;
	if(this.__objColumnDrag.dragElementAdded)
	{
		document.body.removeChild(this.__objColumnDrag.dragElement);
		var position = this.util.getEventPosition(event);
		position.top = position.top + this.__divCenterTableHeaderContainer.scrollTop;
		position.left = position.left + this.__divCenterTableHeaderContainer.scrollLeft;
		var tablePosition = this.util.getOffSet(this.__tblCenterHeader);
		if (position.top < tablePosition.top || position.top > (tablePosition.top + this.__tblCenterHeader.offsetHeight)) 
		{
		      return;
		}
		var targetIndex = this.__getHeaderColumnByPosition(position);
	    if (targetIndex > -1 && targetIndex != this.__objColumnDrag.columnIndex) 
	    {
	    	this.swapColumns(this.__objColumnDrag.columnIndex,targetIndex);
	    }
	}
};

nsGrid.__createCopyItem = function(target,position)
{
	var divDrag = null;
	if(target && position)
	{
		divDrag = this.util.createDiv(this.getID() + "Drag","dataGridHeader");
		divDrag.innerHTML = target.innerHTML;
		//divDrag.style.backgroundColor = "red";
		divDrag.style.position = "absolute";
		divDrag.style.left = (position.left) + "px";
		divDrag.style.top = (position.top) + "px";
		divDrag.style.width = target.offsetWidth + "px";
		divDrag.style.height = target.offsetHeight + "px";
		divDrag.style.opacity = 0.7;
	}
	return divDrag;
};

nsGrid.__getHeaderColumnByPosition = function(position) 
{
	if(this.__tblCenterHeader.tBodies && this.__tblCenterHeader.tBodies.length > 0 && this.__tblCenterHeader.tBodies[0].rows && this.__tblCenterHeader.tBodies[0].rows.length > 0)
	{
		var headerBodyRowCells = this.__tblCenterHeader.tBodies[0].rows[0].cells;;
	    for (var count = 0; count < headerBodyRowCells.length; count++) 
	    {
	      var rowPosition = this.util.getOffSet(headerBodyRowCells[count]);
	      if (rowPosition.left <= position.left && position.left <= rowPosition.left + headerBodyRowCells[count].offsetWidth) 
	      {
	    	  return count;
	      }
	    }
	    return -1;
	}
};

/******************************************************End of Column Move logic ********************************************************/

/******************************************************Start of Selection Functions*************************************************************/

nsGrid.__isRowSelected= function(row)
{
    if(row)
    {
        return this.util.hasStyleClass(row,"nsDataGridSelection");
    }   
    return false;
};

nsGrid.__markRowSelected= function(row)
{
    if(row)
    {
        if(!this.__isRowSelected(row))
        {
        	this.util.addStyleClass(row,"nsDataGridSelection");   
            this.__selectedItems.push(row);
        	var index = parseInt(row.getAttribute("ns-index"));
        	var item = this.__getItemByIndex(index);
            this.util.dispatchEvent(this,this.ITEM_SELECTED,item,{index:item[this.__fieldIndex]});
        }
    }
};

nsGrid.__markRowUnselected= function(row)
{
    if(this.__isRowSelected(row))
    {
    	this.util.removeStyleClass(row,"nsDataGridSelection");
        for (var count=0; count < this.__selectedItems.length ; count++)
        {
            if (parseInt(this.__selectedItems[count].getAttribute("ns-index")) === parseInt(row.getAttribute("ns-index")))
            {
                this.__selectedItems.splice(count,1);
                break;
            }
        }
        var index = parseInt(row.getAttribute("ns-index"));
        var item = this.__getItemByIndex(index);
        this.util.dispatchEvent(this,this.ITEM_UNSELECTED,item,{index:item[this.__fieldIndex]});
    }
};

nsGrid.__clearAllRowSelection= function()
{
    for (var count=0; count < this.__selectedItems.length ; count++)
    {
        if (this.__selectedItems[count])
        {
        	this.util.removeStyleClass(this.__selectedItems[count],"nsDataGridSelection");
        }
    }
    this.__selectedItems = [];
};

nsGrid.__multiSectionHandler= function(lastRow)
{
	 if(!lastRow)
	 {
		 return;
	 }
	 if (this.__selectedItems.length === 0)
	 {
		 this.__isRowSelected(lastRow);
	     return;
	 }
	 var firstRow = this.__selectedItems[this.__selectedItems.length - 1];
	 if(parseInt(lastRow.getAttribute("ns-index")) === parseInt(firstRow.getAttribute("ns-index")))
	 {
		 this.__markRowUnselected(lastRow);
		 return;
	 }
	 var isDown = (parseInt(lastRow.getAttribute("ns-index")) > parseInt(firstRow.getAttribute("ns-index")));
	 var isSelection = !this.__isRowSelected(lastRow);
	 var navigateRow = firstRow;
	 do
	 {
		  navigateRow = isDown ? navigateRow.nextSibling : navigateRow.previousSibling;
		  if (isSelection)
		  {
			  this.__markRowSelected(navigateRow);
		  }
		  else
		  {
			  this.__markRowUnselected(navigateRow);
		  }
	 }
	 while(parseInt(navigateRow.getAttribute("ns-index")) != parseInt(lastRow.getAttribute("ns-index")));
};

nsGrid.__setVisibilityOfColumn = function(index,isVisible)
{
	var style;
    if (isVisible) 
    {
    	style = "";
    }
    else
    {
    	style = "none";
    }
	var rows = this.__tblCenterHeader.getElementsByTagName("tr");
	for (var count = 0; count < rows.length;count++) 
	{
	     var cells = rows[count].getElementsByTagName("td");
	     if(cells.length > index)
	     {
	    	 cells[index].style.display = style;
	     }
	     else
	     {
	    	 return;
	     }
	}
	rows = this.__tblCenterBody.getElementsByTagName("tr");
	for (var count = 0; count < rows.length;count++) 
	{
	     var cells = rows[count].getElementsByTagName("td");
	     cells[index].style.display = style;
	}
	
};
