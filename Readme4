
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
import com.google.javascript.jscomp.WarningLevel;
import com.google.javascript.jscomp.SourceFile;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

import com.google.javascript.jscomp.*;
import com.org.FileMerger;

public class JSComplierDemo 
{
	private final String basePath = "C:\\Temp\\Anurag\\Workspace\\JSLib\\src\\main\\webapp\\";
	private final String extJSURL = basePath + "lib\\com\\ext\\";
	private final String baseJSURL = basePath + "lib\\com\\org\\";
	private final String baseCSSURL = basePath + "lib\\css\\com\\org\\";
	//private final String outputURL = basePath + "generated\\";
	private final String outputURL = "C:\\Temp\\Anurag\\Workspace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\JSLib\\generated\\";
	
	private FileMerger fileMerger = null;
	
	private void loadBaseJSFile() throws Exception
	{
		Map<String,String> mapJSFiles = new HashMap<String,String>();
		mapJSFiles.put("nsUtil", baseJSURL + "util\\nsUtil.js");
		mapJSFiles.put("nsSVG", baseJSURL + "util\\nsSVG.js");
		mapJSFiles.put("nsPluggins", baseJSURL + "util\\nsPluggins.js");
		mapJSFiles.put("nsPinTip", baseJSURL + "util\\nsPinTip.js");
		mapJSFiles.put("nsContainerBase", baseJSURL + "prototype\\base\\nsContainerBase.js");
		mapJSFiles.put("nsConsole", baseJSURL + "util\\nsConsole.js");
		
		for(String key:mapJSFiles.keySet())
		{
			String inputFile = mapJSFiles.get(key);
			String[] arrOutput = inputFile.split("\\\\");
			String outputFileName = arrOutput[arrOutput.length - 1].replace(".js",".min.js");
			loadFile(new String[]{inputFile},null,outputURL + outputFileName);
		}
	}
	
	private void loadJSFile(String component) throws Exception
	{
		Map<String,String> mapJSFiles = new HashMap<String,String>();
		mapJSFiles.put("nsDividerBox", baseJSURL + "containers\\nsDividerBox.js");
		mapJSFiles.put("nsBanner", baseJSURL + "containers\\nsBanner.js");
		mapJSFiles.put("nsProgressBar", baseJSURL + "containers\\nsProgressBar.js");
		mapJSFiles.put("nsGrid", baseJSURL + "prototype\\nsGrid.js");
		mapJSFiles.put("nsList", baseJSURL + "prototype\\nsList.js");
		mapJSFiles.put("nsTextBox", baseJSURL + "prototype\\nsTextBox.js");
		mapJSFiles.put("nsMenu", baseJSURL + "util\\nsMenu.js");
		mapJSFiles.put("nsPagination", baseJSURL + "util\\nsPagination.js");
		mapJSFiles.put("nsPanel", baseJSURL + "containers\\nsPanel.js");
		mapJSFiles.put("nsDragDrop", baseJSURL + "util\\nsDragDrop.js");
		mapJSFiles.put("nsChart", baseJSURL + "prototype\\nsChart.js");
		mapJSFiles.put("nsModal", baseJSURL + "containers\\nsModal.js");
		mapJSFiles.put("nsExport", baseJSURL + "util\\nsExport.js");
		mapJSFiles.put("nsFilter", baseJSURL + "util\\nsFilter.js");
		mapJSFiles.put("nsFlatGrid", baseJSURL + "util\\nsFlatGrid.js");
		mapJSFiles.put("nsHierarchicalGrid", baseJSURL + "util\\nsHierarchicalGrid.js");
		mapJSFiles.put("nsGroupingGrid", baseJSURL + "util\\nsGroupingGrid.js");
		mapJSFiles.put("nsGridPluggins", baseJSURL + "util\\nsGridPluggins.js");
		mapJSFiles.put("nsBarChart", baseJSURL + "util\\nsBarChart.js");
		mapJSFiles.put("nsPieChart", baseJSURL + "util\\nsPieChart.js");
		mapJSFiles.put("nsLineChart", baseJSURL + "util\\nsLineChart.js");
		mapJSFiles.put("nsDonutChart", baseJSURL + "util\\nsDonutChart.js");
		
		Map<String,String[]> mapJSDependency = new HashMap<String,String[]>();
		mapJSDependency.put("nsProgressBar",new String[]{"nsModal"});
		//mapJSDependency.put("nsGrid",new String[]{"nsMenu","nsPagination","nsExport","nsFilter","nsFlatGrid","nsHierarchicalGrid","nsGroupingGrid","nsGridPluggins"});
		mapJSDependency.put("nsList",new String[]{"nsDragDrop","nsFilter","nsMenu"});
		mapJSDependency.put("nsTextBox",new String[]{"nsList"});
		mapJSDependency.put("nsChart",new String[]{"nsBarChart","nsPieChart","nsLineChart","nsDonutChart"});
		
		List<String> lstInput = new ArrayList<String>();
		if(mapJSDependency.containsKey(component))
		{
			String[] arrFile = mapJSDependency.get(component);
			if(arrFile != null && arrFile.length > 0)
			{
				for(String file:arrFile)
				{
					lstInput.add(mapJSFiles.get(file));
				}
			}
		}
		lstInput.add(mapJSFiles.get(component));
		loadFile(lstInput.toArray(new String[0]),null,outputURL + component + ".min.js");
	}
	
	private void loadBaseCSSFile() throws Exception
	{
		/*Map<String,String> mapCSSFiles = new HashMap<String,String>();
		mapCSSFiles.put("component", baseCSSURL + "/component.css");
		mapCSSFiles.put("nsPinTip", baseCSSURL + "/nsPinTip.css");
		
		for(String key:mapCSSFiles.keySet())
		{
			String inputFile = mapCSSFiles.get(key);
			String[] arrOutput = inputFile.split("\\\\");
			String outputFileName = arrOutput[arrOutput.length - 1].replace(".css",".min.css");
			loadFile(new String[]{inputFile},null,outputURL + outputFileName);
		}*/
	}
	
	private void loadCSSFile(String component) throws Exception
	{
		
		Map<String,String> mapCSSFiles = new HashMap<String,String>();
	}
	
	private void loadFile(String[] arrInputFile,String[] arrExternalFile,String outputFile) throws Exception
	{
		if(fileMerger == null)
		{
			fileMerger = new FileMerger();
		}
		fileMerger.compressFiles(arrInputFile, outputFile);
		/*if(arrInputFile != null && arrInputFile.length > 0 && outputFile != null)
		{
			if(arrExternalFile == null)
			{
				arrExternalFile = new String[0];
			}
			Compiler compiler = new Compiler();
		    CompilerOptions options = new CompilerOptions();
		    options.setLanguageIn(LanguageMode.ECMASCRIPT_2015);
			options.setLanguageOut(LanguageMode.ECMASCRIPT5_STRICT);
			options.setAssumeStrictThis(true);
			 //CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
			CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
			List<SourceFile> lstExternalFile = new ArrayList<SourceFile>();
		    for (String filename : arrExternalFile)
		    {
		    	lstExternalFile.add(SourceFile.fromFile(filename));
		    }
		    List<SourceFile> lstInputFile = new ArrayList<SourceFile>();
		    try 
		    {
		    	lstInputFile = CommandLineRunner.getBuiltinExterns(CompilerOptions.Environment.BROWSER);
			} 
		    catch (IOException e) 
		    {
			    System.out.println("Exception raised");
			}
		    for (String filename : arrInputFile)
		    {
		    	lstInputFile.add(SourceFile.fromFile(filename));
		    }
		    Result result = compiler.compile(lstExternalFile,lstInputFile,options);
		    String output = compiler.toSource();
		    for (JSError message : compiler.getWarnings())
		    {
		      System.err.println("Warning message: " + message.toString());
		    }
		    for (JSError message : compiler.getErrors())
		    {
		      System.err.println("Error message: " + message.toString());
		    }
		    FileWriter outputFileWriter = new FileWriter(outputFile);
		    outputFileWriter.write(output);
		    outputFileWriter.close();
		}*/
		
		
		
	}
	
	public static void main(String[] args) throws Exception
	{
		JSComplierDemo objCompiler = new JSComplierDemo();
		String[] arrComponent = {"nsProgressBar","nsGrid"};
		objCompiler.loadBaseJSFile();
		objCompiler.loadBaseCSSFile();
		for(String component:arrComponent)
		{
			objCompiler.loadJSFile(component);
			objCompiler.loadCSSFile(component);
		}
		// These are external JavaScript files you reference but don't want changed
	    /*String externalJavascriptResources[] = {
	        "jquery.js",
	        "jqueryui.js"
	    };*/
		// These are the files you want optimized
		
		
	    /*String primaryJavascriptToCompile[] = { 
	    		baseJSURL + "prototype\\base\\nsContainerBase.js",
	    		baseJSURL + "prototype\\nsGrid.js",
	    };
	    // This is where the optimized code will end up
	    String outputFilename = basePath + "generated\\combined.min.js";
	    Compiler compiler = new Compiler();
	    CompilerOptions options = new CompilerOptions();
	    //CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
	    options.setLanguageIn(LanguageMode.ECMASCRIPT_2015);
		options.setLanguageOut(LanguageMode.ECMASCRIPT5_STRICT);
		options.setAssumeStrictThis(true);
	    //WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
	    //CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
		CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
	    
	    List<SourceFile> externalJavascriptFiles = new ArrayList<SourceFile>();
	    List<SourceFile> primaryJavascriptFiles = new ArrayList<SourceFile>();
	    try 
	    {
	    	primaryJavascriptFiles = CommandLineRunner.getBuiltinExterns(CompilerOptions.Environment.BROWSER);
		} 
	    catch (IOException e) 
	    {
		    System.out.println("Exception raised");
		}
	    for (String filename : primaryJavascriptToCompile)
	    {
	      primaryJavascriptFiles.add(SourceFile.fromFile(filename));
	    }
	    Result result = compiler.compile(externalJavascriptFiles, primaryJavascriptFiles, options);
	    String output = compiler. toSource();
	 
	    for (JSError message : compiler.getWarnings())
	    {
	      System.err.println("Warning message: " + message.toString());
	    }
	 
	    for (JSError message : compiler.getErrors())
	    {
	      System.err.println("Error message: " + message.toString());
	    }
	 
	    FileWriter outputFile = new FileWriter(outputFilename);
	    outputFile.write(output);
	    outputFile.close();*/

	}

}
