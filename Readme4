"use strict";
var nsGrid1 = Object.create(nsContainerBase);

nsGrid1.initializeComponent = function() 
{
	this.base.initializeComponent();
	this.GRID_TYPE_HIERARCHICAL = "hierarchical";
	this.GRID_TYPE_GROUP = "group";
	this.GRID_TYPE_NORMAL = "normal";
	this.ITEM_UNSELECTED = "itemUnselected";
	this.ITEM_SELECTED = "itemSelected";
	this.ITEM_UNSELECTED = "itemUnselected";
	this.PAGINATION_TYPE_SCROLL = "scroll";
	this.PAGINATION_TYPE_PAGES = "pages";
	this.PAGINATION_MODE_AUTO = "auto";
	this.PAGINATION_MODE_MANUAL = "manual";
	this.RESPONSIVE_MODE_STACK = "stack";
	this.RESPONSIVE_MODE_COLUMN_TOGGLE = "columnToggle";
	//this.initializeDOM(ns.NSDATAGRID_CSS);
	
	this.__OUTER_CONTAINER_ID = "divDataSet";
	this.__TITLE_CONTAINER_ID = "divTitleBar";
	this.__TABLE_HEADER_CONTAINER_ID = "divHeaderContainer";
	this.__TABLE_HEADER_ID = "tblHeader";
	this.__TABLE_BODY_CONTAINER_ID = "divBodyContainer";
	this.__TABLE_BODY_ID = "tblBody";
	this.__PAGINATION_CONTROL_ID = "divPagination";
	
	this.__CLASS_TABLE = "nsDataGridTable";
	this.__CLASS_TITLEBAR = "nsDataGridTitleBar";
	this.__CLASS_TABLE_HEADER_CELL = "nsDataGridHeader";
	this.__CLASS_BODY_CONTAINER = "nsDataGridBodyContainer";
	this.__CLASS_ODD_ROW = "nsDataGridOddRow";
	this.__CLASS_EVEN_ROW = "nsDataGridEvenRow";
	this.__CLASS_GROUP_CELL = "nsGroupCell";
	this.__CLASS_CELL_CHILD = "nsCellChild";
	this.__CLASS_SORTING_ASC = "sorted_asc";
	this.__CLASS_SORTING_DESC = "sorted_desc";
	
	this.__DEFAULT_COLUMN_WIDTH = 100;
	this.__MIN_DRAG_OFFSET = 100;
	
	
	this.__columns = [];
	this.__selectedItems = [];
	
	this.__title = null;
	this.__type = this.GRID_TYPE_NORMAL;
	this.__dataSource = [];
	this.__enableHierarchical = false;
	this.__enableGrouping = false;
	this.__enableMouseHover = false;
	this.__enableMultiSelection = false;
	this.__customScrollerRequired = false;
	this.__columnResizable = false;
	this.__columnDraggable = false;
	this.__enableContextMenu = false;
	this.__childField = "children";
	this.__groupByField = null;
	this.__columnMinWidth = 50;
	this.__pageSize = 50;
	this.__rowHeight = -1;
	this.__noDataMessage = "No matching records found";
	//stores initial Column Count 
	this.__initialColumnCount = 0;
	this.__initialTableWidth = 0;
	this.__enablePagination = false;
	this.__enableVirtualScroll = false;
	this.__enableServerCall = false;
	this.__enableExport = false;
	this.__enableResponsive = false;
	
	this.__isResponsiveModeStack = true;
	this.__isResponsiveModeColumnToggle = false;
	this.__totalRecords = 0;
	this.__contextMenuProvider = null;
	this.__contextMenuSetting = null;
	this.__responsiveMode = this.RESPONSIVE_MODE_STACK;
	this.__fetchRecordCallBack = null;
	//for Virtual Scroll
	this.__virtualRowHeight = 20;
	this.__rowCount = 0;
	this.__scrollOffsetPosition = 0;
	this.__lastScrollPosition = 0;
	
	this.__divOuterContainer = null;
	this.__divHeaderContainer = null;
	this.__divBodyContainer = null;
	this.__tblHeader = null;
	this.__tblBody = null;
	this.__tblBodyBody = null;
	//stores whether mouse is on GridLine
	this.__onGridLine = false;
	this.__addRemoveRowCallInternal = false;
	//cell which is being resized
	this.__resizingHeader = null;
	this.__resizingHeaderCell = null;
	this.__resizingBodyCell = null;
	this.__resizeHandler = null;
	
	//object for column dragging
	this.__objColumnDrag = null;
	
	this.__loader = null;
	this.__scroller = null;
	this.__groupCollection = null;
	this.__groupSource = null;
	this.__contextMenu = null;
	this.__exportMenu = null;
	this.__exportFileName = null;
	this.__exportMenuDataSource = [{id: 0,title: 'XLS',iconHTML: '<i class="fa fa-file-excel-o fa-lg"></i>'},
	                               {id: 1,title: 'CSV',iconHTML: '<i class="fa fa-file-excel-o fa-lg"></i>',separatorBelow:true},
	                               {id: 2,title: 'DOC',iconHTML: '<i class="fa fa-file-word-o fa-lg"></i>'},
	                               {id: 3,title: 'TEXT',iconHTML: '<i class="fa fa-file-text-o fa-lg"></i>',separatorBelow:true},
	                               {id: 4,title: 'XML',iconHTML: '<i class="fa fa-file-code-o fa-lg"></i>'},
	                               {id: 5,title: 'JSON',iconHTML: '<i class="fa fa-file-o" fa-lg></i>',separatorBelow:true},
	                               {id: 6,title: 'PDF',iconHTML: '<i class="fa fa-file-pdf-o fa-lg"></i>'},
	                               {id: 7,title: 'IMAGE',iconHTML: '<i class="fa fa-file-picture-o fa-lg"></i>',separatorBelow:true},
	                               {id: 8,title: 'XLSX',iconHTML: '<i class="fa fa-file-excel-o fa-lg"></i>'},
	                               {id: 9,title: 'DOCX',iconHTML: '<i class="fa fa-file-word-o fa-lg"></i>'}];
	this.__arrWrapper = null;
	this.__arrInternalSource = null;
	this.__fieldRowHtml = this.getID() + "_row";
	this.__fieldColIndex = this.getID() + "_col_index";
	this.__fieldIndex = this.getID() + "_row_index";
	this.__fieldRow = this.getID() + "_row";
	this.__fieldRowVisible = this.getID() + "_row_visible";
	this.__fieldParentIndex = this.getID() + "_parent_index";
	this.__fieldHasChild = this.getID() + "_row_hasChild";
	this.__fieldHasParent = this.getID() + "_row_hasParent";
	this.__fieldIsCollapsed = this.getID() + "_row_isCollapsed";
	
	this.__headerClickRef = null;
	this.__headerMouseOverRef = null;
	this.__headerMouseOutRef = null;
	this.__headerMouseMoveRef = null;
	this.__headerMouseDownRef = null;
	this.__doResizeRef = null;
	this.__endResizeRef = null;
	this.__synchronizeTablesRef = null;
	this.__dragColumnMoveRef = null;
	this.__dragColumnEndRef = null;
	this.__bodyScrollRef = null;
	
	this.__objGrid = null;
};

nsGrid1.setComponentProperties = function() 
{
	this.base.setComponentProperties();
	if(this.hasAttribute("nsTitle"))
	{
		this.__title = this.getAttribute("nsTitle");
	}
	if(this.hasAttribute("type"))
	{
		this.__type = this.getAttribute("type");
	}
	if(this.hasAttribute("enableMouseHover"))
	{
		this.__enableMouseHover = Boolean.parse(this.getAttribute("enableMouseHover"));
	}
	if(this.hasAttribute("enableMultiSelection"))
	{
		this.__enableMultiSelection = Boolean.parse(this.getAttribute("enableMultiSelection"));
	}
	if(this.hasAttribute("childField"))
	{
		this.__childField = this.getAttribute("childField");
	}
	if(this.hasAttribute("groupByField"))
	{
		this.__groupByField = this.getAttribute("groupByField");
	}
	if(this.hasAttribute("columnMinWidth"))
	{
		this.__columnMinWidth = this.getAttribute("columnMinWidth");
	}
	if(this.hasAttribute("customScrollerRequired"))
	{
		this.__customScrollerRequired =  Boolean.parse(this.getAttribute("customScrollerRequired"));
	}
	if(this.hasAttribute("columnResizable"))
	{
		this.__columnResizable =  Boolean.parse(this.getAttribute("columnResizable"));
	}
	if(this.hasAttribute("columnDraggable"))
	{
		this.__columnDraggable = Boolean.parse(this.getAttribute("columnDraggable"));
	}
	if(this.hasAttribute("enablePagination"))
	{
		this.__enablePagination = Boolean.parse(this.getAttribute("enablePagination"));
	}
	if(this.hasAttribute("paginationType"))
	{
		this.__paginationType = this.getAttribute("paginationType");
	}
	if(this.hasAttribute("paginationMode"))
	{
		this.__paginationMode =  this.getAttribute("paginationMode");
	}
	if(this.hasAttribute("pageSize"))
	{
		this.__pageSize = parseInt(this.getAttribute("pageSize"));
	}
	if(this.hasAttribute("totalRecords"))
	{
		this.__totalRecords =  parseInt(this.getAttribute("totalRecords"));
	}
	if(this.hasAttribute("fetchRecordCallBack"))
	{
		this.__fetchRecordCallBack =  this.getAttribute("fetchRecordCallBack");
		this.__fetchRecordCallBack = this.util.getFunction(this.__fetchRecordCallBack);
	}
	if(this.hasAttribute("enableContextMenu"))
	{
		this.__enableContextMenu = Boolean.parse(this.getAttribute("enableContextMenu"));
	}
	if(this.hasAttribute("contextMenuProvider"))
	{
		this.__contextMenuProvider =  this.getAttribute("contextMenuProvider");
		this.__contextMenuProvider = this.util.getFunction(this.__contextMenuProvider);
	}
	if(this.hasAttribute("enableVirtualScroll"))
	{
		this.__enableVirtualScroll = Boolean.parse(this.getAttribute("enableVirtualScroll"));
	}
	if(this.hasAttribute("enableServerCall"))
	{
		this.__enableServerCall = Boolean.parse(this.getAttribute("enableServerCall"));
	}
	if(this.hasAttribute("rowHeight"))
	{
		this.__rowHeight =  parseInt(this.getAttribute("rowHeight"));
	}
	if(this.hasAttribute("enableExport"))
	{
		this.__enableExport =  Boolean.parse(this.getAttribute("enableExport"));
	}
	if(this.hasAttribute("exportFileName"))
	{
		this.__exportFileName = this.getAttribute("exportFileName");
	}
	if(this.hasAttribute("enableResponsive"))
	{
		this.__enableResponsive =  Boolean.parse(this.getAttribute("enableResponsive"));
	}
	if(this.hasAttribute("responsiveMode"))
	{
		this.__responsiveMode = this.getAttribute("responsiveMode");
	}
	if(this.hasAttribute("noDataMessage"))
	{
		this.__noDataMessage = this.getAttribute("noDataMessage");
	}
	this.__setGridType();
	this.__objGrid.__initialize();
	this.__setResponsiveMode();
	this.__checkForVirtualMode();
	this.__addSVGInPage();
};

nsGrid1.propertyChange = function(attrName, oldVal, newVal, setProperty) 
{
	this.__objGrid.propertyChange(attrName, oldVal, newVal, setProperty);
	this.base.propertyChange(attrName, oldVal, newVal, setProperty);
};

nsGrid1.componentResized = function(event) 
{
	this.__objGrid.__setMeasurement();
	this.__renderBody(false);
	this.base.componentResized(event);
};

nsGrid1.deviceViewChanged = function(conditionTrue,queryIndex,query) 
{
	queryIndex = parseInt(queryIndex);
	//console.log(conditionTrue,queryIndex);
	/*if(queryIndex < 0)
	{
		queryIndex = 0;
	}*/
	if(this.__isResponsiveModeStack)
	{
		if(conditionTrue)
		{
			this.util.addStyleClass(this,"nsMobileStackGrid");
		}
		else
		{
			this.util.removeStyleClass(this,"nsMobileStackGrid");
		}
	}
	else if(this.__isResponsiveModeColumnToggle)
	{
		var className = "nsMobileColumnToggleGrid";
		var postFix = "";
		switch(queryIndex)
		{
			case 0:
				postFix = ">960";
				break;
			case 1:
				postFix = "960";
				break;
			case 2:
				postFix = "800";
				break;
			case 3:
				postFix = "640";
				break;
			case 4:
				postFix = "480";
				break;
			case 5:
				postFix = "320";
				break;
		}
		var base = this;
		var reset = function()
		{
			base.util.removeStyleClass(base,"nsMobileColumnToggleGrid960");
			base.util.removeStyleClass(base,"nsMobileColumnToggleGrid800");
			base.util.removeStyleClass(base,"nsMobileColumnToggleGrid640");
			base.util.removeStyleClass(base,"nsMobileColumnToggleGrid480");
			base.util.removeStyleClass(base,"nsMobileColumnToggleGrid320");
		};
		if(postFix)
		{
			reset();
			if(postFix != ">960" && conditionTrue)
			{
				this.util.addStyleClass(this,className + postFix);
			}
		}
	}
	this.base.deviceViewChanged(conditionTrue,query);
};

nsGrid1.setColumn = function(arrColumns)
{
	if(arrColumns && arrColumns.length > 0)
	{
		this.__columns = arrColumns;
		this.__objGrid.__checkForAdditionalColumns();
		for(var count = 0;count < this.__columns.length;count++)
		{
			var item = this.__columns[count];
			this.__processColumnObject(item,count);
		}
	}
	else
	{
		this.__columns = [];
	}
	this.__createStructure();
	this.__addColumnPseudoStyle();
};

nsGrid1.setContextMenuSetting = function(contextMenuSetting)
{
	this.__contextMenuSetting = contextMenuSetting;
};

nsGrid1.dataSource = function(source)
{
	var start = new Date().getTime();
	this.__dataSource = source;
	if(this.__dataSource && this.__dataSource.length > 0)
	{
		this.__objGrid.dataSource();
	}
	else
	{
		this.__arrWrapper = [];
		this.__arrInternalSource = [];
		this.__updateTotalRecords(0);
	}
	this.__objGrid.__setMeasurement();
	this.__resetColumnHeaders();
	this.__renderBody(false);
	this.__setHeaderSortFunction();
	//this.style.display = "";
	var end = new Date().getTime();
	var time = end - start;
	/*
	var dragResizeSetting = {element:this,
			dragEnabled:true,
			resizeEnabled:true,
			minWidth:100,
			minHeight:100};
	this.__nsDragResizeElements = new this.util.nsDragResizeElements(dragResizeSetting);*/
	console.log('Execution time: ' + (time / 1000.0));
};

nsGrid1.addRows = function(source)
{
	if(!this.__enableHierarchical && !this.__enableGrouping && source && source.length > 0)
	{
		var startIndex = this.__arrInternalSource.length;
		this.__objGrid.__setWrapperSource(source,startIndex);
		this.__arrInternalSource = this.__arrInternalSource.concat(source);
		this.__createBodyBody(this.__arrInternalSource,startIndex,this.__arrInternalSource.length);
   	 	if(!this.__addRemoveRowCallInternal)
   	 	{
   	 		this.__arrWrapper = this.__arrWrapper.concat(source);
   	 		this.__updateTotalRecords();
   	 	}
   	 	this.__addRemoveRowCallInternal = false;
	}
};

nsGrid1.removeRows = function(arrIndex)
{
	if(!this.__enableHierarchical && !this.__enableGrouping && arrIndex && arrIndex.length > 0)
	{
		arrIndex.sort();
   	 	for (var rowIndex = arrIndex.length - 1; rowIndex >= 0; rowIndex--)
	    {
   	 		var index = arrIndex[rowIndex];
   	 		if(index > 0 && index < this.__arrWrapper.length)
   	 		{
	   	 		//if virtual scroll or Pagination of type Page is enabled then do not remove rows
	   	 		if(!(this.__enableVirtualScroll || (this.__enablePagination && !this.__isPaginationTypeScroll)))
	   	 		{
	   	 			this.__tblBodyBody.deleteRow(index);
	   	 		}
	   	 		this.__arrWrapper.splice(index, 1);
   	 		}
	    }
   	 	if(!this.__addRemoveRowCallInternal)
	 	{
	 		this.__updateTotalRecords();
	 	}
	 	this.__addRemoveRowCallInternal = false;
	}
};

nsGrid1.groupBy = function(groupByField)
{
	if(this.__enableGrouping && groupByField && groupByField.length > 0)
	{
		this.setAttribute("groupByField",groupByField);
	}
};

nsGrid1.expandAll = function()
{
	if(this.__enableHierarchical || this.__enableGrouping)
	{
		this.__expandCollapseAll(this.__arrWrapper,false);
	}
};

nsGrid1.collapseAll = function()
{
	if(this.__enableHierarchical || this.__enableGrouping)
	{
		this.__expandCollapseAll(this.__arrWrapper,true);
	}
};

nsGrid1.setFontSize = function(fontSize)
{
	if(this.__tblHeader)
	{
		this.__tblHeader.style.fontSize = fontSize;
	}
	if(this.__tblBody)
	{
		this.__tblBody.style.fontSize = fontSize;
	}
};

//assuming column is added at last
//if reposition then use swapColumn
nsGrid1.addColumn = function(objColumn)
{
	if(objColumn)
	{
		this.__processColumnObject(objColumn,this.__columns.length);
		this.__columns[this.__columns.length] = objColumn;
		if(this.__tblHeader && this.__tblHeader.tHead && this.__tblHeader.tHead.rows && this.__tblHeader.tHead.rows.length > 0)
		{
			var headerRow = this.__tblHeader.tHead.rows[0];
			if(this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows && this.__tblHeader.tBodies[0].rows.length > 0)
			{
				var headerBodyRow = this.__tblHeader.tBodies[0].rows[0];
				var rendererRow = this.__tblHeader.tBodies[0].rows[1];
				this.__createHeaderHeaderCell(objColumn,headerRow);
			    this.__createHeaderBodyCell(objColumn,headerBodyRow,rendererRow,this.__columns.length - 1);
			}
		}
		if(this.__tblBody && this.__tblBody.tHead && this.__tblBody.tHead.rows && this.__tblBody.tHead.rows.length > 0)
	    {
			var bodyRow = this.__tblBody.tHead.rows[0];
	    	if(this.__tblBody.tBodies && this.__tblBody.tBodies.length > 0 && this.__tblBody.tBodies[0].rows && this.__tblBody.tBodies[0].rows.length > 0)
			{
	    		var arrRows = this.__tblBody.tBodies[0].rows;
	    		var arrItems = this.__getAllItems();
	    		this.__createBodyHeaderCell(objColumn,bodyRow);
	    		var row = null;
	    		var item = null;
	    		for (var rowCount = 0; rowCount < arrRows.length; rowCount++) 
	    		{
	    			row = arrRows[rowCount];
	    			item = arrItems[rowCount];
	    			var cell = this.__createBodyRowCell(row);
	    			this.__setBodyCellProperty(row,cell,item,objColumn,this.__columns.length - 1,-1,0,true);
	    	    }
			}
	    }
		this.__alignTables(false);
		this.__setHeaderSortFunctionForItem(objColumn);
		this.__addColumnPseudoStyle();
		return true;
	}
	else
	{
		this.util.warning("nsGrid1","Please pass valid Column object to be added.");
		return false;
	}
};

//programmatic method to call deviceViewChanged
nsGrid1.changeDeviceView = function(conditionTrue)
{
	this.deviceViewChanged(conditionTrue);
	
};

nsGrid1.removeColumn = function(column)
{
	var index = this.__getColumnIndexForSwapOrRemove(column);
	if(index > -1)
	{
		if(this.__isColumnValidForSwapOrRemove(index,"deleted"))
		{
			this.__removeHeaderCell(index);
			this.__removeBodyColumn(index);
			this.__alignTables(false);
			this.__columns.splice(index, 1);
			this.__addColumnPseudoStyle();
			return true;
		}
	}
	return false;
};

nsGrid1.swapColumns = function(sourceColumn,destinationColumn)
{
	var sourceIndex = this.__getColumnIndexForSwapOrRemove(sourceColumn);
	var destinationIndex = this.__getColumnIndexForSwapOrRemove(destinationColumn);
	if(sourceIndex > -1 && destinationIndex > -1)
	{
		var sourceValid = this.__isColumnValidForSwapOrRemove(sourceIndex,"swapped");
		var destinationValid = this.__isColumnValidForSwapOrRemove(destinationIndex,"swapped");
		if(sourceValid && destinationValid)
		{
			this.__swapHeaderCell(sourceIndex,destinationIndex);
			this.__swapBodyCell(sourceIndex,destinationIndex);
			this.__alignTables(false);
			this.util.swapArrayItems(this.__columns,sourceIndex,destinationIndex);
			this.__addColumnPseudoStyle();
			return true;
		}
	}
	return false;
};

nsGrid1.sortBy = function(column,isAscending)
{
	var index = this.__getColumnIndexForSwapOrRemove(column);
	if(index > -1 && this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows && this.__tblHeader.tBodies[0].rows.length > 0)
	{
		var headerBodyRow = this.__tblHeader.tBodies[0].rows[0];
		var arrHeaderCells = headerBodyRow.getElementsByTagName("td");
		var cell = arrHeaderCells[index];
	    var columnDetail = this.__getColumnObject(cell.getAttribute("currentColumnIndex"));
	    this.__handleSorting(cell,columnDetail,isAscending);
	}
};

nsGrid1.updateRow = function(index)
{
	var item = this.__getItemByIndex(index);
	if(item)
	{
		var row = item[this.__fieldRow];
		var cells = row.getElementsByTagName("td");
		for (var colIndex = 0; colIndex < this.__columns.length; colIndex++)
        {
			var cell = cells[colIndex];
        	var colItem = this.__columns[colIndex];
        	this.__updateCellText(row,cell,item,colItem,index,colIndex);
        }
	}
};

nsGrid1.filter = function(filter,setting,recordLimit)
{
	this.__handleFiltering(filter,setting,recordLimit);
};

nsGrid1.resetFilter = function()
{
	this.__resetFiltering();
};

nsGrid1.highlightText = function(dataField,text)
{
	var colItem = this.__getColumnObjectByDataField(dataField);
	if(colItem)
	{
		var index = colItem[this.__fieldColIndex];
		var arrRows = this.__tblBodyBody.rows;
		var length = arrRows.length;
		for(var rowIndex = 0; rowIndex < length; rowIndex++)
	    {
			var cell = arrRows[rowIndex].cells[index];
			this.util.highlightText(cell,text,"nsTextHighlight");
	    }
	}
};

nsGrid1.removeComponent = function()
{
	if(this.__scroller)
	{
		this.__scroller.__destroyElements();
		this.__scroller = null;
	}
	if(this.__contextMenu)
	{
		this.__contextMenu.remove();
		this.__contextMenu = null;
	}
	if(this.__exportMenu)
	{
		this.__exportMenu.remove();
		this.__exportMenu = null;
	}
	if(this.__bodyScrollRef)
	{
		this.util.removeEvent(this.__divBodyContainer,"scroll",this.__bodyScrollRef);
		this.__bodyScrollRef = null;
	}
	if(this.__synchronizeTablesRef)
	{
		this.util.removeEvent(this.__divBodyContainer,"scroll",this.__synchronizeTablesRef);
		this.__synchronizeTablesRef = null;
	}
	this.base.removeComponent();
};

nsGrid1.__processColumnObject = function(objColumn,index)
{
	if(objColumn)
	{
		objColumn[this.__fieldColIndex] = index;
		if(objColumn.hasOwnProperty("width"))
		{
			var widthUnit = this.util.getDimensionUnit(objColumn["width"]);
			if(widthUnit === 0)
			{
				objColumn["width"] = objColumn["width"] + "px";
			}
		}
		objColumn["sortable"] = Boolean.parse(objColumn["sortable"]);
		objColumn["searchable"] = Boolean.parse(objColumn["searchable"]);
		objColumn["sortDescending"] = Boolean.parse(objColumn["sortDescending"]);
		if(this.__columnResizable)
		{
			if(objColumn.hasOwnProperty("resizable"))
			{
				objColumn["resizable"] = Boolean.parse(objColumn["resizable"]);
			}
			else
			{
				objColumn["resizable"] = true;
			}
		}
		else
		{
			objColumn["resizable"] = false;
		}
		if(this.__columnDraggable)
		{
			if(objColumn.hasOwnProperty("draggable"))
			{
				objColumn["draggable"] = Boolean.parse(objColumn["draggable"]);
			}
			else
			{
				objColumn["draggable"] = true;
			}
		}
		else
		{
			objColumn["draggable"] = false;
		}
		if(objColumn.hasOwnProperty("showMenu"))
		{
			objColumn["showMenu"] = Boolean.parse(objColumn["showMenu"]);
		}
		else
		{
			objColumn["showMenu"] = true;
		}
		if(objColumn.hasOwnProperty("minWidth"))
		{
			objColumn["minWidth"] = this.util.getDimensionAsNumber(null,objColumn["minWidth"]);
		}
		else
		{
			objColumn["minWidth"] = this.__columnMinWidth;
		}
		//itemRendrer property gets precedence over template
		if(objColumn.hasOwnProperty("itemRenderer"))
		{
			var itemRenderer = objColumn["itemRenderer"];
			if (typeof itemRenderer === "string" || itemRenderer instanceof String)
			{
				if(this.util.isFunction(itemRenderer))
				{
					objColumn.itemRenderer = window[itemRenderer];
				}
			}
		}
		else if(objColumn.hasOwnProperty("template") && objColumn["template"])
		{
			//setData should be before template for checking
			if(objColumn.hasOwnProperty("setData"))
			{
				var setData = objColumn["setData"];
				if (typeof setData === "string" || setData instanceof String)
				{
					if(this.util.isFunction(setData))
					{
						objColumn.setData = window[setData];
					}
				}
			}
			objColumn.templateRenderer = this.util.getTemplate(objColumn["template"]);
			/*else
			{
				var renderer = new this.util.defaultRenderer();
				objColumn.templateRenderer = renderer.getRenderer();
				objColumn.setData = renderer.setData.bind(renderer);
			}*/
		}
		else if(objColumn.hasOwnProperty("labelFunction"))
		{
			var labelFunction = objColumn["labelFunction"];
			if (typeof labelFunction === "string" || labelFunction instanceof String)
			{
				if(this.util.isFunction(labelFunction))
				{
					objColumn.labelFunction = window[labelFunction];
				}
			}
		}
		if(objColumn.hasOwnProperty("headerRenderer"))
		{
			var headerRenderer = objColumn["headerRenderer"];
			if (typeof headerRenderer === "string" || headerRenderer instanceof String)
			{
				if(this.util.isFunction(headerRenderer))
				{
					objColumn.headerRenderer = window[headerRenderer];
				}
			}
		}
		else if(objColumn.hasOwnProperty("headerTemplate") && objColumn["headerTemplate"])
		{
			objColumn.headerTemplate = this.util.getTemplate(objColumn["headerTemplate"]);
		}
		if(objColumn.hasOwnProperty("filterRenderer"))
		{
			var filterRenderer = objColumn["filterRenderer"];
			if (typeof filterRenderer === "string" || filterRenderer instanceof String)
			{
				if(this.util.isFunction(filterRenderer))
				{
					objColumn.filterRenderer = window[filterRenderer];
				}
			}
		}
		else if(objColumn.hasOwnProperty("filterTemplate") && objColumn["filterTemplate"])
		{
			objColumn.filterTemplate = this.util.getTemplate(objColumn["filterTemplate"]);
		}
		if(this.__isResponsiveModeColumnToggle)
		{
			if(!objColumn.hasOwnProperty("priority"))
			{
				objColumn.priority = 6;
			}
			objColumn.priority = parseInt(objColumn.priority);
		}
	}
	return objColumn;
};

nsGrid1.__createStructure = function()
{
	var divOuterContainer = this.__createOuterContainer();
	var divTitleBar = this.__createTitleBar(divOuterContainer);
	this.__createTableStructure(divOuterContainer);
	if(divTitleBar && this.__title && this.__title.length > 0)
	{
		var spanTitle = divTitleBar.firstChild;
		var body = document.body || document.getElementsByTagName('body')[0];
		var bodyPaddingLeft = this.util.getDimensionAsNumber(body,this.util.getStyleValue(body,"padding-left"));
		var bodyPaddingTop = this.util.getDimensionAsNumber(body,this.util.getStyleValue(body,"padding-top"));
		var bodyMarginLeft = this.util.getDimensionAsNumber(body,this.util.getStyleValue(body,"margin-left"));
		var bodyMarginTop = this.util.getDimensionAsNumber(body,this.util.getStyleValue(body,"margin-top"));
		var paddingLeft = this.util.getDimensionAsNumber(this,this.util.getStyleValue(this,"padding-left"));
		var paddingTop = this.util.getDimensionAsNumber(this,this.util.getStyleValue(this,"padding-top"));
		var marginLeft = this.util.getDimensionAsNumber(this,this.util.getStyleValue(this,"margin-left"));
		var marginTop = this.util.getDimensionAsNumber(this,this.util.getStyleValue(this,"margin-top"));
		var setting = {offsetX:(-1 * (bodyPaddingLeft + bodyMarginLeft + paddingLeft + marginLeft)),offsetY:(-1 * (bodyPaddingTop + bodyMarginTop + paddingTop + marginTop))};
		this.util.addAnimatedLineOnHover(spanTitle,setting);
	}
};

nsGrid1.__createOuterContainer = function()
{
	if(this.__divOuterContainer)
	{
		this.removeComponent();
		this.__divOuterContainer.parentNode.removeChild(this.__divOuterContainer);
		this.__divOuterContainer = null;
	}
	this.__divOuterContainer = this.util.createDiv(this.getID() + this.__OUTER_CONTAINER_ID,"nsDataGridContainer");
	this.__divOuterContainer.style.width = this.util.getStyleValue(this,"width");
	this.__divOuterContainer.style.height = this.util.getStyleValue(this,"height");
	this.addChild(this.__divOuterContainer);
	return this.__divOuterContainer;
};

nsGrid1.__createTitleBar= function(parentElement)
{
	if(parentElement && ((this.__title && this.__title.length > 0) || this.__enableExport))
	{
		var divTitleBar = this.util.createDiv(this.getID() + this.__TITLE_CONTAINER_ID,this.__CLASS_TITLEBAR);
		if(this.__title && this.__title.length > 0)
		{
			var spanTitle = document.createElement("span");
			var titleText = document.createTextNode(this.__title);
			spanTitle.appendChild(titleText);
			divTitleBar.appendChild(spanTitle);
		}
		if(this.__enableExport)
		{
			var spanExport = document.createElement("span");
			spanExport.style.cursor = "pointer";
			spanExport.style.float = "right";
			var objSVG = new NSSvg();
			var exportID = new NSSvgShapes().__EXPORT_ICON_ID;
			var svg = objSVG.addSVG(spanExport,exportID + "exportsvg","nsExportIcon");
			objSVG.addUse(svg,exportID + "use",null,"#" + exportID);
			divTitleBar.appendChild(spanExport);
			if(!this.__exportMenu)
			{
				var exportMenuSetting = {parent:spanExport,dataSource:this.__exportMenuDataSource,isContextMenu:false,createRunTime:false,eventType:"click",defaultHandler:this.__exportHandler.bind(this),
						position:this.util.POS_BOTTOMLEFT};
				this.__exportMenu = new NSMenu(exportMenuSetting);
			}
		}
		parentElement.appendChild(divTitleBar);
		return divTitleBar;
	}
	return null;
};

nsGrid1.__createTableStructure= function(parentElement)
{
	if(parentElement)
	{
		this.__createHeader(parentElement);
		this.__createBody(parentElement);
	}
};

/******************************Header Creation *************************************/
nsGrid1.__createHeader= function(parentElement)
{	
	if(parentElement)
	{
		if(this.__divHeaderContainer)
		{
			this.__divHeaderContainer.parentNode.removeChild(this.__divHeaderContainer);
		}
		this.__divHeaderContainer = this.__createTableAndParent(this.getID() + this.__TABLE_HEADER_CONTAINER_ID,null,this.getID() + this.__TABLE_HEADER_ID);
		this.util.addStyleClass(this.__divHeaderContainer,"nsDataGridHeaderContainer");
		this.__divHeaderContainer.style.overflow = "hidden";
		parentElement.appendChild(this.__divHeaderContainer);
		this.__tblHeader = this.__divHeaderContainer.firstChild;
		this.util.addStyleClass(this.__tblHeader,"nsDataGridHeader");
		this.__createHeaderRows();
	}
};

nsGrid1.__createHeaderRows= function()
{
	if(this.__tblHeader && this.__columns && this.__columns.length > 0)
	{
		var header = this.__tblHeader.createTHead();
		var headerRow = header.insertRow(-1);
	    headerRow.style.height = "auto";
	    var body = document.createElement("tbody");
		this.__tblHeader.appendChild(body);
	    var bodyRow = body.insertRow(-1);
	    var rendererRow = body.insertRow(-1);
	    for (var colIndex = 0; colIndex < this.__columns.length; colIndex++)
	    {
	    	var colItem = this.__columns[colIndex];
	        this.__createHeaderHeaderCell(colItem,headerRow);
	        this.__createHeaderBodyCell(colItem,bodyRow,rendererRow,colIndex);
	    }
	}
};

nsGrid1.__createHeaderHeaderCell = function(colItem,headerRow)
{
	if(colItem && headerRow)
	{
		var headerCell = headerRow.insertCell(-1);
		headerCell.style.width = colItem["width"]; 
		this.__addPriorityClassInCell(headerCell,colItem);
	}
};

nsGrid1.__createHeaderBodyCell = function(colItem,bodyRow,rendererRow,index)
{
	if(colItem && bodyRow && rendererRow)
	{
		var bodyCell = bodyRow.insertCell(-1);
		var colID = "col" + colItem["headerText"];
		bodyCell.setAttribute("id",colID);
		this.util.addStyleClass(bodyCell , this.__CLASS_TABLE_HEADER_CELL);
		bodyCell.setAttribute("orignalColumnIndex",index);
	    bodyCell.setAttribute("currentColumnIndex",index);
	    
	    this.__headerClickRef = this.__headerClickHandler.bind(this);
    	this.__headerMouseOverRef = this.__headerMouseOverHandler.bind(this);
    	this.__headerMouseOutRef = this.__headerMouseOutHandler.bind(this);
    	this.__headerMouseDownRef = this.__headerMouseDownHandler.bind(this);
        this.util.addEvent(bodyCell,"click",this.__headerClickRef);
        this.util.addEvent(bodyCell,"mouseover",this.__headerMouseOverRef);
        this.util.addEvent(bodyCell,"mouseout",this.__headerMouseOutRef);
        this.util.addEvent(bodyCell,"mousedown",this.__headerMouseDownRef);
        
        var divCell = this.util.createDiv(colID + "container","nsDataGridHeaderCellContainer"); 
        bodyCell.appendChild(divCell);
		var divText = this.util.createDiv(colID + "text");
		divCell.appendChild(divText);
		this.__addHeaderRenderer(divText,colItem,index);
		if(colItem.hasOwnProperty("sortable") && colItem["sortable"])
		{
			var divSorting = this.util.createDiv(colID + "SortContainer");
			divCell.appendChild(divSorting);
			var divSortAsc = this.util.createDiv(colID + "SortAsc","nsSortAsc"); 
			divSorting.appendChild(divSortAsc);
			var divSortSpacer = this.util.createDiv(colID + "SortSpacer","nsSortSpacer"); 
			divSorting.appendChild(divSortSpacer);
			var divSortDesc = this.util.createDiv(colID + "SortDesc","nsSortDesc"); 
			divSorting.appendChild(divSortDesc);
		}
		if(colItem["showMenu"])
		{
			var arrMenu = this.__getHeaderMenuDataProvider(bodyCell);
			if(arrMenu && arrMenu.length > 0)
			{
				var divMenuContainer = this.util.createDiv(colID + "MenuContainer");
				var objSVG = new NSSvg();
				var svg = objSVG.addSVG(divMenuContainer,colID + "menusvg","nsMenuArrowSVG",null,null,null,null,null,null,true);
				objSVG.addUse(svg,colID + "use","nsMenuUse","#svgCircleDownArrow");
				divCell.appendChild(divMenuContainer);
				
				var menuSetting = {parent:divMenuContainer,isContextMenu:false,createRunTime:false,dataSource:arrMenu,targetType:"TD"
								,defaultHandler:this.__headerMenuHandler.bind(this),eventHandler:this.__headerMenuClickHandler.bind(this)
								,position:this.util.POS_BOTTOMRIGHT};
				//place the menu for 2nd last and last column to bottom right
				if(index === this.__columns.length - 1 || index === this.__columns.length - 2)
				{
					menuSetting.position = this.util.POS_BOTTOMLEFT;
				}
				var headerMenu = new NSMenu(menuSetting);
			}
		}
		var rendererCell = rendererRow.insertCell(-1);
		this.util.addStyleClass(rendererCell,"nsDataGridHeaderRenderer");
		this.__addFilterRenderer(rendererRow,rendererCell,colItem,index,colID);
		this.__addPriorityClassInCell(bodyCell,colItem);
		this.__addPriorityClassInCell(rendererCell,colItem);
	}
};

nsGrid1.__addHeaderRenderer = function(div,colItem,colIndex)
{
	if(colItem)
	{
		var templateRenderer = colItem["headerTemplate"];
		var itemRenderer = colItem["headerRenderer"];
		if(itemRenderer)
		{
			var objRenderer = itemRenderer(colItem,colIndex);
			if(objRenderer)
			{
				if(this.util.isString(objRenderer))
				{
					var compSpan = document.createElement("span");
					compSpan.innerHTML = objRenderer;
					div.appendChild(compSpan);
				}
				else
				{
					div.appendChild(objRenderer);
				}
			}
		}
		else if(templateRenderer)
		{
			div.appendChild(templateRenderer.cloneNode(true));
		}
		else
		{
			this.util.addStyleClass(div,"nsHeaderText");
			var headerText = " ";
			if(colItem.hasOwnProperty("headerText") && colItem["headerText"])
	        {
	        	headerText = colItem["headerText"];
	        }
			var headerTextNode = document.createTextNode(headerText);
			div.appendChild(headerTextNode);
		}
	}
};

nsGrid1.__addFilterRenderer = function(rendererRow,rendererCell,colItem,colIndex,colID)
{
	if(colItem && (colItem["filterTemplate"] || colItem["filterRenderer"]))
	{
		var divHeaderRendererContainer = this.util.createDiv(colID + "rendererContainer"); 
		var divRenderer = this.util.createDiv(colID + "renderer",null);
		divHeaderRendererContainer.appendChild(divRenderer);
		rendererCell.appendChild(divHeaderRendererContainer);
		var templateRenderer = colItem["filterTemplate"];
		var itemRenderer = colItem["filterRenderer"];
		if(itemRenderer)
		{
			var objRenderer = itemRenderer(colItem,colIndex);
			if(objRenderer)
			{
				if(this.util.isString(objRenderer))
				{
					var compSpan = document.createElement("span");
					compSpan.innerHTML = objRenderer;
					divRenderer.appendChild(compSpan);
				}
				else
				{
					divRenderer.appendChild(objRenderer);
				}
			}
		}
		else if(templateRenderer)
		{
			divRenderer.appendChild(templateRenderer.cloneNode(true));
		}
	}
};

nsGrid1.__setHeaderSortFunction = function()
{
	if(this.__arrWrapper && this.__arrWrapper.length > 0)
    {
		if(this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows.length > 0 && this.__tblHeader.tBodies[0].rows[0].cells.length > 0)
		{
			var headerCells = this.__tblHeader.tBodies[0].rows[0].cells;
			var dataSource = this.__getAllItems();
	        for(var colIndex = 0; colIndex < headerCells.length; colIndex++)
	        {
	        	var colItem = this.__columns[colIndex];
	        	this.__setHeaderSortFunctionForItem(colItem,dataSource);
	        }
		}
    } 
};

nsGrid1.__setHeaderSortFunctionForItem = function(colItem,dataSource)
{
	if(colItem)
	{
		if(colItem.hasOwnProperty("dataField") && colItem["dataField"] && colItem.hasOwnProperty("sortable") && colItem["sortable"] === true)
    	{
			//In case of addColumn() dataSource will be null 
			if(!dataSource)
			{
				dataSource = this.__getAllItems();
			}
    		var item = null;
    		for(var count = 0; count < dataSource.length; count++)
            {
                 item = dataSource[count][colItem["dataField"]];
                 if(!this.util.isUndefined(item) && item != null && item != "")
                 {
                	 break;
                 }
            }
    		if(!this.util.isUndefined(item) && item != null && item != "")
            {
            	colItem.sortFunction = this.__determineSortFunction(item.toString());
            }
            else
            {
            	colItem.sortFunction = "__sortCaseInsensitive";
            }
    	}
	}
};

nsGrid1.__removeHeaderCell = function(colIndex)
{
	if(colIndex > -1 && colIndex < this.__columns.length)
	{
		if(this.__tblHeader && this.__tblHeader.tHead && this.__tblHeader.tHead.rows && this.__tblHeader.tHead.rows.length > 0)
		{
			var headerRow = this.__tblHeader.tHead.rows[0];
			if(this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows && this.__tblHeader.tBodies[0].rows.length > 0)
			{
				headerRow.deleteCell(colIndex);
				var headerBodyRow = this.__tblHeader.tBodies[0].rows[0];
				var rendererRow = this.__tblHeader.tBodies[0].rows[1];
				headerBodyRow.deleteCell(colIndex);
				rendererRow.deleteCell(colIndex);
			}
		}
		return true;
	}
	return false;
};

nsGrid1.__swapHeaderCell = function(sourceIndex,destinationIndex)
{
	if(this.__isColumnIndexValid(sourceIndex) && this.__isColumnIndexValid(destinationIndex))
	{
		if(this.__tblHeader && this.__tblHeader.tHead && this.__tblHeader.tHead.rows && this.__tblHeader.tHead.rows.length > 0)
		{
			var headerRow = this.__tblHeader.tHead.rows[0];
			if(this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows && this.__tblHeader.tBodies[0].rows.length > 0)
			{
				var arrHeaderCells = headerRow.getElementsByTagName("td");
				this.__swapCell(arrHeaderCells[sourceIndex],arrHeaderCells[destinationIndex]);
				var headerBodyRow = this.__tblHeader.tBodies[0].rows[0];
				var rendererRow = this.__tblHeader.tBodies[0].rows[1];
				var arrBodyCells = headerBodyRow.getElementsByTagName("td");
				var arrRendererCells = rendererRow.getElementsByTagName("td");
				this.__swapCell(arrBodyCells[sourceIndex],arrBodyCells[destinationIndex]);
				this.__swapCell(arrRendererCells[sourceIndex],arrRendererCells[destinationIndex]);
			}
			return true;
		}
	}
	return false;
};

nsGrid1.__removeHeader = function()
{
	if(this.__tblHeader && this.__tblHeader.tHead)
	{
		this.__tblHeader.deleteTHead();
	}
	if(this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0)
    {
    	this.__tblHeader.removeChild(this.__tblHeader.tBodies[0]);
    }
};
/******************************End of Header Creation *************************************/

/******************************Body Creation **********************************************/
nsGrid1.__createBody = function(parentElement)
{	
	if(parentElement)
	{
		this.__divBodyContainer = this.__createTableAndParent(this.getID() + this.__TABLE_BODY_CONTAINER_ID,this.__CLASS_BODY_CONTAINER,this.getID() + this.__TABLE_BODY_ID);
		parentElement.appendChild(this.__divBodyContainer);
		this.__tblBody = this.__divBodyContainer.firstChild;
		if(this.__enableVirtualScroll)
		{
			this.__bodyScrollRef = this.__bodyScrollVirtualHandler.bind(this);
			this.util.addEvent(this.__divBodyContainer,"scroll",this.__bodyScrollRef);
			var divScroll = this.util.createDiv(this.__divBodyContainer.id  + "scroll","nsGridScrollerCause"); 
			this.__divBodyContainer.appendChild(divScroll);
		}
		this.__objGrid.__createBody();
	}
};

nsGrid1.__setVirtualMesaurement = function()
{
	this.__divBodyContainer.style.position = "relative";
	this.__divBodyContainer.style.overflow = "auto";
	this.__tblBody.style.position = "absolute";
	this.__tblBody.style.top = "0px";
	this.__tblBody.style.left = "0px";
	this.__divBodyContainer.scrollTop = 0;
	this.__setVirtualVariables(true);
};

nsGrid1.__setVirtualVariables = function(isReset)
{
	var divScroll = this.getElement(this.__divBodyContainer.id + "scroll");
	if(this.__arrInternalSource && this.__arrInternalSource.length > 0)
	{
		var scrollHeight = 0;
		if(isReset)
		{
			var availableHeight = 0;//this.util.getStyleValue(this,"height",false);
			if(this.hasAttribute("nsHeight"))
			{
				availableHeight = this.util.getDimensionAsNumber(this,this.getAttribute("nsHeight"));
			}
			else if(this.style.height != "")
			{
				availableHeight  = this.util.getDimensionAsNumber(this,this.style.height);
			}
			else
			{
				availableHeight  = this.offsetHeight;
			}
			if(this.__rowHeight > 0)
			{
				this.__virtualRowHeight = this.__rowHeight;
			}
			else
			{
				var item = this.__arrInternalSource[0];
				var row = item[this.__fieldRowHtml];
				this.__tblBodyBody.appendChild(row);
			    this.__virtualRowHeight = row.offsetHeight;
			    //console.log(row.offsetHeight);
			    this.__tblBodyBody.deleteRow(0);
			}
			//Start of workaround for IE issue of limitation of scrollTop Value
			//In IE 11 it is 1533917px 
			//Logic is that this.__divBodyContainer.scrollHeight gives max scrollTop Value hence if scrollHeight exceeds this.__divBodyContainer.scrollHeight then reset scrollHeight value to this.__divBodyContainer.scrollHeight
			//and recalculate rowHeight (this.__virtualRowHeight) value;
			scrollHeight = (this.__totalRecords * this.__virtualRowHeight);
			divScroll.style.maxHeight = scrollHeight + "px";
			divScroll.style.height = scrollHeight + "px";
			if(this.__divBodyContainer.scrollHeight < scrollHeight)
			{
				scrollHeight = this.__divBodyContainer.scrollHeight;
				this.__virtualRowHeight = scrollHeight/this.__totalRecords;
			}
			//end of workaround for IE issue of limitation of scrollTop Value
			this.__rowCount = Math.round(availableHeight/this.__virtualRowHeight) * 2;
			this.__lastScrollPosition = 0;
		}
		else
		{
			var row = this.__tblBody.tBodies[0].rows[0];
			this.__virtualRowHeight = row.offsetHeight;
		}
		scrollHeight = (this.__totalRecords * this.__virtualRowHeight);
		this.__scrollOffsetPosition = this.__virtualRowHeight;
		divScroll.style.maxHeight = scrollHeight + "px";
		divScroll.style.height = scrollHeight + "px";
		//console.log(this.__divBodyContainer.scrollHeight + "," + scrollHeight);
	}
	else
	{
		this.__virtualRowHeight = 0;
		this.__rowCount = 0;
		this.__scrollOffsetPosition = 0;
		this.__lastScrollPosition = 0;
		divScroll.style.height = 0 + "px";
	}
};

nsGrid1.__renderBody = function(fromSort)
{
	this.__tblBody.deleteTHead();
    if(this.__tblBody.tBodies && this.__tblBody.tBodies.length > 0)
    {
    	this.__tblBody.removeChild(this.__tblBody.tBodies[0]);
    	this.__tblBodyBody = null;
    }
    this.__tblBodyBody = document.createElement("tbody");
	if(this.__enableContextMenu)
	{
		this.__initializeContextMenu();
	}
	this.__createBodyHeader();
	if(this.__enableVirtualScroll)
	{
		this.__tblBody.appendChild(this.__tblBodyBody);
		this.__setVirtualMesaurement();
		this.__createBodyBodyVirtual(this.__rowCount);
		this.__resetDataInBody(0,this.__rowCount - 1,false);
	}
	else
	{
		this.__createBodyBody(this.__arrInternalSource,0,this.__arrInternalSource.length);
		this.__tblBody.appendChild(this.__tblBodyBody);
	}
	if(!fromSort)
	{
		this.__setBodyMeasurement();
	}
	this.__alignTables(fromSort);
	if(this.__customScrollerRequired && !this.__scroller)
	{
		this.__scroller = new NSScroller(this.__divBodyContainer);
	}
	//this does not make elements unselectable
	//this.util.makeElementUnselectable(this.__divBodyContainer,true);
};

nsGrid1.__createBodyHeader= function()
{
	var header = this.__tblBody.createTHead();
	var headerRow = header.insertRow(-1);
    headerRow.style.height = "auto";
    for (var colIndex = 0; colIndex < this.__columns.length; colIndex++)
    {
        var colItem = this.__columns[colIndex];
        this.__createBodyHeaderCell(colItem,headerRow);
    }
};

nsGrid1.__createBodyHeaderCell= function(colItem,headerRow)
{
	if(colItem && headerRow)
	{
		var headerCell = headerRow.insertCell(-1);
		headerCell.style.width = (colItem["width"]);
	    headerCell.style.height = "0px";
	    this.__addPriorityClassInCell(headerCell,colItem);
	}
};

nsGrid1.__createBodyBodyVirtual= function(rowCount)
{
	if(this.__arrInternalSource && this.__arrInternalSource.length > 0)
	{
		 if(rowCount > this.__arrInternalSource.length)
		 {
			 rowCount = this.__arrInternalSource.length;
		 }
		 this.__createBodyBody(this.__arrInternalSource,0,rowCount);
	}
	else
	{
		this.__createNoDataRow();
	}
};

nsGrid1.__resetDataInBody= function(fromIndex,toIndex,loopFromStart)
{
	//if(fromIndex > -1 && toIndex < this.__totalRecords)
	//{
		var indexCount = loopFromStart ? 0 : fromIndex;
		var totalRecords = loopFromStart ? (toIndex - fromIndex + 1) : this.__totalRecords;
		var arrRows = this.__tblBodyBody.rows;
		for(var rowIndex = 0; rowIndex < arrRows.length; rowIndex++,indexCount++)
	    {
			var row = arrRows[rowIndex];
			if(indexCount < totalRecords)
			{
				row.style.display = "";
				var item = this.__arrInternalSource[rowIndex];
				if(item)
				{
					row.outerHTML = item[this.__fieldRowHtml].outerHTML;
				}
				else
				{
					row.style.display = "none";
				}
			}
			else
			{
				row.style.display = "none";
			}
	    }
	//}
};

nsGrid1.__createBodyBody= function(dataSet,startIndex,endIndex)
{
    if(dataSet && dataSet.length > 0)
    {
    	this.__objGrid.__createBodyBody(dataSet,startIndex,endIndex);
    }
    else
    {
    	this.__createNoDataRow();
    }
};

nsGrid1.__setBodyRowProperty = function(row,item,totalRowCount)
{
	if(row && item)
	{
		if(this.__rowHeight > 0)
		{
			row.style.height = this.__rowHeight + "px";
		}
		else
		{
			row.style.height = "auto";
		}
	    var className = ((totalRowCount % 2) === 0) ? this.__CLASS_EVEN_ROW : this.__CLASS_ODD_ROW;
	    this.util.addStyleClass(row , className);
	    this.util.addEvent(row,"mouseover",this.__rowMouseHover.bind(this));
	    this.util.addEvent(row,"mouseout",this.__rowMouseHover.bind(this));
	    this.util.addEvent(row,"click",this.__rowClickHandler.bind(this));
	}
};

nsGrid1.__createBodyRowChild= function(row,item,parentIndex,level,isReset)
{
    if(item)
    {
        for (var colIndex = 0; colIndex < this.__columns.length; colIndex++)
        {
        	var colItem = this.__columns[colIndex];
        	var cell = this.__createBodyRowCell(row);
        	//var textNode = document.createTextNode(item[colItem["dataField"]]);
        	//cell.appendChild(textNode);
			this.__setBodyCellProperty(row,cell,item,colItem,colIndex,parentIndex,level,isReset);
        }
    }
};

nsGrid1.__createBodyRowCell= function(row)
{
    var cell = row.insertCell(-1);
    //cell.className = "nsDataGridCell";
    this.util.addStyleClass(cell , "nsDataGridCell");
    var cellDiv = this.util.createDiv(null);
    cell.appendChild(cellDiv);
    return cell;
};

nsGrid1.__setBodyCellProperty = function(row,cell,item,colItem,colIndex,parentIndex,level,isReset)
{
	var hierarchicalPadding = 0;
	if(colItem && colItem.hasOwnProperty("dataField") && colItem["dataField"])
	{
		var cellDiv = cell.firstChild;
        if((this.__enableHierarchical || this.__enableGrouping) && colIndex == 0 && item.hasOwnProperty(this.__childField) && item[this.__childField]  && item[this.__childField].length > 0)
        {
        	this.util.addStyleClass(cellDiv,this.__CLASS_GROUP_CELL);
        	var isCollapsed = false;
        	if(!isReset && item.hasOwnProperty(this.__fieldIsCollapsed))
 	        {
        		isCollapsed = item[this.__fieldIsCollapsed];
 	        }
        	this.__createArrow(parentIndex,cellDiv,isCollapsed);
        	var cellText = this.util.createDiv(null,this.__CLASS_CELL_CHILD);
        	cellText.style.verticalAlign = "top";
        	this.__addCellText(row,item,cellText,colItem,colIndex);
        	cellDiv.appendChild(cellText);
        }
        else
        {
        	this.util.addStyleClass(cellDiv,this.__CLASS_CELL_CHILD);
        	this.__addCellText(row,item,cellDiv,colItem,colIndex);
        	//24 = 16(Arrow Width) + 6(Arrow Parent Padding) + 2(cellDiv horizontalGap between elements shown in debugger)
        	hierarchicalPadding = 24;
        }
        if(colIndex == 0)
        {
        	if(this.__enableHierarchical)
            {
            	if(level === 0)
            	{
            		cell.style.paddingLeft = "1px";
            	}
            	else
            	{
            		var paddingLeft = (10 * level) + hierarchicalPadding;
            		cell.style.paddingLeft = paddingLeft + "px";
            	}
            }
        	else if(this.__enableGrouping)
        	{
        		if(level === 0)
        		{
        			cell.style.paddingLeft = "1px";
        		}
        	}
        }
	}
	this.__addPriorityClassInCell(cell,colItem);
};

nsGrid1.__removeBodyColumn= function(colIndex)
{
	if(colIndex > -1 && colIndex < this.__columns.length)
	{
		if(this.__tblBody && this.__tblBody.tHead && this.__tblBody.tHead.rows && this.__tblBody.tHead.rows.length > 0)
	    {
			var bodyRow = this.__tblBody.tHead.rows[0];
	    	if(this.__tblBody.tBodies && this.__tblBody.tBodies.length > 0 && this.__tblBody.tBodies[0].rows && this.__tblBody.tBodies[0].rows.length > 0)
			{
	    		bodyRow.deleteCell(colIndex);
	    		var arrRows = this.__tblBody.tBodies[0].rows;
	    		var row = null;
	    		for (var rowCount = 0; rowCount < arrRows.length; rowCount++) 
	    		{
	    			row = arrRows[rowCount];
	    			row.deleteCell(colIndex);
	    	    }
			}
	    }
	}
};

nsGrid1.__swapBodyCell = function(sourceIndex,destinationIndex)
{
	if(this.__isColumnIndexValid(sourceIndex) && this.__isColumnIndexValid(destinationIndex))
	{
		if(this.__tblBody && this.__tblBody.tHead && this.__tblBody.tHead.rows && this.__tblBody.tHead.rows.length > 0)
		{
			var bodyRow = this.__tblBody.tHead.rows[0];
			if(this.__tblBody.tBodies && this.__tblBody.tBodies.length > 0 && this.__tblBody.tBodies[0].rows && this.__tblBody.tBodies[0].rows.length > 0)
			{
				var arrHeaderCells = bodyRow.getElementsByTagName("td");
				this.__swapCell(arrHeaderCells[sourceIndex],arrHeaderCells[destinationIndex]);
				var arrRows = this.__tblBody.tBodies[0].rows;
	    		var row = null;
	    		var arrBodyCells = [];
	    		for (var rowCount = 0; rowCount < arrRows.length; rowCount++) 
	    		{
	    			row = arrRows[rowCount];
	    			arrBodyCells = row.getElementsByTagName("td");
					this.__swapCell(arrBodyCells[sourceIndex],arrBodyCells[destinationIndex]);
	    	    }
			}
			return true;
		}
	}
	return false;
};

nsGrid1.__createArrow = function(parentRowCount,parentElement,isCollapsed)
{
	 if(parentElement)
	 {
		 var cellArrowParent = this.util.createDiv(null);
		 var arrowID = this.getID() + "compArrow" + parentRowCount;
		 var compArrow = this.util.createDiv(arrowID,"nsArrow");
		 compArrow.style.paddingTop = "3px";
		 compArrow.setAttribute("parent-row-count",parentRowCount);
		 
		 var objSVG = new NSSvg();
		 this.__objGrid.__createArrow(compArrow,objSVG,arrowID);
		 this.util.addEvent(compArrow,"click",this.__arrowClickHandler.bind(this));
		 cellArrowParent.appendChild(compArrow);
		 parentElement.appendChild(cellArrowParent);
		 this.__setArrowDirection(compArrow,isCollapsed);
		 return compArrow;
	 }
	 return null;
};

nsGrid1.__setArrowDirection = function(compArrow,isCollapsed)
{
	if(compArrow)
	{
		var objSVG = new NSSvg();
		var useID = compArrow.getAttribute("id") + "use";
		this.__objGrid.__setArrowDirection(objSVG,useID,isCollapsed);
	}
};

nsGrid1.__isArrowCollapsed = function(compArrow)
{
	if(compArrow && compArrow.hasAttribute("parent-row-count"))
	{
		var rowIndex = parseInt(compArrow.getAttribute("parent-row-count"));
		var item = this.__getItemByIndex(rowIndex);
		if(item)
		{
			return item[this.__fieldIsCollapsed];
		}
	}
	return false;
};

nsGrid1.__createNoDataRow = function()
{
	var row = this.__tblBodyBody.insertRow(-1);
	this.util.addStyleClass(row,"nsNoRecordsFound");
	if(this.__rowHeight > 0)
	{
		row.style.height = this.__rowHeight + "px";
	}
	else
	{
		row.style.height = "auto";
	}
	var cell = row.insertCell(-1);
	cell.setAttribute("colspan",this.__columns.length);
	var textNode = document.createTextNode(this.__noDataMessage);
	cell.appendChild(textNode);
};

/******************************Create Sort Components*******************************/
nsGrid1.__addAscendingIndicator = function(target)
{
     if(target)
     {
    	 this.__setSortIcons(target,true,false);
         this.util.addStyleClass(target,this.__CLASS_SORTING_ASC);
     }
};

nsGrid1.__removeAscendingIndicator= function(target)
{
     if(target)
     {
          this.util.removeStyleClass(target,this.__CLASS_SORTING_ASC);
          this.__setSortIcons(target,false,false);
     }
};

nsGrid1.__addDescendingIndicator= function(target)
{
    if(target)
    {
    	this.__setSortIcons(target,false,true);
        this.util.addStyleClass(target,this.__CLASS_SORTING_DESC);
    }
};

nsGrid1.__removeDescendingIndicators= function(target)
{
     if(target)
     {
    	 this.util.removeStyleClass(target,this.__CLASS_SORTING_DESC);
    	 this.__setSortIcons(target,false,false);
     }
};

nsGrid1.__resetIndicators= function(target)
{
     if(target)
     {
          this.__removeAscendingIndicator(target);
          this.__removeDescendingIndicators(target);
          this.__setSortIcons(target,true,true);
     }
};

nsGrid1.__resetColumnHeaders= function()
{
     var tblHeaderBody = null;
     //safari doesnot support table.tHead
     if (this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0)
     {
    	 tblHeaderBody = this.__tblHeader.tBodies[0];
     }
     //two header not allowed
     if (!tblHeaderBody || !tblHeaderBody.rows || tblHeaderBody.rows.length != 1)
     {
          return;
     }
     var headers = tblHeaderBody.rows[0].cells;
     for (var colCount = 0; colCount < headers.length; colCount++)
     {
          this.__resetIndicators(headers[colCount]);
     }
};

nsGrid1.__setSortIcons= function(target,isAscVisible,isDescVisible)
{
	if(target)
	{
		if(isAscVisible != null)
		{
			 var divSortAsc = document.getElementById(target.getAttribute("id") + "SortAsc");
			 if(divSortAsc)
			 {
				 divSortAsc.style.display = isAscVisible ? "" : "none";
			 }
		}
		if(isDescVisible != null)
		{
			 var divSortDesc = document.getElementById(target.getAttribute("id") + "SortDesc");
			 if(divSortDesc)
			 {
				 divSortDesc.style.display = isDescVisible ? "" : "none";
			 }
		}
	}
};

/******************************End of Create Sort Components*******************************/

/******************************Event Listeners *************************************/

nsGrid1.__arrowClickHandler = function(event)
{
	event = this.util.getEvent(event);
	var target = this.util.getTarget(event);
	target = this.util.findParent(target,"DIV");
	if(target && target.hasAttribute("parent-row-count"))
	{
		var rowIndex = target.getAttribute("parent-row-count");
		var isCollapse = this.__isArrowCollapsed(target);
		this.__showHideRow(parseInt(rowIndex),target,!isCollapse);
	}
	event.stopImmediatePropagation();
};

nsGrid1.__headerClickHandler= function(event)
{
	if(this.__onGridLine)
	{
		 return;
	}
     var target = this.util.getTarget(event);
     //adding the below condition so that if we add a span or a font and click on it then we should navigate till we find the header object
     target = this.util.findParent(target,"TD");
     var columnDetail = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
     this.__handleSorting(target,columnDetail);
};

nsGrid1.__headerMouseOverHandler = function(event)
{
	var target = this.util.getTarget(event);
	target = this.util.findParent(target,"TD");
	this.__headerMouseMoveRef = this.__headerMouseMoveHandler.bind(this);
	this.util.addEvent(target,"mousemove",this.__headerMouseMoveRef);
};

nsGrid1.__headerMouseOutHandler = function(event)
{
	var target =  this.util.getTarget(event);
	target =  this.util.findParent(target,"TD");
	this.__onGridLine = false;
	
	this.util.removeEvent(target,"mousemove",this.__headerMouseMoveRef);
	this.__headerMouseMoveRef = null;
	/*this.util.removeEvent(target,"mousedown",this.__headerMouseDownRef);
	this.__headerMouseDownRef = null;*/
	
	this.util.removeStyleClass(target,"nsResizeHandleActive");
};

nsGrid1.__headerMouseMoveHandler = function(event)
{
	event = this.util.getEvent(event);
	var target = this.util.getTarget(event);
	target = this.util.findParent(target,"TD");
	var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
	//var offset = this.util.getEventPosition(event);
	if(objColumn && objColumn["resizable"])
	{
		var posEvent = this.util.getEventPosition(event,this.__divHeaderContainer);
		if(this.__isMouseOnElement(target,posEvent.left,posEvent.top))
		{
			this.util.addStyleClass(target,"nsResizeHandleActive");
			this.__onGridLine = true;
		}
		else
		{
			this.util.removeStyleClass(target,"nsResizeHandleActive");
			this.__onGridLine = false;
		}
	}
};

nsGrid1.__headerMouseDownHandler = function(event)
{
	event = this.util.getEvent(event);
    var target = this.util.getTarget(event);
    target = this.util.findParent(target,"TD");
    var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
    if(objColumn)
	{
    	if(objColumn["resizable"])
    	{
    		this.__startResize(event,target);
    	}
    	if(objColumn["draggable"])
    	{
		    this.__startColumnMove(event,target);
    	}
	}
};

nsGrid1.__headerMenuClickHandler = function(event)
{
	 event = this.util.getEvent(event);
     event.stopImmediatePropagation();
};

nsGrid1.__getHeaderMenuDataProvider = function(target)
{
	var source = [];
	if(target)
	{
		target = this.util.findParent(target,"TD");
		var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
		var colIndex = objColumn[this.__fieldColIndex];
		if(objColumn)
		{
			if(objColumn["sortable"])
			{
				source.push({id:1,title: "Sort Ascending"});
				source.push({id:2,title: "Sort Descending"});
			}
			if(this.__isColumnValidForSwapOrRemove(colIndex))
			{
				source.push({id:3,title: "Remove Column"});
			}
		}
	}
	return source;
};

nsGrid1.__headerMenuHandler = function(target,item)
{
	if(target && item)
	{
		target = this.util.findParent(target,"TD");
		var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
		if(objColumn)
		{
			var colIndex = objColumn[this.__fieldColIndex];
			//Sort Ascending
			if(item["id"] === 1)
			{
				this.sortBy(colIndex,true);
			}
			//Sort Descending
			else if(item["id"] === 2)
			{
				this.sortBy(colIndex,false);
			}
			//Remove Column
			else if(item["id"] === 3)
			{
				this.removeColumn(colIndex);
			}
		}
	}
};

nsGrid1.__rowMouseHover= function(event)
{
	 if(this.__enableMouseHover)
	 {
		 event = this.util.getEvent(event);
	     var target = this.util.getTarget(event);
	     target = this.util.findParent(target,"TR");
	     if (event.type == "mouseover")
	     {
	    	 this.util.addStyleClass(target,"nsDataGridHover");
	     }
	     else if (event.type == "mouseout")
	     {
	    	 this.util.removeStyleClass(target,"nsDataGridHover");
	     }
	 }
	 return false;
};

nsGrid1.__rowClickHandler= function(event)
{
	event = this.util.getEvent(event);
    var target = this.util.getTarget(event);
    target = this.util.findParent(target,"TR");
    //Multiselection Check
    if (event.shiftKey && this.__enableMultiSelection)
    {
    	this.__multiSectionHandler(target);
    }
    else if(event.ctrlKey && this.__enableMultiSelection)
    {
      if(this.__isRowSelected(target))
      {
    	  this.__markRowUnselected(target);
      }
      else
      {
    	  this.__markRowSelected(target);
      }
    }
    else
    {
    	this.__clearAllRowSelection();
    	this.__markRowSelected(target);
    } 
};

nsGrid1.__bodyScrollVirtualHandler = function(event)
{
	var target = this.util.getTarget(event);
	var scrollPos = target.scrollTop;
	if(this.__lastScrollPosition !== scrollPos)
	{
		var itemToBegin = 0;
    	var itemToLimit = 0;
    	var tableTop = 0; 
    	//console.log(this.__rowCount + "," + scrollPos + "," +  this.__scrollOffsetPosition);
        if(scrollPos > this.__scrollOffsetPosition)
        {
        	tableTop = scrollPos - this.__scrollOffsetPosition;
        	//console.log("In Scroll::" + tableTop);
        	itemToBegin = Math.ceil(tableTop/this.__virtualRowHeight);
        }
        else
        {
        	tableTop = 0;
        	//console.log("In Not Scroll::" + scrollPos + "," + this.__scrollOffsetPosition);
        	itemToBegin = 0;
        }
        itemToLimit = Math.ceil(itemToBegin + this.__rowCount);
        //console.log(itemToBegin + "," + itemToLimit);
        //if(itemToBegin < (this.__totalRecords - this.__rowCount))
        //{
        	this.__tblBody.style.top = tableTop + "px";
            //console.log(itemToBegin + "," + itemToLimit);
        	this.__arrInternalSource = this.__arrWrapper.slice(itemToBegin,itemToLimit + 1);
            this.__resetDataInBody(itemToBegin,itemToLimit,false);
        //}
	}
	this.__lastScrollPosition = scrollPos;
};

/******************************End of Event Listeners*************************************/

/******************************Column Resize Logic*************************************/

nsGrid1.__resize = function(table,cell,desirableWidth)
{
	var cellPaddingLeft = this.util.getDimensionAsNumber(cell,cell.style.paddingLeft);
	var cellPaddingRight = this.util.getDimensionAsNumber(cell,cell.style.paddingRight);
	var pad = parseInt(cellPaddingLeft,10) + parseInt(cellPaddingRight,10);
	var objColumn = this.__getColumnObject(this.__resizingHeader.getAttribute("currentColumnIndex"));
	var minWidth = this.__columnMinWidth;
	if(objColumn)
	{
		minWidth = objColumn["minWidth"];
	}
	var setWidth = Math.max((desirableWidth - pad), minWidth);
	cell.style.width = setWidth + "px";
};

nsGrid1.__startResize = function(event,target)
{
	if(!this.__onGridLine)
	{
		return;
	}
	
	 this.util.removeEvent(target,"click",this.__headerClickRef);
	 this.__headerClickRef = null;
     this.util.removeEvent(target,"mouseover",this.__headerMouseOverRef);
     this.__headerMouseOverRef = null;
     this.util.removeEvent(target,"mouseout",this.__headerMouseOutRef);
     this.__headerMouseOutRef = null;
     /*this.util.removeEvent(target,"mousedown",this.__headerMouseDownRef);
     this.__headerMouseDownRef = null;*/
	
	this.__resizingHeader = target;
	this.__resizingHeaderCell = this.__getHeaderTopCell(target);
	this.__resizingBodyCell = this.__getBodyTopCell(target);
	
	this.__createResizeHandler(event);
	
	this.__doResizeRef = this.__doResize.bind(this);
	this.__endResizeRef = this.__endResize.bind(this);
	this.util.addEvent(document,"mousemove",this.__doResizeRef);
	this.util.addEvent(document,"mouseup",this.__endResizeRef);
	
	event.stopImmediatePropagation();
};

nsGrid1.__doResize = function(event)
{
	//putting this check as somehow the document evenlistener is not getting detached
	if(!this.__resizingHeader)
	{
		return;
	}
	this.util.makeBodyUnselectable();
	event = this.util.getEvent(event);
	var posEvent = this.util.getEventPosition(event);
	this.__resizeHandler.style.left = posEvent.left + "px";
	
	return false;
};

nsGrid1.__endResize = function(event)
{
	//putting this check as somehow the document evenlistener is not getting detached
	if(!this.__resizingHeader)
	{
		return;
	}
	this.util.removeEvent(document,"mousemove",this.__doResizeRef);
	this.__doResizeRef = null;
	this.util.removeEvent(document,"mouseup",this.__endResizeRef);
	this.__endResizeRef = null;
	this.util.removeEvent(selectedHeader,"mouseout",this.__headerMouseOutRef);
	this.__headerMouseOutRef = null;
	this.util.removeEvent(selectedHeader,"click",this.__headerClickRef);
	this.__headerClickRef = null;
	this.util.makeBodySelectable();
	event = this.util.getEvent(event);
	var selectedHeader = this.__resizingHeader;
	var tableHeader = this.__tblHeader;
	var tableBody = this.__tblBody;
	var posEvent = this.util.getEventPosition(event,this.__divBodyContainer);
	var desiredWidth = posEvent.left - this.util.getCumulativeOffset(selectedHeader).x;
	this.__resize(tableHeader,this.__resizingHeaderCell,desiredWidth);
	this.__resize(tableBody,this.__resizingBodyCell,desiredWidth);
	if(this.__resizeHandler)
	{
		document.body.removeChild(this.__resizeHandler);
	}
	this.__resizingHeader = null;
	this.__resizingHeaderCell = null;
	this.__resizingBodyCell = null;
	this.__resizeHandler = null;
	event.stopImmediatePropagation();
	this.__handleColumnResize();
};

nsGrid1.__createResizeHandler = function(event)
{
	this.__resizeHandler = this.util.createDiv(null,"nsResizeHandle");
	var posEvent = this.util.getEventPosition(event);
	this.__resizeHandler.style.top = this.util.getCumulativeOffset(this.__resizingHeader).y + "px";
	this.__resizeHandler.style.left = posEvent.left + "px";
	var scrollBarWidth = this.util.getScrollBarWidth(this.__divBodyContainer);
	this.__resizeHandler.style.height = (this.__divHeaderContainer.offsetHeight + this.__divBodyContainer.offsetHeight - scrollBarWidth) + "px";
	
	document.body.appendChild(this.__resizeHandler);
};

nsGrid1.__getHeaderTopCell = function(cell)
{
	if(cell)
	{
		var index = cell.cellIndex;
		if(this.__tblHeader && this.__tblHeader.tHead && this.__tblHeader.tHead.rows.length > 0 && this.__tblHeader.tHead.rows[0].cells.length > 0)
		{
			var headerCells = this.__tblHeader.tHead.rows[0].cells;
			return headerCells[index];
		}
	}
	return null;
};

nsGrid1.__getBodyTopCell = function(cell)
{
	if(cell)
	{
		var index = cell.cellIndex;
		if(this.__tblBody && this.__tblBody.tHead && this.__tblBody.tHead.rows.length > 0 && this.__tblBody.tHead.rows[0].cells.length > 0)
		{
			var bodyCells = this.__tblBody.tHead.rows[0].cells;
			return bodyCells[index];
		}
	}
	return null;
};

/*******************************************************End of Column Resize Logic*************************************/

/******************************************************Start of Column Move logic ********************************************************/
nsGrid1.__startColumnMove = function(event,target)
{
	if(this.__onGridLine)
	{
		return;
	}
	var objColumn = this.__getColumnObject(target.getAttribute("currentColumnIndex"));
	var columnIndex = this.__getColumnIndexByObject(objColumn);
	if(columnIndex > -1)
	{
		this.__objColumnDrag = {};
		this.__objColumnDrag.source = target;
		this.__objColumnDrag.objColumn = objColumn;
		this.__objColumnDrag.columnIndex = columnIndex;
		var position = this.util.getEventPosition(event);
		this.__objColumnDrag.dragElement = this.__createCopyItem(target,position);
		this.__objColumnDrag.dragElementAdded = false;
		this.__objColumnDrag.position = position;
		this.__dragColumnMoveRef = this.__dragColumnMoveHandler.bind(this);
		this.__dragColumnEndRef = this.__dragColumnEndHandler.bind(this);
		this.util.addEvent(document,"mousemove",this.__dragColumnMoveRef);
		this.util.addEvent(document,"mouseup",this.__dragColumnEndRef);
	}
};

nsGrid1.__dragColumnMoveHandler = function(event)
{
	event = this.util.getEvent(event);
	var position = this.util.getEventPosition(event);
	var leftOffset = this.__objColumnDrag.position.left - position.left;
    var topOffset = this.__objColumnDrag.position.top - position.top;
    var dragRadius = (leftOffset * leftOffset) + (topOffset * topOffset);
    if(!this.__objColumnDrag.dragElementAdded && dragRadius > this.__MIN_DRAG_OFFSET)
    {
    	document.body.appendChild(this.__objColumnDrag.dragElement);
    	this.__objColumnDrag.dragElementAdded = true;
    }
    var posEvent = this.util.getEventPosition(event);
    this.__objColumnDrag.dragElement.style.left = posEvent.left + "px"; //position.left + "px";
    this.__objColumnDrag.dragElement.style.top = posEvent.top + "px";
    event.preventDefault();
};

nsGrid1.__dragColumnEndHandler = function(event)
{
	this.util.removeEvent(document,"mousemove",this.__dragColumnMoveRef);
	this.__dragColumnMoveRef = null;
	this.util.removeEvent(document,"mouseup",this.__dragColumnEndRef);
	this.__dragColumnEndRef = null;
	if(this.__objColumnDrag.dragElementAdded)
	{
		document.body.removeChild(this.__objColumnDrag.dragElement);
		var position = this.util.getEventPosition(event);
		position.top = position.top + this.__divHeaderContainer.scrollTop;
		position.left = position.left + this.__divHeaderContainer.scrollLeft;
		var tablePosition = this.util.getOffSet(this.__tblHeader);
		if (position.top < tablePosition.top || position.top > (tablePosition.top + this.__tblHeader.offsetHeight)) 
		{
		      return;
		}
		var targetIndex = this.__getHeaderColumnByPosition(position);
	    if (targetIndex > -1 && targetIndex != this.__objColumnDrag.columnIndex) 
	    {
	    	this.swapColumns(this.__objColumnDrag.columnIndex,targetIndex);
	    }
	}
};

nsGrid1.__createCopyItem = function(target,position)
{
	var divDrag = null;
	if(target && position)
	{
		divDrag = this.util.createDiv(this.getID() + "Drag","dataGridHeader");
		divDrag.innerHTML = target.innerHTML;
		//divDrag.style.backgroundColor = "red";
		divDrag.style.position = "absolute";
		divDrag.style.left = (position.left) + "px";
		divDrag.style.top = (position.top) + "px";
		divDrag.style.width = target.offsetWidth + "px";
		divDrag.style.height = target.offsetHeight + "px";
		divDrag.style.opacity = 0.7;
	}
	return divDrag;
};

nsGrid1.__getHeaderColumnByPosition = function(position) 
{
	if(this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows && this.__tblHeader.tBodies[0].rows.length > 0)
	{
		var headerBodyRowCells = this.__tblHeader.tBodies[0].rows[0].cells;;
	    for (var count = 0; count < headerBodyRowCells.length; count++) 
	    {
	      var rowPosition = this.util.getOffSet(headerBodyRowCells[count]);
	      if (rowPosition.left <= position.left && position.left <= rowPosition.left + headerBodyRowCells[count].offsetWidth) 
	      {
	    	  return count;
	      }
	    }
	    return -1;
	}
};

/******************************************************End of Column Move logic ********************************************************/

/******************************************************Start of Selection Functions*************************************************************/

nsGrid1.__isRowSelected= function(row)
{
    if(row)
    {
        return this.util.hasStyleClass(row,"nsDataGridSelection");
    }   
    return false;
};

nsGrid1.__markRowSelected= function(row)
{
    if(row)
    {
        if(!this.__isRowSelected(row))
        {
        	this.util.addStyleClass(row,"nsDataGridSelection");   
            this.__selectedItems.push(row);
        	var index = parseInt(row.getAttribute("index"));
        	var item = this.__getItemByIndex(index);
            this.util.dispatchEvent(this,this.ITEM_SELECTED,item,{index:item[this.__fieldIndex]});
        }
    }
};

nsGrid1.__markRowUnselected= function(row)
{
    if(this.__isRowSelected(row))
    {
    	this.util.removeStyleClass(row,"nsDataGridSelection");
        for (var count=0; count < this.__selectedItems.length ; count++)
        {
            if (parseInt(this.__selectedItems[count].getAttribute("index")) === parseInt(row.getAttribute("index")))
            {
                this.__selectedItems.splice(count,1);
                break;
            }
        }
        var index = parseInt(row.getAttribute("index"));
        var item = this.__getItemByIndex(index);
        this.util.dispatchEvent(this,this.ITEM_UNSELECTED,item,{index:item[this.__fieldIndex]});
    }
};

nsGrid1.__clearAllRowSelection= function()
{
    for (var count=0; count < this.__selectedItems.length ; count++)
    {
        if (this.__selectedItems[count])
        {
        	this.util.removeStyleClass(this.__selectedItems[count],"nsDataGridSelection");
        }
    }
    this.__selectedItems = [];
};

nsGrid1.__multiSectionHandler= function(lastRow)
{
	 if(!lastRow)
	 {
		 return;
	 }
	 if (this.__selectedItems.length === 0)
	 {
		 this.__isRowSelected(lastRow);
	     return;
	 }
	 var firstRow = this.__selectedItems[this.__selectedItems.length - 1];
	 if(parseInt(lastRow.getAttribute("index")) === parseInt(firstRow.getAttribute("index")))
	 {
		 this.__markRowUnselected(lastRow);
		 return;
	 }
	 var isDown = (parseInt(lastRow.getAttribute("index")) > parseInt(firstRow.getAttribute("index")));
	 var isSelection = !this.__isRowSelected(lastRow);
	 var navigateRow = firstRow;
	 do
	 {
		  navigateRow = isDown ? navigateRow.nextSibling : navigateRow.previousSibling;
		  if (isSelection)
		  {
			  this.__markRowSelected(navigateRow);
		  }
		  else
		  {
			  this.__markRowUnselected(navigateRow);
		  }
	 }
	 while(parseInt(navigateRow.getAttribute("index")) != parseInt(lastRow.getAttribute("index")));
};

nsGrid1.__setVisibilityOfColumn = function(index,isVisible)
{
	var style;
    if (isVisible) 
    {
    	style = "";
    }
    else
    {
    	style = "none";
    }
	var rows = this.__tblHeader.getElementsByTagName("tr");
	for (var count = 0; count < rows.length;count++) 
	{
	     var cells = rows[count].getElementsByTagName("td");
	     if(cells.length > index)
	     {
	    	 cells[index].style.display = style;
	     }
	     else
	     {
	    	 return;
	     }
	}
	rows = this.__tblBody.getElementsByTagName("tr");
	for (var count = 0; count < rows.length;count++) 
	{
	     var cells = rows[count].getElementsByTagName("td");
	     cells[index].style.display = style;
	}
	
};

/******************************************************End of Selection Functions*************************************************************/
/******************************************************Start of Sorting Logic*************************************************************/

nsGrid1.__handleSorting= function(header,columnDetail,customIsAscending)
{
	if(header && columnDetail && columnDetail.sortable)
    {
		  var isCustomSort = !this.util.isUndefined(customIsAscending);
	   	  var sortAscending = false;
	   	  if (this.util.hasStyleClass(header,this.__CLASS_SORTING_ASC) || this.util.hasStyleClass(header,this.__CLASS_SORTING_DESC))
		  {
	          if(this.util.hasStyleClass(header,this.__CLASS_SORTING_ASC))
	          {
	               this.__removeAscendingIndicator(header);
	               sortAscending = false;
	          }
	          else if(this.util.hasStyleClass(header,this.__CLASS_SORTING_DESC))
	          {
		       	   this.__removeDescendingIndicators(header);
		       	   sortAscending = true;
	          }
		  }
	   	  else
	   	  {
	   		  this.__resetColumnHeaders();
	   		  sortAscending = !columnDetail.sortDescending;
	   	  }
	   	  //customIsAscending is passed it overrides the setting in columnDetail
	   	  if(isCustomSort)
	   	  {
	   		  sortAscending = customIsAscending;
	   	  }
	   	  if(sortAscending)
	      {
	   		  this.__addAscendingIndicator(header);
	      }
	   	  else
	   	  {
	   		  this.__addDescendingIndicator(header);
	   	  }
	   	  if(this.__enableHierarchical || this.__enableGrouping)
	   	  {
	   		  this.__sortHierarchicalStructure(this.__arrWrapper,columnDetail,sortAscending); 
	   	  }
	   	  else
	   	  {
	   		  this.__sortArrOfObjectsByParam(this.__arrWrapper,columnDetail.sortFunction,columnDetail.dataField,sortAscending);
	   	  }
	   	  this.__arrInternalSource = this.__arrWrapper.slice(0);
	      this.__renderBody(true);
    }
	else
	{
		  this.util.warning("nsGrid1","This column is not sortable.");
	}
};

nsGrid1.__sortHierarchicalStructure= function(dataSource,columnDetail,sortAscending)
{
	if(dataSource && dataSource.length > 0)
	{
		for(var count = 0;count < dataSource.length;count++)
		{
			var item = dataSource[count];
			if(this.__isNodeLastParent(item))
			{
				this.__sortArrOfObjectsByParam(item[this.__childField],columnDetail.sortFunction,columnDetail.dataField,sortAscending);
			}
			else if(item[this.__fieldHasChild])
			{
				this.__sortHierarchicalStructure(item[this.__childField],columnDetail,sortAscending);
			}
		}
	}
};

//This method is based on Stuart Langridge's "sorttable" code
nsGrid1.__determineSortFunction= function(item)
{ 
      var sortFunction = "__sortCaseInsensitive";
      if (item.match(/^\d\d[\/-]\d\d[\/-]\d\d\d\dgetElement/))
      {
          sortFunction = "__sortDate";
      }
      if (item.match(/^\d\d[\/-]\d\d[\/-]\d\dgetElement/))
      {
          sortFunction = "__sortDate";
      }
      if (item.match(/^[ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£$]/))
      {
          sortFunction = "__sortCurrency";
      }
      if (item.match(/^\d?\.?\d+getElement/))
      {
          sortFunction = "__sortNumeric";
      }
      if (item.match(/^[+-]?\d*\.?\d+([eE]-?\d+)?getElement/))
      {
          sortFunction = "__sortNumeric";
      }
      if(!isNaN(item))
      {
    	  sortFunction = "__sortNumeric";
      }
     
      return sortFunction;
};

nsGrid1.__sortArrOfObjectsByParam= function(arrToSort,sortFunctionName,dataField,sortAscending)
{
     if(sortAscending == null || sortAscending == undefined)
     {
         sortAscending = true;  // default to true
     }
     arrToSort.sort(function (item1, item2)
     {
         var retValue = 0;
         if (typeof this[sortFunctionName] === "function")
         {
             retValue = this[sortFunctionName](item1, item2 , dataField, sortAscending);
         }
         return retValue;
     }.bind(this));
};
 
nsGrid1.__sortCaseInsensitive= function(item1, item2 , dataField, sortAscending)
{
	if(!item1[dataField] && !item2[dataField])
	{
		return 0;
	}
	var retValue = -1;
	if(!item1[dataField])
	{
		retValue = -1;
	}
	else if(!item2[dataField])
	{
		retValue = 1;
	}
	else
	{
		var firstString = item1[dataField].toLowerCase();
	    var secondString = item2[dataField].toLowerCase();
	      
	    if(firstString == secondString)
	    {
	    	return 0;
	    }
	    if (firstString < secondString)
	    {
	        retValue = -1;
	    }
	    else
	    {
	        retValue = 1;
	    }
	}
	
    if(sortAscending)
    {
        return retValue; 
    }
    return (retValue * -1);
};
 
nsGrid1.__sortDate= function(item1, item2 , dataField, sortAscending)
{
      // y2k notes: two digit years less than 50 are treated as 20XX, greater than 50 are treated as 19XX
      var firstDateString = item1[dataField];
      var secondDateString = item2[dataField];
      var firstDate, secondDate, year = -1;
     
      if (firstDateString.length == 10)
      {
           firstDate = firstDateString.substr(6,4) + firstDateString.substr(3,2) + firstDateString.substr(0,2);
      }
      else
      {
           year = firstDateString.substr(6,2);
           if (parseInt(year) < 50)
           {
                year = "20" + year;
           }
           else
           {
                year = "19" + year;
           }
           firstDate = year + firstDateString.substr(3,2) + firstDateString.substr(0,2);
      }
     
      if (secondDateString.length == 10)
      {
           secondDate = secondDateString.substr(6,4)+secondDateString.substr(3,2)+secondDateString.substr(0,2);
      }
      else
      {
           year = secondDateString.substr(6,2);
           if (parseInt(year) < 50)
           {
                year = "20" + year;
           }
           else
           {
                year = "19" + year;
           }
           secondDate = year + secondDateString.substr(3,2) + secondDateString.substr(0,2);
      }
     
      if (firstDate == secondDate)
      {
          return 0;
      }
      var retValue = -1;
      if (firstDate < secondDate)
      {
          retValue = -1;
      }
      else
      {
          retValue = 1;
      }
      if(sortAscending)
      {
          return retValue; 
      }
      return (retValue * -1);
};

nsGrid1.__sortCurrency= function(item1, item2 , dataField, sortAscending)
{
      var firstCurrency = item1[dataField].replace(/[^0-9.]/g,"");
      var secondCurrency = item2[dataField].replace(/[^0-9.]/g,"");
      if(sortAscending)
      {
          return parseFloat(firstCurrency) - parseFloat(secondCurrency); 
      }
      return parseFloat(secondCurrency) - parseFloat(firstCurrency);
};

nsGrid1.__sortNumeric= function(item1, item2 , dataField, sortAscending)
{
      var firstNumber = parseFloat(item1[dataField]);
      if (isNaN(firstNumber))
      {
          firstNumber = 0;
      }
      var secondNumber = parseFloat(item2[dataField]);
      if (isNaN(secondNumber))
      {
          secondNumber = 0;
      }
      if(sortAscending)
      {
          return (firstNumber - secondNumber);
      }
      return (secondNumber - firstNumber);
};
/******************************************************End of Sorting Logic*************************************************************/
/******************************************************Start of Filter Logic*************************************************************/
nsGrid1.__handleFiltering = function(filter,setting,recordLimit)
{ 
	if(filter)
    {
		 var isHierarchical = false;
		 var source = this.__arrWrapper;
		 if(this.__enableHierarchical || this.__enableGrouping)
		 {
			 isHierarchical = true;
		 }
	   	 var nsFilter = new NSFilter(source,filter,setting,recordLimit,isHierarchical,this.__childField);
	   	 this.__arrInternalSource = nsFilter.execute();
	   	 this.__updateTotalRecords();
	   	 this.__renderBody(false);
   		 if(filter instanceof Array) 
   	     {
	   		 for (var count = 0; count < filter.length; count++) 
	         {
	 	   		var item = filter[count];
	 	   		var key = Object.keys(item)[0];
	 	   		this.highlightText(key,item[key]);
	         }
   	     }
   		 else if(typeof(filter) === "object") 
   	     {
   	        for(var key in filter) 
   	        {
   	        	this.highlightText(key,filter[key]);
   	        }
   	     }
    }
};

nsGrid1.__resetFiltering = function()
{ 
	if(this.__dataSource)
	{
		this.__arrInternalSource = this.__arrWrapper.slice(0);
		this.__updateTotalRecords();
		this.__renderBody(false);
	}
};
/******************************************************End of Filter Logic*************************************************************/
/******************************************************Start of Context Menu*************************************************************/

nsGrid1.__initializeContextMenu = function()
{
	//if(!this.__contextMenu)
	//{
		var contextMenuSetting = {parent:this.__tblBody.tBodies[0],isContextMenu:true,createRunTime:true,sourceProvider:this.__getContextMenuDataProvider.bind(this),targetType:"TD"};
		if(this.__contextMenuSetting)
		{
			for(var key in this.__contextMenuSetting)
			{
				//grid setting should not be overriden by the users
				if(!contextMenuSetting[key])
				{
					contextMenuSetting[key] = this.__contextMenuSetting[key];
				}
			}
		}
		this.__contextMenu = new NSMenu(contextMenuSetting);
	//}
};

nsGrid1.__getContextMenuDataProvider = function(cell)
{
	if(cell)
	{
		cell = this.util.findParent(cell,"TD");
		if(cell)
		{
			var row = this.util.findParent(cell,"TR");
			if(row)
			{
				var index = parseInt(row.getAttribute("index"));
				var item = this.__getItemByIndex(index);
				if(item && this.__contextMenuProvider) 
				{
					return this.__contextMenuProvider(item,cell.cellIndex,row.rowIndex);
				}
			}
		}
	}
	return null;
};

/******************************************************End of Context Menu*************************************************************/
/******************************Custom Function *************************************/

nsGrid1.__createTableAndParent = function(containerID,containerStyle,tableID)
{
	var divTableContainer = this.util.createDiv(containerID,containerStyle); 
	var table = document.createElement("TABLE");
	table.setAttribute("id",tableID);
	this.util.addStyleClass(table , this.__CLASS_TABLE);
	divTableContainer.appendChild(table);
	return divTableContainer;
};

nsGrid1.__setBodyMeasurement = function()
{
	var divTitleBar = this.getElement(this.getID() + this.__TITLE_CONTAINER_ID);
	var divPagination = this.getElement(this.getID() + this.__PAGINATION_CONTROL_ID);
	var topHeight = this.__divHeaderContainer.offsetHeight;
	if(divTitleBar)
	{
		topHeight += divTitleBar.offsetHeight;
	}
	if(divPagination)
	{
		topHeight += divPagination.offsetHeight;
	}
	var containerHeight = this.__divOuterContainer.offsetHeight;
	var containerWidth = this.__divOuterContainer.offsetWidth;
	this.__divBodyContainer.style.height = (containerHeight - topHeight) + "px";
	var scrollBarWidth = this.util.getScrollBarWidth(this.__divBodyContainer);
	this.__divHeaderContainer.style.width = (this.__divBodyContainer.offsetWidth - scrollBarWidth) + "px";
	this.__initialTableWidth = containerWidth - scrollBarWidth;
	if(!this.__synchronizeTablesRef)
	{
		this.__synchronizeTablesRef = this.__synchronizeTables.bind(this);
		this.util.addEvent(this.__divBodyContainer,"scroll",this.__synchronizeTablesRef);
	}
};

nsGrid1.__alignTables = function(fromSort)
{
	var tableHeader = this.__tblHeader;
	var tableBody = this.__tblBody;
	if(tableHeader.tHead && tableHeader.tHead.rows.length > 0 && tableBody.tHead && tableBody.tHead.rows.length)
	{
		var headerCells = tableHeader.tHead.rows[0].cells;
		var bodyCells = tableBody.tHead.rows[0].cells;
		if(headerCells && headerCells.length > 0 && bodyCells && bodyCells.length > 0)
		{
			var totalWidth = 0;
			var count = 0;
			var widthToBeSet = 0;
			if(fromSort)
			{
				for(count = 0;count < headerCells.length;count++)
				{
					widthToBeSet = this.util.getDimensionAsNumber(headerCells[count],headerCells[count].style.width);
					if(widthToBeSet === 0)
					{
						widthToBeSet = headerCells[count].getBoundingClientRect().width;//headerCells[count].offsetWidth;
					}
					totalWidth += widthToBeSet;
					bodyCells[count].style.width = widthToBeSet + "px";
					headerCells[count].style.width = widthToBeSet + "px";
				}
			}
			else
			{
				for(count = 0;count < bodyCells.length;count++)
				{
					widthToBeSet = this.util.getDimensionAsNumber(bodyCells[count],bodyCells[count].style.width);
					if(widthToBeSet === 0)
					{
						widthToBeSet = bodyCells[count].getBoundingClientRect().width;//bodyCells[count].offsetWidth;
					}
					totalWidth += widthToBeSet;
					headerCells[count].style.width = widthToBeSet + "px";
					bodyCells[count].style.width = widthToBeSet + "px";
				}
			}
			if(this.__initialTableWidth > totalWidth)
			{
				totalWidth = this.__initialTableWidth;
			}
			tableBody.style.width = totalWidth + "px";
			tableHeader.style.width = totalWidth + "px";
		}
	}
};

nsGrid1.__synchronizeTables = function(event) 
{
	if(this.__scroller)
	{
		this.__divHeaderContainer.scrollLeft = event.scrollLeft;
	}
	else
	{
		var target = this.util.getTarget(event);
		this.__divHeaderContainer.scrollLeft = target.scrollLeft;
		//console.log(target.scrollLeft + "," + this.__divHeaderContainer.scrollLeft);
	}
	
};

nsGrid1.__handleColumnResize = function(event)
{
	this.__alignTables(false);
	if(this.__enableVirtualScroll)
	{
		this.__setVirtualVariables(false);
	}
};

nsGrid1.__expandCollapseAll = function(dataSource,isCollapse)
{
	if(!dataSource)
	{
		dataSource = this.__arrWrapper;
	}
	if(dataSource && dataSource.length > 0)
	{
		for(var count = 0;count < dataSource.length;count++)
		{
			var item = dataSource[count];
			if(item[this.__fieldHasChild])
			{
				this.__showHideAllRow(item[this.__fieldIndex],null,isCollapse);
				//this.__expandCollapseAll(item[this.__childField],isCollapse);
			}
		}
		this.__showHideAllArrows(isCollapse);
	}
};

nsGrid1.__showHideRow = function(rowIndex,compArrow,isCollapse)
{
	if(rowIndex > -1)
	{
		var item = this.__getItemByIndex(rowIndex);
		if(!compArrow)
		{
			compArrow = this.__getArrow(item[this.__fieldIndex]);
		}
		var arrChildItems = [];
		if(item && item[this.__fieldHasChild])
		{
			if(isCollapse)
			{
				arrChildItems = this.__getAllChildItems(arrChildItems,item);
			}
			else
			{
				arrChildItems = this.__getImmediateChildItems(arrChildItems, item);
			}
			if(arrChildItems && arrChildItems.length > 0)
			{
				for(var count = 0;count < arrChildItems.length;count++)
				{
					var rowItem = arrChildItems[count];
					if(rowItem["nodeName"] === "TR")
					{
						rowItem = this.__getItemByIndex(rowItem.getAttribute("index"));
					}
					var row = rowItem[this.__fieldRow];
					if(isCollapse)
					{
						row.style.display = "none";
						rowItem[this.__fieldRowVisible] = false;
						if(rowItem[this.__fieldHasParent])
						{
							var rowParentIndex = rowItem[this.__fieldParentIndex];
							if(rowParentIndex > -1)
							{
								var divArrow = this.__getArrow(rowParentIndex);
								if(divArrow)
								{
									this.__setArrowDirection(divArrow,true);
									rowItem[this.__fieldIsCollapsed] = true;
								}
							}
						}
					}
					else
					{
						row.style.display = "";
						rowItem[this.__fieldRowVisible] = true;
					}
				}
			}
			this.__setArrowDirection(compArrow,isCollapse);
			item[this.__fieldIsCollapsed] = isCollapse;
		}
	}
};

//written a separate method for performance issues if the Hierarchy levels increases
nsGrid1.__showHideAllRow = function(rowIndex,compArrow,isCollapse)
{
	if(rowIndex > -1)
	{
		var item = this.__getItemByIndex(rowIndex);
		if(!compArrow)
		{
			compArrow = this.__getArrow(item[this.__fieldIndex]);
		}
		var arrChildItems = [];
		if(item && item[this.__fieldHasChild])
		{
			arrChildItems = this.__getAllChildItems(arrChildItems,item);
			if(arrChildItems && arrChildItems.length > 0)
			{
				for(var count = 0;count < arrChildItems.length;count++)
				{
					var rowItem = arrChildItems[count];
					var row = rowItem[this.__fieldRow];
					if(isCollapse)
					{
						row.style.display = "none";
						rowItem[this.__fieldRowVisible] = false;
						//setting __fieldIsCollapsed here assuming that __showHideAllArrows() will be called after this function
						rowItem[this.__fieldIsCollapsed] = true;
					}
					else
					{
						row.style.display = "";
						rowItem[this.__fieldRowVisible] = true;
						rowItem[this.__fieldIsCollapsed] = false;
					}
				}
				
			}
			this.__setArrowDirection(compArrow,isCollapse);
			item[this.__fieldIsCollapsed] = isCollapse;
		}
	}
};

nsGrid1.__showHideAllArrows = function(isCollapse)
{
	var arrDivs = this.__getAllArrows();
	if(arrDivs && arrDivs.length > 0)
	{
		for(var count = 0;count < arrDivs.length;count++)
		{
			var div = arrDivs[count];
			if(div && div.hasAttribute("parent-row-count"))
			{
				this.__setArrowDirection(div,isCollapse);
			}
		}
	}
};

nsGrid1.__isNodeLastParent = function(item)
{
	var retValue = false;
	if(item && item[this.__fieldHasChild])
	{
		var arrChildItems = item[this.__childField];
		if(arrChildItems && arrChildItems.length > 0)
		{
			var hasChild = false;
			for(var count = 0;count < arrChildItems.length;count++)
			{
				var rowItem = arrChildItems[count];
				if(rowItem && rowItem[this.__fieldHasChild])
				{
					hasChild = true;
					break;
				}
			}
			if(!hasChild)
			{
				retValue = true;
			}
		}
	}
	return retValue;
};

nsGrid1.__addCellText = function(row,item,div,colItem,colIndex)
{
	if(item && div && colItem)
	{
		var dataField = colItem["dataField"];
		var templateRenderer = colItem["templateRenderer"];
		var setData = colItem["setData"];
		var itemRenderer = colItem["itemRenderer"];
		var labelFunction = colItem["labelFunction"];
		if(itemRenderer)
		{
			var objRenderer = itemRenderer(item,dataField,this.__getTotalRows() - 1,colIndex,row);
			if(objRenderer)
			{
				if(this.util.isString(objRenderer))
				{
					var compBodySpan = document.createElement("span");
					compBodySpan.innerHTML = objRenderer;
					div.appendChild(compBodySpan);
				}
				else
				{
					div.appendChild(objRenderer);
				}
				return ;
			}
		}
		else if(templateRenderer)
		{
			div.appendChild(templateRenderer.cloneNode(true));
			this.__setDataInTemplateRenderer(div,item,dataField,setData,colItem,row);
		}
		else if(labelFunction)
		{
			var text = labelFunction(item,dataField,colItem);
			div.appendChild(document.createTextNode(text));
		}
		else if(item.hasOwnProperty(dataField) && !this.util.isUndefined(item[dataField]) && item[dataField] != null)
	    {
			
			var text = item[dataField];
			div.appendChild(document.createTextNode(text));
	    }
	}
};

nsGrid1.__updateCellText = function(row,cell,item,colItem,rowIndex,colIndex)
{
	if(cell && item && colItem)
	{
		this.util.removeAllChildren(cell);
		var divChild = this.util.createDiv(null);
	    cell.appendChild(divChild);
		this.__addCellText(row,item,divChild,colItem,colIndex);
	}
};

nsGrid1.__setDataInTemplateRenderer = function(cellItem,data,dataField,setData,colItem,row)
{
	if(cellItem && setData)
	{
		this.__setRendererProperties(cellItem);
		this.__setRendererInData(cellItem,data,row);
		//IE bug
		cellItem.data = data;
		if(this.util.isFunction(setData))
	    {
			var strParam = "(cellItem,data,dataField,colItem,row)"; 
	    	if(this.util.isString(setData))
	    	{
	    		this.util.callFunctionFromString(setData + strParam,function(paramValue){
					if(paramValue === "cellItem")
					{
						return cellItem;
					}
					if(paramValue === "data")
					{
						return data;
					}
					if(paramValue === "dataField")
					{
						return dataField;
					}
					if(paramValue === "colItem")
					{
						return colItem;
					}
					if(paramValue === "row")
					{
						return row;
					}
					return paramValue;
				});
	    	}
	    	else
	    	{
	    		setData(cellItem,data,dataField,colItem,row);
	    	}
	    }
	}
};

nsGrid1.__setRendererInData = function(cellItem,data,row)
{
	if(cellItem)
	{
		var compChild = null;
		for(var count = 0; count < cellItem.children.length; count++) 
		{
			compChild = cellItem.children[count];
			if(compChild)
			{
				compChild.data = data;
				compChild.row = row;
			}
			//IE 9 Bug,you got to assign it back
			//listItem.children[count] = compChild;
			this.__setRendererInData(compChild,data,row);
		}
	}
};

nsGrid1.__setRendererProperties = function(cellItem)
{
	if(cellItem)
	{
		var compChild = null;
		for(var count = 0; count < cellItem.children.length; count++) 
		{
			compChild = cellItem.children[count];
			var grid = this;
			Array.prototype.slice.call(compChild.attributes).forEach(function(attribute) 
			{
		        if(grid.util.isFunction(attribute.value))
		        {
		        	var newValue = attribute.value + "(this)";
		        	compChild.removeAttribute(attribute.name);
					compChild.setAttribute(attribute.name,newValue);
		        }
			});
			if(compChild)
			{
				if(compChild.hasAttribute("accessor-name"))
				{
					cellItem[compChild.getAttribute("accessor-name")] = compChild;
				}
			}
			this.__setRendererProperties(compChild);
		}
	}
};

nsGrid1.__calculateCellExpectedHeight = function(templateRenderer)
{
	var retHeight =  -1;
	if(templateRenderer)
	{
		var tempRenderer = templateRenderer.cloneNode(true);
		tempRenderer.removeAttribute("id");
		this.addChild(tempRenderer);
		retHeight = tempRenderer.offsetHeight;
		if(retHeight <= 0)
		{
			retHeight = this.util.getDimensionAsNumber(tempRenderer,tempRenderer.style.height);
		}
		this.deleteChild(tempRenderer);
	}
	return retHeight;
};

nsGrid1.__getAllItems = function()
{
	var	arrItems = [];
	if((this.__enableHierarchical || this.__enableGrouping) && this.__arrWrapper)
	{
		var item = null;
		for(var count = 0;count < this.__arrWrapper.length;count++)
		{
			item = this.__arrWrapper[count];
			var arrChild = [];
			arrChild = this.__getAllChildItems(null,item);
			arrItems.push(item);
			if(arrChild && arrChild.length)
			{
				arrItems.push.apply(arrItems, arrChild);
			}
		}
	}
	else
	{
		arrItems = this.__arrWrapper;
	}
	return arrItems;
};

nsGrid1.__getImmediateChildItems = function(arrItems,item)
{
	/*if(!arrItems)
	{
		arrItems = [];
	}
	if(item && item[this.__fieldHasChild])
	{
		var index = item[this.__fieldIndex];
		arrItems = document.querySelectorAll('[parent-index="' + index + '"]');
	}*/
	arrItems = item[this.__childField];
	return arrItems;
};

nsGrid1.__getAllChildItems = function(arrItems,item)
{
	if(!arrItems)
	{
		arrItems = [];
	}
	if(item && item[this.__fieldHasChild])
	{
		var arrChild = item[this.__childField];
		for(var count = 0;count < arrChild.length;count++)
		{
			var itemChild = arrChild[count];
			arrItems[arrItems.length] = itemChild;
			if(itemChild && itemChild[this.__fieldHasChild])
			{
				arrItems = this.__getAllChildItems(arrItems,itemChild);
			}
		}
	}
	return arrItems;
};

/*nsGrid1.__getAllChildItems = function(arrItems,item)
{
	if(!arrItems)
	{
		arrItems = [];
	}
	if(item && item[this.__fieldHasChild])
	{
		var index = item[this.__fieldIndex];
		var length = this.__arrInternalSource.length;
		for(var count = index + 1;count < length;count++)
		{
			var itemChild = this.__arrInternalSource[count];
			var parentIndex = itemChild[this.__fieldParentIndex];
			if(index === parentIndex)
			{
				arrItems.push(itemChild);
				if(itemChild[this.__fieldHasChild])
				{
					arrItems = this.__getAllChildItems(arrItems,itemChild);
					count = arrItems[arrItems.length - 1][this.__fieldIndex];
				}
			}
			else
			{
				break;
			}
		}
	}
	return arrItems;
};*/

nsGrid1.__getArrow = function(rowCount)
{
	var arrDivs = this.__getAllArrows();
	if(arrDivs && arrDivs.length > 0)
	{
		for(var count = 0;count < arrDivs.length;count++)
		{
			var div = arrDivs[count];
			if(div && div.hasAttribute("parent-row-count"))
			{
				var rowParentCount = div.getAttribute("parent-row-count");
				if(rowParentCount && rowParentCount == rowCount)
				{
					return div;
				}
			}
		}
	}
};

nsGrid1.__getAllArrows = function(divParent)
{
	if(!divParent)
	{
		divParent = this.__tblBody;
	}
	return divParent.querySelectorAll(".nsArrow");
};

nsGrid1.__getTotalRows = function()
{
	if(this.__tblBodyBody && this.__tblBodyBody.rows)
	{
		return this.__tblBodyBody.rows.length;
	}
	return 0;
};

/*nsGrid1.__getItemByIndex = function(indexToFind,source)
{
	if(!source)
	{
		source = this.__arrWrapper;
	}
	indexToFind = parseInt(indexToFind);
	if(source && source.length > 0)
	{
		for(var count = 0;count < source.length;count++)
		{
			var item = source[count];
			if(item && item[this.__fieldIndex] === indexToFind)
			{
				return item;
			}
		}
			
	}
	return null;
};*/

nsGrid1.__getItemByIndex = function(indexToFind,source)
{
	var retValue = null;
	if(!source)
	{
		source = this.__arrWrapper;
	}
	if(source && source.length > 0)
	{
		for(var count = 0;count < source.length;count++)
		{
			var item = source[count];
			if(item && item[this.__fieldIndex] === indexToFind)
			{
				retValue = item;
			}
			else if(item[this.__fieldHasChild])
			{
				retValue = this.__getItemByIndex(indexToFind,item[this.__childField]);
			}
			if(retValue)
			{
				return retValue;
			}
		}
			
	}
	return retValue;
};

nsGrid1.__getColumnObject = function(index)
{
	index = parseInt(index);
	if(this.__columns && index > -1 && index < this.__columns.length)
	{
		var item = null;
		for(var count = 0;count < this.__columns.length;count++)
		{
			item = this.__columns[count];
			if(item[this.__fieldColIndex] === index)
			{
				return item;
			}
		}
	}
	return null;
};

nsGrid1.__getColumnIndexByObject = function(objColumn)
{
	if(this.__columns && objColumn)
	{
		for(var count = 0;count < this.__columns.length;count++)
		{
			if(this.__columns[count][this.__fieldColIndex] === objColumn[this.__fieldColIndex])
			{
				return count;
			}
		}
	}
	return -1;
};

nsGrid1.__getColumnObjectByDataField = function(dataField)
{
	if(this.__columns && dataField)
	{
		for(var count = 0;count < this.__columns.length;count++)
		{
			var item = this.__columns[count];
			if(item["dataField"] === dataField)
			{
				return item;
			}
		}
	}
	return null;
};

nsGrid1.__getColumnIndexForSwapOrRemove = function(column)
{
	var index = -1;
	//checking below like this because column = 0 then column will return false;
	if(!this.util.isUndefined(column) && column != null)
	{
		if(this.util.isNumber(column) && this.__columns && column < this.__columns.length)
		{
			index = column;
		}
		else if(this.util.isString(column))
		{
			for(var count = 0;count < this.__columns.length;count++)
			{
				var item = this.__columns[count];
				if(item["dataField"] === column)
				{
					index = count;
					break;
				}
			}
		}
	}
	else
	{
		this.util.warning("nsGrid1","Please pass valid column information.");
	}
	return index;
};

nsGrid1.__isColumnValidForSwapOrRemove = function(columnIndex,operation)
{
	if(this.__isColumnIndexValid(columnIndex))
	{
		if((this.__enableHierarchical && columnIndex === 0) || (this.__enableGrouping && (columnIndex === 0 || this.__columns[columnIndex]["dataField"] === this.__groupByField)))
		{
			if(operation)
			{
				this.util.warning("nsGrid1","This column cannot be " + operation + ".");
			}
			return false;
		}
		return true;
	}
	return false;
	
};

nsGrid1.__swapCell = function(sourceCell,destinationCell)
{
	if(sourceCell && destinationCell)
	{
		var cellSource = this.util.copyElement(sourceCell);
		this.util.copyElement(destinationCell,sourceCell);
		this.util.copyElement(cellSource,destinationCell);
		return true;
	}
	return false;
};

nsGrid1.__isColumnIndexValid = function(columnIndex)
{
	if(columnIndex > -1 && columnIndex < this.__columns.length)
	{
		return true;
	}
	return false;
	
};

nsGrid1.__isMouseOnElement = function(element, currentX, currentY)
{
	var offset = this.util.getCumulativeOffset(element);
	return (currentY >= offset.y &&
			currentY <  offset.y + element.offsetHeight &&
            currentX >= offset.x + element.offsetWidth - 5 &&
            currentX <  offset.x + element.offsetWidth);
};

nsGrid1.__updateTotalRecords = function(totalCount)
{
	if(!totalCount)
	{
		totalCount = this.__arrInternalSource.length; 
	}
	//update total Rows if no server side call and pagination mode is manual
	if(!(this.__enableServerCall || (this.__enablePagination && !this.__isPaginationModeAuto)))
	{
		this.__totalRecords = totalCount;
	}
};

nsGrid1.__addPriorityClassInCell = function(cell,colItem)
{
	if(this.__isResponsiveModeColumnToggle && cell && colItem)
	{
		this.util.addStyleClass(cell,"column-priority-" + colItem["priority"]);
	}
};

nsGrid1.__setGridType = function()
{
	if(this.__type === this.GRID_TYPE_HIERARCHICAL)
	{
		this.__enableHierarchical = true;
		this.__objGrid = new NSHierarchicalGrid(this,this.util);
	}
	else if(this.__type === this.GRID_TYPE_GROUP)
	{
		this.__enableGrouping = true;
		this.__objGrid = new NSGroupingGrid(this,this.util);
	}
	else
	{
		this.__objGrid = new NSFlatGrid(this,this.util);
	}
};

nsGrid1.__setResponsiveMode = function()
{
	if(this.__enableResponsive)
	{
		if(!this.__responsiveMode || this.__responsiveMode === this.RESPONSIVE_MODE_STACK)
		{
			this.__isResponsiveModeStack = true;
			this.__isResponsiveModeColumnToggle = false;
			this.__arrQueries = ["only screen and (max-width: 760px),(min-device-width: 768px) and (max-device-width: 1024px)"];
		}
		else
		{
			this.__arrQueries = ["only screen and (min-width: 960px)",
			                     "only screen and (max-width: 960px) and (min-width: 800px)",
			                     "only screen and (max-width: 800px) and (min-width: 640px)",
			                     "only screen and (max-width: 640px) and (min-width: 480px)",
			                     "only screen and (max-width: 480px) and (min-width: 320px)",
			                     "only screen and (max-width: 320px)"];
			this.__isResponsiveModeColumnToggle = true;
			this.__isResponsiveModeStack = false;
		}
	}
	else
	{
		this.__isResponsiveModeColumnToggle = false;
		this.__isResponsiveModeStack = false;
	}
	
};

nsGrid1.__checkForVirtualMode = function()
{
	if(this.__enableVirtualScroll)
	{
		if(this.__enableHierarchical || this.__enableGrouping)
		{
			this.__enableVirtualScroll = false;
		}
		else if(this.__enablePagination)
		{
			this.__enableVirtualScroll = false;
		}
	}
};

nsGrid1.__addSVGInPage = function()
{
	var objSVG = new NSSvg();
	//for header Menu
	var circleDownArrowID = "svgCircleDownArrow";
	var groupDown = objSVG.createGroup(circleDownArrowID + "group");
	var circle = objSVG.createCircle(circleDownArrowID + "circle",8,8,8,null);
	groupDown.appendChild(circle);
	var polygon = objSVG.createPolygon(circleDownArrowID + "polygon","2,5.5 14,5.5 8,11.5","nsMenuArrow");
	groupDown.appendChild(polygon);
	objSVG.addElementInSymbol(circleDownArrowID,"0 0 16 16",groupDown);
	if(this.__enableExport)
	{
		var svgShapes = new NSSvgShapes();
		svgShapes.addExportInPage();
	}
	this.__objGrid.__addSVGInPage(objSVG);
};

nsGrid1.__addColumnPseudoStyle = function()
{
	var arrClass = [];
	var arrCSSText = [];
	if(this.__tblHeader.tBodies && this.__tblHeader.tBodies.length > 0 && this.__tblHeader.tBodies[0].rows && this.__tblHeader.tBodies[0].rows.length > 0)
	{
		var headerCells = this.__tblHeader.tBodies[0].rows[0].cells;
		var colIndex = 0;
		var cell = null;
        for(colIndex = 0; colIndex < headerCells.length; colIndex++)
        {
        	cell = headerCells[colIndex];
        	arrClass.push(".nsMobileStackGrid td:nth-of-type(" + (colIndex + 1) + "):before");
        	arrCSSText.push("content: '" + cell.textContent.trim() + "';");
        }
	}
	this.util.addCSSClassInDOM(arrClass,arrCSSText,false);
};
/******************************End of Custom Function *************************************/
/******************************Loader Related Function *************************************/
nsGrid1.showLoader = function()
{
	if(!this.__loader)
	{
		this.__loader = new this.util.loader(this.__divOuterContainer);
	}
	this.__loader.show();
};

nsGrid1.hideLoader = function()
{
	if(this.__loader)
	{
		this.__loader.hide();
	}
};
/******************************End of Loader Related Function *************************************/
/******************************Start of Export Related Function *************************************/
nsGrid1.__exportHandler = function(target,item)
{
	if(item)
	{
		if(!this.__exportFileName || this.__exportFileName === "")
		{
			this.__exportFileName = "Download";
		}
		var nsExport = new NSExport(this,this.__exportFileName);
		switch (item.id) 
		{
		    case 0:
		    	nsExport.excel("xls",this.__exportFileName);
		        break;
		    case 1:
		    	nsExport.csv();
		        break;
		    case 2:
		    	nsExport.word("doc");
		        break;
		    case 3:
		    	nsExport.text();
		        break;
		    case 4:
		    	nsExport.xml();
		        break;
		    case 5:
		    	nsExport.json();
		        break;
		    case 6:
		    	nsExport.pdf();
		        break;
		    case 7:
		    	nsExport.image();
		        break;
		    case 8:
		    	nsExport.excel("xlsx",this.__exportFileName);
		        break;
		    case 9:
		    	nsExport.word("docx");
		        break;
		}
	}
};
/******************************End of Export Related Function *************************************/

document.registerElement("ns-grid", {prototype: nsGrid1});
