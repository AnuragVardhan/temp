.nsElementTooltipContainer
.nsElementTooltipContainerVisible
.nsElementTooltipContainer .nsElementTooltipTipArrow{ 	
NSUtil.prototype.nsToolTipInElement = function()
{
	this.util = new NSUtil();
	this.__nsToolTip = null;
	this.__nsToolTipContent = null;
	
	this.addToolTip = function(element,toolTipHTML)
	{
		if(element && toolTipHTML && toolTipHTML.length > 0)
		{
			this.__createToolTip();
			this.util.addStyleClass(element,"nsElementTooltip");
			element.setAttribute("nsToolTip",toolTipHTML);
			this.util.addEvent(element,"mouseover",this.__elementMouseOverHandler.bind(this));
			this.util.addEvent(element,"mouseout",this.__elementMouseOutHandler.bind(this));
		}
	};
	
	this.__createToolTip = function()
	{
		if(!this.__nsToolTip)
		{
			var id = "nsElementToolTip" + this.util.getUniqueId();
			this.__nsToolTip = this.util.createElement("span",id + "ElementTooltipContainer", "nsElementTooltipContainer");
			var arrow = this.util.createElement("span",id + "ElementTooltipArrow", "nsElementTooltipTipArrow");
			this.__nsToolTip.appendChild(arrow);
			this.__nsToolTipContent = this.util.createElement("span",id + "ElementTooltipContent", "nsElementTooltipContent");
			this.__nsToolTip.appendChild(this.__nsToolTipContent);
			document.body.appendChild(this.__nsToolTip);
		}
	};
	
	this.__elementMouseOverHandler = function(event)
	{
		event = this.util.getEvent(event);
		var target = this.util.getTarget(event);
		if(!this.util.hasStyleClass(target, "nsElementTooltip"))
		{
			target = this.util.findParentBySelector(target,".nsElementTooltip");
		}
		if(target)
		{
			var toolTipHTML = target.getAttribute("nsToolTip");
			//var parentWithScroll = 
			this.__nsToolTipContent.innerHTML = toolTipHTML;
			var offset = this.util.getEventPosition(event);
			this.__nsToolTip.style.left = offset.left + "px";
			this.__nsToolTip.style.top = offset.top + "px";
			this.util.addStyleClass(this.__nsToolTip,"nsElementTooltipContainerVisible");
		}
	};
	
	this.__elementMouseOutHandler = function(event)
	{
		this.util.removeStyleClass(this.__nsToolTip,"nsElementTooltipContainerVisible");
	};
};
NSMenu.prototype.show = function (event) 
{ 
	event = this.util.getEvent(event);
	this.__nsPopUp.hideOtherNSPopUp();
	if(this.__config.createRunTime)
	{
		this.__isInternalCall = true;
		var dataSource = null;
		if(this.__config.sourceProvider)
		{
			dataSource = this.__config.sourceProvider(this.__lastSelectedTarget);
		}
		if(dataSource && dataSource.length > 0)
		{
			this.create(dataSource);
		}
		else
		{
			this.util.preventDefault(event);
			return;
		}
	}
	this.__nsPopUp.show();
	this.__nsPopUp.placePopUp(event);
	if(!this.__documentClickRef)
	{
		this.__documentClickRef = this.__documentClickHandler.bind(this);
		this.util.addEvent(document.documentElement,"click", this.__documentClickRef);
	}
	if(!this.__documentKeyUpRef)
	{
		this.__documentKeyUpRef = this.__documentKeyUpHandler.bind(this);
		this.util.addEvent(document.documentElement,"keyup", this.__documentKeyUpRef);
	}
	this.util.preventDefault(event);
};
NSMenu.prototype.__createElement = function(isRoot,dataSource) 
{
	var parentNode = null;
	if(dataSource && dataSource.length > 0)
	{
		if(isRoot)
		{
			parentNode = this.__nsPopUp.create();
		}
		else
		{
			parentNode = document.createElement("ul"); 
			this.util.addStyleClass(parentNode,"nsMenu");
			if(this.__config.width > -1)
			{
				parentNode.style.width = this.__config.width + "px";
			}
		}
		for (var count = 0; count < dataSource.length; count++) 
		{
			var item = dataSource[count];
			this.__createItem(item,parentNode);
		}
	}
	return parentNode;
};
