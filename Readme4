enableToolTipForTruncateText(Boolean):if this flag is true and truncateToFit is true for a column then toolTip will be shown in a Custom ToolTip. 
if this Flag is false and truncateToFit is true for a column then toolTip will be shown as Title. (defaultValue:false)
heightOffset (Number):  it defines the height is pixel which will be subtracted from the windows height and will be assigned to the grid container. This can also be changed with function setHeightOffset
enableMultiSort(Boolean): if this flag is true then sorting on multiple column will be enabled. (defaultValue:false)
multiColumnKey: If enableMultiSort  is true then this property represents the key which once pressed will do the multi column sorting on click of the column headers. (defaultValue:”shift”)
It can have values shift,ctrl,alt.
dataSource: this property sets the data for the grid. This should be array of objects. This can also be set with function dataSource.
columns: this property sets the columns for the grid. This should be array of objects. This can also be set with function setColumn.
customClass: this property applies custom css class to different parts of the grid if the user wants to customize it.
The different keys for this property are:
	outerContainer: apply custom css class to the outer most container.
	titleBar: apply custom css class to the title Bar.
	headerRow:  apply custom css class to the header row.
	headerCell:  apply custom css class to the header cells where Header Text is present.
	filterRow: apply custom css class to the filter row.
	filterCell: apply custom css class to the filter cells.
	bodyRow: apply custom css class to the body rows.
	bodyCell: apply custom css class to the body cells showing records.
	firstBodyColumn: apply custom css class to the first cell of each row .Generally used for Hierarchical and Grouping grid.
	nonFirstBodyColumn: apply custom css class to the non-first cells of each row. Generally used for Hierarchical and Grouping grid.






Public functions: 
setHeightOffset :  it is a setter method for the property heightOffset which defines the height is pixel which will be subtracted from the windows height and will be assigned to the grid container. 
getState:  This functions returns the current state of the grid which can be saved for later use.
setState: This functions sets the state we want the grid to be in. This function should be called before the datasource of the grid is set.
setColumn: this functions sets the columns for the grid. The parameter should be array of objects. This can also be set with the property  columns.
setContextMenuSetting: This function is used for setting the context menu properties.
dataSource: this function sets the data for the grid. The parameter should be array of objects. This can also be set with property dataSource.
getOrignalItem: this function takes a  datasource item returned from the grid as a parameter  and returns the item after removing grid specific columns. This should be used before sending the item to server for saving.
addRows: This function is used to add array of items. This function is generally used to add items when server side pagination is enabled or paginationMode is auto.
removeRows:  This function is used to remove array of items. This function takes array of Index as a parameter and then removes those rows and items from the datasource.
groupBy: This function is a setter for the property groupByField which specify the name of the fields (comma separated) in the datasource by which the datasource needs to be grouped.
expandAll:  This function is used by hierarchical and grouping grid to expand all rows.
collapseAll: This function is used by hierarchical and grouping grid to collapse all rows.
getRowInfo: This function takes row as a parameter and returns the row information which includes :
	rowIndex: index of the row
	rowLevel: level of the row compared to the root level.
	rowParentIndex: parent row index of the row.
	item: datasource item related to the row.
getCellInfo:  This function takes cell as a parameter and returns the cell information which includes :
	cellIndex: index of the cell.
	row: the corresponding row for which the cell is part of.
	rowIndex: index of the row
	rowLevel: level of the row compared to the root level.
	rowParentIndex: parent row index of the row.
	item: datasource item related to the row.
getItemInfo:  This function takes a parameter which can be below:
	event: if the parameter is event (for ex: click event of a button inside a cell) then the function will return the corresponding cell information (the return parameters will be same as getCellInfo function).
	element: if the parameter is an element like a button inside a cell or the cell itself, then the function will return the corresponding cell information (the return parameters will be same as getCellInfo function).
If the parameter is an element which is a row  then the function will return the corresponding row information (the return parameters will be same as getRowInfo function).
	number: If the parameter is a number then it is treated as the index of the datasource  and the function returns corresponding row information (the return parameters will be same as getRowInfo function).
getItemInfoByKeyField: This function returns  the corresponding row information for which the rowKeyField value passed as a parameter represents (the return parameters will be same as getRowInfo function).
cascadeValues:  This function is called for a grouping grid to cascade values to its children.
Parameters:
	event: the event of the parent control(for ex: event of onchange function of a parent dropdown).
	callback: this is a callback function which is called by the grid for every child row to implement the cascading.
If value of callback is not a valid function then grid handles the cascading feature internally if the child controls are a inbuilt html controls like (input(all type),Select etc.)
setFontSize: this method changes the font size of the grid dynamically to the value passed to this function as a parameter.
addColumn: this function adds a column dynamically to the grid at the last index. If the column has to be added at a specific index, call this function and reposition it using the swapColumn function.
hideColumn: this function hides the specific column of the grid. The parameter can be the dataField or columnIndex of the column to be hidden.
showColumn: this function unhide  the specific column of the grid. The parameter can be the dataField or columnIndex of the column to be unhidden.
swapColumns: this function swaps the source column from the destination column. The first parameter is the source column information and the second parameter is the destination column information.
The column information can be the dataField or columnIndex of the column.
moveColumn: this function moves  the source column to the destination column. The first parameter is the source column information and the second parameter is the destination column information.
The column information can be the dataField or columnIndex of the column.
sortBy: this function is used to sort the grid on a particular column programmatically.
Parameters: 
	column: this is the column information which can be the dataField or columnIndex of the column on which the grid will be sorted.
	isAscending: if this parameter is true then the grid will sorted in ascending order else it will be sorted in descending order.
updateRowByIndex: this function re-renders the row of the grid index of which is passed as a parameter to this function.
updateRowByKeyField: this function re-renders the row of the grid which represents the rowKeyField value which is passed as a parameter to this function.
updateCellByIndex: this function re-renders the cell of the grid.
Parameters:
	index : index of the row of which the cell is part of.
	dataField:  dataField value to which the cells represents in that row.  
updateCellByKeyField: this function re-renders the cell of the grid.
Parameters:
	keyFieldValue: rowKeyField value which represents the row of which the cell is part of.
	dataField:  dataField value to which the cells represents in that row.  
updateItemInDataSource: this function is used to update the item in the datasource if we manipulate the item outside of the grid, especially during the filtering if we manipulate the item this function should be called as for filtering the grid creates the copy of the item.
getGroupedSource: if the grid type is group then this function returns the grouped source which the grid created according to the groupByField parameter. For other types of grid this will return the original datasource.
setSelectedItems: this functions sets the selected items in the grid. It unselects any selected item before. It requires array of references to the items to be selected as a parameter.
addSelectedItems: this functions adds the selected items in the grid. It requires array of references to the items to be added in the selected Items as a parameter.

removeSelectedItems: this functions removes the selected items in the grid. It requires array of references to the items to be removed from the selected Items as a parameter.
setSelectedItem: this functions sets the selected item in the grid which is passed as a parameter.
setSelectedIndexes: this functions sets the selected indexes in the grid. It unselects any selected item before. It requires array of index from the data source which is to be selected as a parameter.
setSelectedIndex: : this functions sets the selected index in the grid which is passed as a parameter.
getSelectedIndex: this function returns the index in the data source of the selected item or -1 if no row is selected.
getSelectedItem: this function returns the item in the data source that is currently selected or null if no row is selected.
getSelectedIndexes: this function returns the indexes from the data source that is currently selected or null if no row is selected.
getSelectedItems:  this function returns the items  from the data source that is currently selected or null if no row is selected.
deselectAll: this function unselect all the rows which are selected in the grid.
filter:  this function is called to filter the grid data according to some specific criteria. Generally used for implementing Custom Filtering.
Parameters: 
	filterObject: 
o	for or condition: this will be an array of objects and each object will have key as the dataField to be filtered and value as the value which needs to searched.
var filter = [];
var setting = {};
for(var count = 0;count < arrID.length ;count++)
{
var control = document.querySelector("#txt" + arrID[count]);
	if(control && control.value)
	{
		var item = {};
		var key = control.getAttribute("field");
		item[key] = control.value;
		setting[key] = {caseSensitive:false,multiline:false,matchType:new NSFilter().CONTAINS};
	} 
	if(item)
	{
		filter.push(item);
	}
}

if(filter && filter.length > 0)
{
 	nsGrid.filter(filter,setting);
}
else
{
nsGrid.resetFilter();
}
o	for and condition: this will be an object with each key as the dataField to be filtered and value as the value which needs to searched.
var arrID = ["id","country","hierarchy","employees","year","date"];
var filter = {};
var setting = {};
for(var count = 0;count < arrID.length ;count++)
{
var control = document.querySelector("#txt" + arrID[count]);
	if(control && control.value)
	{
		var key = control.getAttribute("field");
		filter[key] = control.value;		
setting[key] = {caseSensitive:false,multiline:false,matchType:new NSFilter().CONTAINS};
	} 
	if(item)
	{
		filter.push(item);
	}
}

if(filter && filter.length > 0)
{
 	nsGrid.filter(filter,setting);
}
else
{
nsGrid.resetFilter();
}
