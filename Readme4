var scrollPrototype = {
    aConts  : [],
    mouseY : 0,
    N  : 0,
    parent : 0, /*active scrollbar element*/
    sc : 0,
    sp : 0,
    to : 0,
	move :0,

    // constructor
    scrollbar : function (cont_id) {
        var parent = document.getElementById(cont_id);

        // perform initialization
        if (! scrollPrototype.init()) return false;

        var parentClone = parent.cloneNode(false);
		parentClone.id=parentClone.id + "1";
        parentClone.style.overflow = "hidden";
        parent.parentNode.appendChild(parentClone);
        parentClone.appendChild(parent);
        parent.style.position = 'absolute';
        parent.style.left = parent.style.top = '0px';
        parent.style.width = parent.style.height = '100%';

        // adding new container into array
        scrollPrototype.aConts[scrollPrototype.N++] = parent;

        parent.isMouseDown = false;

        //creating scrollbar child elements
        parent.divScrollPane = this.create_div('ssb_st', parent, parentClone,"divScrollPane");
        parent.divScrollBar = this.create_div('ssb_sb', parent, parentClone,"divScroller");
        parent.divScrollUpArrow = this.create_div('ssb_up', parent, parentClone,"divScrollUpArrow");
        parent.divScrollDownArrow = this.create_div('ssb_down', parent, parentClone,"divScrollDownArrow");

        // on mouse down processing
        parent.divScrollBar.onmousedown = function (e) {
            if (! this.parent.isMouseDown) {
                if (! e) e = window.event;

                scrollPrototype.parent = this.parent;
                this.parent.eventScreenY = e.screenY;
                this.parent.eventScrollTop = parent.scrollTop;
                this.parent.isMouseDown = true;

                // new class name
                this.className = 'ssb_sb ssb_sb_down';
            }
            return false;
        }
        // on mouse down on free track area - move our scroll element too
        parent.divScrollPane.onmousedown = function (e) {
            if (! e) e = window.event;
            scrollPrototype.parent = this.parent;

            scrollPrototype.mouseY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
            for (var o = this.parent, y = 0; o != null; o = o.offsetParent) y += o.offsetTop;
            this.parent.scrollTop = (scrollPrototype.mouseY - y - (this.parent.ratio * this.parent.offsetHeight / 2) - this.parent.sw) / this.parent.ratio;
            this.parent.divScrollBar.onmousedown(e);
        }

        // onmousedown events
        parent.divScrollUpArrow.onmousedown = parent.divScrollUpArrow.ondblclick = function (e) { scrollPrototype.mousedown(this, -1); return false; }
        parent.divScrollDownArrow.onmousedown = parent.divScrollDownArrow.ondblclick = function (e) { scrollPrototype.mousedown(this,  1); return false; }

        //onmouseout events
        parent.divScrollUpArrow.onmouseout = parent.divScrollUpArrow.onmouseup = scrollPrototype.clear;
        parent.divScrollDownArrow.onmouseout = parent.divScrollDownArrow.onmouseup = scrollPrototype.clear;

        // on mouse over - apply custom class name: ssb_sb_over
        parent.divScrollBar.onmouseover = function (e) {
            if (! this.parent.isMouseDown) this.className = 'ssb_sb ssb_sb_over';
            return false;
        }

        // on mouse out - revert back our usual class name 'ssb_sb'
        parent.divScrollBar.onmouseout  = function (e) {
            if (! this.parent.isMouseDown) this.className = 'ssb_sb';
            return false;
        }

        // onscroll - change positions of scroll element
        parent.ssb_onscroll = function (event) {
            this.ratio = (this.offsetHeight - 2 * this.sw) / this.scrollHeight;
			//if(!event)
			//{
			console.log("ssb_onscroll before::" + scrollPrototype.top);
			//this.scrollTop
				this.divScrollBar.style.top = Math.floor(this.sw + scrollPrototype.top  * this.ratio) + 'px';
			//}
            
			console.log("ssb_onscroll::" + this.divScrollBar.id + "=" + this.divScrollBar.style.top);
        }

        // scrollbar width
        parent.sw = 20;

        // start scrolling
        parent.ssb_onscroll();
        scrollPrototype.refresh();
        
        // binding own onscroll event
        //parent.onscroll = parent.ssb_onscroll;
        return parent;
    },

    // initialization
    init : function () {
        if (window.oper || (! window.addEventListener && ! window.attachEvent)) { return false; }

        // temp inner function for event registration
        function addEvent (o, e, f) {
            if (window.addEventListener) { o.addEventListener(e, f, false); scrollPrototype.w3c = true; return true; }
            if (window.attachEvent) return o.attachEvent('on' + e, f);
            return false;
        }

        // binding events
        addEvent(window.document, 'mousemove', scrollPrototype.onmousemove);
        addEvent(window.document, 'mouseup', scrollPrototype.onmouseup);
        addEvent(window, 'resize', scrollPrototype.refresh);
        return true;
    },

    // create and append div finc
    create_div : function(c, parent, parentClone,id) {
        var o = document.createElement('div');
		if(id)
		{
			o.id = id;
		}
        o.parent = parent;
        o.className = c;
        parentClone.appendChild(o);
        return o;
    },
    // do clear of controls
    clear : function () {
        clearTimeout(scrollPrototype.to);
        scrollPrototype.sc = 0;
        return false;
    },
    // refresh scrollbar
    refresh : function () {
        for (var i = 0, N = scrollPrototype.N; i < N; i++) {
            var o = scrollPrototype.aConts[i];
            o.ssb_onscroll();
            o.divScrollBar.style.width = o.divScrollPane.style.width = o.divScrollUpArrow.style.width = o.divScrollUpArrow.style.height = o.divScrollDownArrow.style.width = o.divScrollDownArrow.style.height = o.sw + 'px';
            o.divScrollBar.style.height = Math.ceil(Math.max(o.sw * .5, o.ratio * o.offsetHeight) + 1) + 'px';
        }
    },
    // arrow scrolling
    arrow_scroll : function () {
        if (scrollPrototype.sc != 0) {
            scrollPrototype.parent.scrollTop += 6 * scrollPrototype.sc / scrollPrototype.parent.ratio;
            scrollPrototype.to = setTimeout(scrollPrototype.arrow_scroll, scrollPrototype.sp);
            scrollPrototype.sp = 32;
        }
    },

    /* event binded functions : */
    // scroll on mouse down
    mousedown : function (o, s) {
        if (scrollPrototype.sc == 0) {
            // new class name
            o.parent.divScrollBar.className = 'ssb_sb ssb_sb_down';
            scrollPrototype.parent = o.parent;
            scrollPrototype.sc = s;
            scrollPrototype.sp = 400;
            scrollPrototype.arrow_scroll();
        }
    },
    // on mouseMove binded event
    onmousemove : function(e) {
        if (! e) e = window.event;
        // get vertical mouse position
        scrollPrototype.mouseY = e.screenY;
        if (scrollPrototype.parent.isMouseDown)
		{
			scrollPrototype.top = scrollPrototype.parent.eventScrollTop + (scrollPrototype.mouseY - scrollPrototype.parent.eventScreenY) / scrollPrototype.parent.ratio;
			var maxValue = scrollPrototype.parent.scrollHeight - ((3 * scrollPrototype.parent.divScrollBar.offsetHeight) + (2 * scrollPrototype.parent.divScrollDownArrow.offsetHeight));
			if(scrollPrototype.top >=0 && scrollPrototype.top <= maxValue)
			{
				//scrollPrototype.parent.scrollTop = scrollPrototype.top;
				scrollPrototype.parent.ratio = (scrollPrototype.parent.offsetHeight - 2 * scrollPrototype.parent.sw) / scrollPrototype.parent.scrollHeight;
				scrollPrototype.parent.divScrollBar.style.top = Math.floor(scrollPrototype.parent.sw + scrollPrototype.top  * scrollPrototype.parent.ratio) + 'px';
			}
			
			

			console.log("onmousemove::" + maxValue + "=" + scrollPrototype.top);
		}
    },
    // on mouseUp binded event
    onmouseup : function (e) {
        if (! e) e = window.event;
        var tg = (e.target) ? e.target : e.srcElement;
        if (scrollPrototype.parent && document.releaseCapture) 
		{
			scrollPrototype.parent.releaseCapture();
		}

        // new class name
        if (scrollPrototype.parent)
		{
			var className = "";
			if(tg.className.indexOf('scrollbar') > 0)
			{
				className = 'ssb_sb ssb_sb_over';
			}
			else
			{
				className = 'ssb_sb';
				scrollPrototype.parent.scrollTop = scrollPrototype.top;
			}
			scrollPrototype.parent.divScrollBar.className = className;
		}
        document.onselectstart = '';
        scrollPrototype.clear();
        scrollPrototype.parent.isMouseDown = false;
    }
}

window.onload = function() {
    scrollPrototype.scrollbar('main_content'); // scrollbar initialization
}
