NSUtil.prototype.loader = function(parentContainer,isOverlayRequired)
{
	this.parentContainer = parentContainer;
	this.isOverlayRequired = isOverlayRequired;
	this.util = new NSUtil();
	this.divOverlay = null;
	this.divLoaderContainerParent = null;
	this.canvasLoader = null;
	this.loaderContext= null;
	this.idPrefix = null;
	this.loaderLines = 16;
	this.canvasWidth = 100;
	this.canvasHeight = 100;
	this.animationStart = null;
	this.orignalParentPosition = null;
	
	this.createComponents = function()
	{
		this.idPrefix = this.parentContainer.id ? this.parentContainer.id : this.util.getUniqueId();
		if(this.util.isUndefined(this.isOverlayRequired))
		{
			this.isOverlayRequired = true;
		}
		if(this.isOverlayRequired)
		{
			this.orignalParentPosition = this.parentContainer.style.position;
			this.parentContainer.style.position = "relative";
			this.divOverlay = this.util.createDiv("divOverlay","nsLoaderOverlay");
			this.divOverlay.style.height = this.parentContainer.offsetHeight + "px";
			this.divOverlay.style.width = this.parentContainer.offsetWidth + "px";
			this.parentContainer.appendChild(this.divOverlay);
		}
		this.divLoaderContainerParent = this.util.createDiv(this.idPrefix + "divLoaderContainerParent","nsLoaderContainerParent"); 
		this.parentContainer.appendChild(this.divLoaderContainerParent);
		var divLoaderContainer = this.util.createDiv(this.idPrefix + "divLoaderContainer","nsLoaderContainer"); 
		this.divLoaderContainerParent.appendChild(divLoaderContainer);
		this.canvasLoader = document.createElement("canvas");
		this.canvasLoader.id = this.idPrefix + "canvas";
		this.canvasLoader.width = this.canvasWidth;
		this.canvasLoader.height = this.canvasHeight;
		this.canvasLoader.style.background = "#FFFFFF";
		this.canvasLoader.style.position = "absolute";
		divLoaderContainer.appendChild(this.canvasLoader);
		this.loaderContext= this.canvasLoader.getContext("2d");
		
		var divLoadingLabel = this.util.createDiv(this.idPrefix + "divLoadingLabel","nsLoaderText"); 
		divLoadingLabel.appendChild(document.createTextNode("Loading"));
		divLoaderContainer.appendChild(divLoadingLabel);
		
		this.centerElement(this.divLoaderContainerParent);
		var canvasLeft = (((divLoaderContainer.offsetWidth - this.canvasWidth) / 2) - 5);
		var canvasTop = Math.max((((divLoaderContainer.offsetHeight - this.canvasHeight) / 2)),0);
		this.canvasLoader.style.left = canvasLeft + "px";
		this.canvasLoader.style.top = canvasTop + "px";
		this.centerElement(divLoadingLabel);
		divLoadingLabel.style.top = (canvasTop + this.canvasHeight) + "px";
		this.animationStart = new Date();
		window.setInterval(this.draw.bind(this), 1000 / 30);
	};
	
	this.centerElement = function(component)
	{
		if(component)
		{
			var parent = component.parentNode;
			component.style.left = ((parent.offsetWidth - component.offsetWidth) / 2) + "px";
			component.style.top = ((parent.offsetHeight - component.offsetHeight) / 2) + "px";
		}
	};
	
	this.draw = function() 
	{
	    var rotation = parseInt(((new Date() - this.animationStart) / 1000) * this.loaderLines) / this.loaderLines;
	    this.loaderContext.save();
	    this.loaderContext.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
	    this.loaderContext.translate(this.canvasWidth / 2, this.canvasHeight / 2);
	    this.loaderContext.rotate(Math.PI * 2 * rotation);
	    for (var count = 0; count < this.loaderLines; count++) {
	 
	    	this.loaderContext.beginPath();
	    	this.loaderContext.rotate(Math.PI * 2 / this.loaderLines);
	    	this.loaderContext.moveTo(this.canvasWidth / 10, 0);
	    	this.loaderContext.lineTo(this.canvasWidth / 4, 0);
	    	this.loaderContext.lineWidth = this.canvasWidth / 30;
	    	this.loaderContext.strokeStyle = "rgba(0,0,0," + count / this.loaderLines + ")";
	    	this.loaderContext.stroke();
	    }
	    this.loaderContext.restore();
	};
	
	this.show = function()
	{
		if(!this.divLoaderContainerParent)
		{
			this.createComponents();
		}
		this.divLoaderContainerParent.style.display = "inline-block";
		if(this.isOverlayRequired)
		{
			this.divOverlay.style.display = "inline-block";
			this.parentContainer.style.position = "relative";
		}
	};
	
	this.hide = function()
	{
		if(this.divLoaderContainerParent)
		{
			this.divLoaderContainerParent.style.display = "none";
		}
		if(this.divOverlay)
		{
			this.divOverlay.style.display = "none";
			this.parentContainer.style.position = this.orignalParentPosition;
		}
	};
	
};
