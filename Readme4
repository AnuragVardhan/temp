function NSList(component,setting) 
{
	//this.base.call(this);
	this.ITEM_SELECTED = "itemSelected";
	this.ITEM_UNSELECTED = "itemUnselected";
	this.ITEM_NAVIGATED = "itemNavigated";
	this.NAVIGATION_UP = "up";
	this.NAVIGATION_DOWN = "down";
	this.ITEM_DROPPING = "itemDropping";
	this.ITEM_DROPPED = "itemDropped";
	this.DRAG_STARTED = "dragStarted";
	this.DRAGGING = "dragging";
	this.DRAG_END = "dragEnd";
	
	this.__setting = setting;
	this.__dataSource = null;
	this.__labelField = "label";
	this.__itemRenderer = null;
	this.__templateID = null;
	this.__setData = null;
	this.__labelFunction = null;
	this.__enableHierarchical = false;
	this.__enableMouseHover = false;
	this.__enableMouseHoverAnimation = false;
	this.__disableHoverField = null;
	this.__disableHoverFunction = null;
	this.__enableKeyboardNavigation = false;
	this.__enableMultipleSelection = false;
	this.__customScrollerRequired = false;
	this.__enableVirtualScroll = false;
	this.__isDraggable = true;
	this.__isDroppable = true;
	this.__enableDragByHandle = false;
	this.__dragHandlerClass = null;
	this.__enableDragAfterHold = false;
	this.__holdTime = 500;
	this.__enableCloneMode = false;
	this.__rowHeight = -1;
	this.__noDataMessage = "No matching records found";
	this.__enableContextMenu = false;
	this.__contextMenuProvider = null;
	this.__contextMenuSetting = null;
	this.__enableTruncateToFit = false;
	this.__toolTipField = null;
	this.__enableToolTipForTruncateText = false;
	this.__toolTipRenderer = null;
	
	this.__arrWrapper = null;
	this.__arrInternalSource = null;
	this.__arrFlatHierarchicalSource = [];
	
	this.__divOuterContainer = null;
	this.__divParentContainer = null;
	this.__listContainer = null;
	this.__scroller = null;
	
	this.__template = null;
	this.__currentIndex = -1;
	this.__selectedIndex = -1;
	this.__navigationIndex = -1;
	this.__selectedItem = null;
	this.__selectedItems = [];	
	this.__selectedIndexes = [];
	this.__lastNavigationDirection = null;
	this.__orignalItemKey = [];
	//for keyboard navigation
	this.__pageSize = 0;
	this.__scrollTarget = null;
	this.__startArrayElement = -1;
	this.__listItemHeight = 0;
	//for Virtual Scroll
	this.__virtualRowHeight = 0;
	this.__rowCount = 0;
	this.__scrollOffsetPosition = 0;
	this.__lastScrollPosition = 0;
	this.__divVirtualScrollParent = null;
	this.__divVirtualScroller = null;
	
	this.__childField = "children";
	this.__CLASS_GROUP_CELL = "nsListGroupCell";
	this.__CLASS_CELL_CHILD = "nsListCellChild";
	
	//removing this.getID() as prefix as move functionality from one list to another would have different fields.
	this.__fieldPrefix = "ns_field";
	this.__fieldIndex =  this.__fieldPrefix + "_item_index";
	this.__fieldVisibleIndex = this.__fieldPrefix + "_item_visible_index";
	this.__fieldItem = this.__fieldPrefix + "_item";
	this.__fieldDisableHover = this.__fieldPrefix + "_disableHover";
	this.__fieldSelected = this.__fieldPrefix + "_selected";
	
	this.__fieldItemLevel = this.__fieldPrefix + "_item_level";
	this.__fieldItemVisible = this.__fieldPrefix + "_item_visible";
	this.__fieldParentIndex = this.__fieldPrefix + "_parent_index";
	this.__fieldHasChild = this.__fieldPrefix + "_item_hasChild";
	this.__fieldHasParent = this.__fieldPrefix + "_item_hasParent";
	this.__fieldIsCollapsed = this.__fieldPrefix + "_item_isCollapsed";
	this.__fieldItemArrow = this.__fieldPrefix + "_item_arrow";
	
	this.__isShiftPressed = false;
	this.__isCtrlPressed = false;
	
	this.__objGrid = null;
	this.__nsListFilter = null;
	this.__nsListDragDrop = null;
	this.__nsToolTipInElement = null;
	
	this.__keyDownRef = null;
	this.__keyUpRef = null;
	this.base.__setBaseComponent.call(this,component);
};
nsExtendPrototype(NSContainerBase,NSList);
NSList.prototype.constructor = NSList;

NSList.prototype.initializeComponent = function() 
{
	this.base.initializeComponent.call(this);
	this.__setSetting();
	this.__initializePluggins();
};

NSList.prototype.setComponentProperties = function() 
{
	this.base.setComponentProperties.call(this);
	this.__objGrid.__addSVGInPage();
	this.__setTemplate();
	this.__addListenerForBody();
	if(this.__dataSource)
	{
		this.dataSource(this.__dataSource);
	}
	if(!window["nsListMap"])
	{
		window["nsListMap"] = {};
	}
	window["nsListMap"][this.getID()] = this;
};

NSList.prototype.propertyChange = function(attrName, oldVal, newVal, setProperty)
{
	var attributeName = attrName.toLowerCase();
	this.base.propertyChange.call(this,attrName, oldVal, newVal, setProperty);
};

NSList.prototype.removeComponent = function() 
{
	if(this.__keyDownRef)
	{
		this.util.removeEvent(document,"keydown",this.__keyDownRef);
		this.__keyDownRef = null;
	}
	if(this.__keyUpRef)
	{
		this.util.removeEvent(document,"keyup",this.__keyUpRef);
		this.__keyUpRef = null;
	}
	if(this.__scroller)
	{
		this.__scroller.__destroyElements();
		this.__scroller = null;
	}
	this.base.removeComponent.call(this);
};

NSList.prototype.componentResized = function(event) 
{
	this.base.componentResized.call(this,event);
};

NSList.prototype.expandAll = function()
{
	if(this.__enableHierarchical)
	{
		this.__expandCollapseAll(false);
	}
};

NSList.prototype.collapseAll = function()
{
	if(this.__enableHierarchical)
	{
		this.__expandCollapseAll(true);
	}
};

NSList.prototype.setContextMenuSetting = function(contextMenuSetting)
{
	this.__contextMenuSetting = contextMenuSetting;
};

NSList.prototype.__setSetting = function()
{
	var setting = this.__setting;
	if(setting)
	{
		if(setting.hasOwnProperty("enableHierarchical"))
		{
			this.__enableHierarchical = Boolean.parse(setting["enableHierarchical"]);
		}
		if(setting.hasOwnProperty("enableVirtualScroll"))
		{
			this.__enableVirtualScroll = Boolean.parse(setting["enableVirtualScroll"]);
		}
		if(setting.hasOwnProperty("enableDragDrop"))
		{
			if(!this.__enableVirtualScroll)
			{
				this.__enableDragDrop = Boolean.parse(setting["enableDragDrop"]);
			}
		}
		if(setting.hasOwnProperty("isDraggable"))
		{
			this.__isDraggable = Boolean.parse(setting["isDraggable"]);
		}
		if(setting.hasOwnProperty("isDroppable"))
		{
			this.__isDroppable = Boolean.parse(setting["isDroppable"]);
		}
		if(setting.hasOwnProperty("enableDragByHandle"))
		{
			this.__enableDragByHandle = Boolean.parse(setting["enableDragByHandle"]);
		}
		if(setting.hasOwnProperty("dragHandlerClass"))
		{
			this.__dragHandlerClass = setting["dragHandlerClass"];
		}
		if(setting.hasOwnProperty("enableDragAfterHold"))
		{
			this.__enableDragAfterHold = Boolean.parse(setting["enableDragAfterHold"]);
		}
		if(setting.hasOwnProperty("holdTime"))
		{
			this.__holdTime = parseInt(setting["holdTime"]);
		}
		if(setting.hasOwnProperty("enableCloneMode"))
		{
			this.__enableCloneMode = Boolean.parse(setting["enableCloneMode"]);
		}
		if(setting.hasOwnProperty("labelField"))
		{
			this.__labelField = setting["labelField"];
		}
		if(setting.hasOwnProperty("itemRenderer"))
		{
			this.__itemRenderer = setting["itemRenderer"];
			if (typeof this.__itemRenderer === "string" || this.__itemRenderer instanceof String)
			{
				if(this.util.isFunction(this.__itemRenderer))
				{
					this.__itemRenderer = window[this.__itemRenderer];
				}
			}
		}
		if(setting.hasOwnProperty("template"))
		{
			this.__templateID = setting["template"];
		}
		if(setting.hasOwnProperty("setData"))
		{
			this.__setData = setting["setData"];
		}
		if(setting.hasOwnProperty("labelFunction"))
		{
			this.__labelFunction = setting["labelFunction"];
			if (typeof this.__labelFunction === "string" || this.__labelFunction instanceof String)
			{
				if(this.util.isFunction(this.__labelFunction))
				{
					this.__labelFunction = window[this.__labelFunction];
				}
			}
		}
		if(setting.hasOwnProperty("enableMultipleSelection"))
		{
			this.__enableMultipleSelection =  Boolean.parse(setting["enableMultipleSelection"]);
		}
		if(setting.hasOwnProperty("customScrollerRequired"))
		{
			this.__customScrollerRequired =  Boolean.parse(setting["customScrollerRequired"]);
		}
		if(setting.hasOwnProperty("enableKeyboardNavigation"))
		{
			this.__enableKeyboardNavigation =  Boolean.parse(setting["enableKeyboardNavigation"]);
		}
		if(setting.hasOwnProperty("enableMouseHover"))
		{
			this.__enableMouseHover =  Boolean.parse(setting["enableMouseHover"]);
		}
		if(setting.hasOwnProperty("enableMouseHoverAnimation"))
		{
			this.__enableMouseHoverAnimation =  Boolean.parse(setting["enableMouseHoverAnimation"]);
		}
		if(setting.hasOwnProperty("disableHoverField"))
		{
			this.__disableHoverField = setting["disableHoverField"];
		}
		if(setting.hasOwnProperty("disableHoverFunction"))
		{
			this.__disableHoverFunction = setting["disableHoverFunction"];
			if (typeof this.__disableHoverFunction === "string" || this.__disableHoverFunction instanceof String)
			{
				if(this.util.isFunction(this.__disableHoverFunction))
				{
					this.__disableHoverFunction = window[this.__disableHoverFunction];
				}
			}
		}
		if(setting.hasOwnProperty("rowHeight"))
		{
			this.__rowHeight =  parseInt(setting["rowHeight"]);
		}
		if(setting.hasOwnProperty("noDataMessage"))
		{
			this.__noDataMessage = setting["noDataMessage"];
		}
		if(setting.hasOwnProperty("dataSource"))
		{
			this.__dataSource = setting["dataSource"];
		}
		if(setting.hasOwnProperty("childField"))
		{
			this.__childField = setting["childField"];
		}
		if(setting.hasOwnProperty("enableContextMenu"))
		{
			this.__enableContextMenu = Boolean.parse(setting["enableContextMenu"]);
		}
		if(setting.hasOwnProperty("contextMenuProvider"))
		{
			this.__contextMenuProvider =  setting["contextMenuProvider"];
			this.__contextMenuProvider = this.util.getFunction(this.__contextMenuProvider);
		}
	}
};

NSList.prototype.dataSource = function(source)
{
	this.__dataSource = source;
	if(this.__listContainer)
	{
		this.util.removeAllChildren(this.__listContainer);
	}
	else
	{
		this.__createStructure();
	}
	if(this.__dataSource && this.__dataSource.length > 0)
	{
		this.__orignalItemKey = Object.keys(this.__dataSource[0]);
		this.__objGrid.dataSource();
	}
	else
	{
		this.__arrWrapper = [];
		this.__arrInternalSource = [];
		this.__updateTotalRecords(0);
	}
	/*if(this.__enableVirtualScroll)
	{
		//this.__updateItemsForVirtualMode();
	}*/
	this.__renderBody();
	if(!this.__scroller)
	{
		this.__scrollTarget = this.__divOuterContainer;
		if(this.__customScrollerRequired)
		{
			this.__divOuterContainer.style.overflow = "hidden";
			this.__scroller = new NSScroller(this.__parentContainer);
			this.__scrollTarget = this.__scroller.getChildContainer();
		}
	}
};

NSList.prototype.getOrignalItem = function(item)
{
	if(item && this.__orignalItemKey && this.__orignalItemKey.length > 0)
	{
		var retItem = {};
		var key = null;
		for(var count = 0;count < this.__orignalItemKey.length;count++)
		{
			key = this.__orignalItemKey[count];
			retItem[key] = item[key];
		}
		return retItem;
	}
	return item;
};

NSList.prototype.addItems = function(arrItem)
{
	this.__addItem(arrItem);
};

NSList.prototype.removeItems = function(arrObject)
{
	if(arrObject && arrObject.length > 0)
	{
		var arrIndex = [];
		if(this.util.isNumber(arrObject[0]))
		{
			arrIndex = arrObject;
		}
		else
		{
			for (var count = 0;count < arrObject.length;count++)
		    {
				var item = arrObject[count];
				if(item && item[this.__fieldIndex])
				{
					arrIndex.push(item[this.__fieldIndex]);
				}
		    }
		}
		arrIndex.sort();
   	 	for (var rowIndex = arrIndex.length - 1; rowIndex >= 0; rowIndex--)
	    {
   	 		var index = arrIndex[rowIndex];
   	 		if(index > 0 && index < this.__arrInternalSource.length)
   	 		{
	   	 		//if virtual scroll or Pagination of type Page is enabled then do not remove rows
	   	 		if(!this.__enableVirtualScroll)
	   	 		{
	   	 			this.__listContainer.removeChild(this.__listContainer.childNodes[index]);
	   	 		}
	   	 		this.__arrInternalSource.splice(index, 1);
	   	 		this.__arrWrapper.splice(index, 1);
   	 		}
	    }
	 	this.__updateTotalRecords();
	}
};

NSList.prototype.scrollToIndex = function(selectedIndex,animationRequired)
{
	selectedIndex = parseInt(selectedIndex);
	var source = this.__objGrid.__getFlatSource();
	if(selectedIndex > -1 && source && selectedIndex < source.length)
	{
		var item = this.__getItemByIndex(selectedIndex);
		if(item)
		{
			var targetDimension = -1;
			var scrollTarget = null;
			if(this.__enableVirtualScroll)
			{
				targetDimension = this.__virtualRowHeight * (selectedIndex - 1);
				scrollTarget = this.__divVirtualScrollParent;
			}
			else
			{
				if(item[this.__fieldItem])
				{
					targetDimension = (item[this.__fieldItem].offsetTop);
				}
				scrollTarget = this.__scrollTarget;
			}
			if(animationRequired)
			{
				var animation = new this.util.animation(scrollTarget,[
	       	  	    {
	       	  	      time: 1,
	       	  	      property:"scrollTop",
	       	  	      target: targetDimension,
	       	  	    }
	       	  	]);
	   	  	  	animation.animate();
			}
			else
			{
				scrollTarget.scrollTop = targetDimension;
			}
		}
	}
};

NSList.prototype.setSelectedItems = function(arrItems)
{
	if(arrItems && arrItems.length > 0)
	{
		var source = this.__objGrid.__getFlatSource();
		if(source)
		{
			this.__clearAllRowSelection(false);
			var length = arrItems.length;
			var item = null;
			var index = -1;
			for(var count = 0;count < length;count++)
			{
				item = arrItems[count];
				index = this.__getIndexByItem(item);
				if(index > -1 && source && index < source.length)
				{
					this.__setIndex(index,true);
				}
			}
		}
	}
};

NSList.prototype.setSelectedItem = function(arrItems)
{
	this.setSelectedItems([arrItems]);
};

NSList.prototype.setSelectedIndexes = function(arrSelectedIndex)
{
	if(arrSelectedIndex && arrSelectedIndex.length > 0)
	{
		var source = this.__objGrid.__getFlatSource();
		if(source)
		{
			var length = arrSelectedIndex.length;
			var index = -1;
			for(var count = 0;count < length;count++)
			{
				index = arrSelectedIndex[count];
				if(index > -1 && source && index < source.length)
				{
					this.__setIndex(index,true);
				}
			}
		}
	}
};

NSList.prototype.setSelectedIndex = function(selectedIndex)
{
	this.setSelectedIndexes([selectedIndex]);
};

NSList.prototype.getSelectedIndex = function()
{
	return this.__selectedIndex;
};

NSList.prototype.getSelectedItem = function()
{
	return this.__selectedItem;
};

NSList.prototype.getSelectedIndexes = function()
{
	return this.__selectedIndexes;
};

NSList.prototype.getSelectedItems = function()
{
	return this.__selectedItems;
};

NSList.prototype.deselectAll = function()
{
	this.__clearAllRowSelection(true);
};

NSList.prototype.filter = function(strData,setting,enableHighlighting,recordLimit)
{
	this.__nsListFilter.filter(strData,setting,enableHighlighting,recordLimit);
};

NSList.prototype.resetFilter = function()
{
	this.__nsListFilter.reset();
};

NSList.prototype.__highlightDiv = function(divText)
{
	this.__nsListFilter.__highlightDiv(divText);
};

NSList.prototype.__initializePluggins = function()
{
	if(!this.__objGrid)
	{
		if(this.__enableHierarchical)
		{
			this.__objGrid = new NSHierarchicalList(this);
		}
		else
		{
			this.__objGrid = new NSFlatList(this);
		}
	}
	if(!this.__nsListFilter)
	{
		this.__nsListFilter = new NSListFilter(this);
		if(this.__enableDragDrop)
		{
			this.__nsListDragDrop = new NSListDragDrop(this);
		}
	}
	this.__nsToolTipInElement = new this.util.nsToolTipInElement();
};

NSList.prototype.__createStructure = function()
{
	if(!this.__divOuterContainer)
	{
		this.__divOuterContainer = this.util.createDiv(this.getID() + "container","nsListOuterContainer");
		this.__divOuterContainer.style.width = this.util.getStyleValue(this.__baseComponent,"width");
		//this.__divOuterContainer.style.height = this.util.getStyleValue(this.__baseComponent,"height");
		this.addChild(this.__divOuterContainer);
		this.__divParentContainer = this.util.createDiv(this.getID() + "parentContainer","nsListParentContainer");
		this.__divOuterContainer.appendChild(this.__divParentContainer);
		this.__listContainer = this.util.createElement("ul",this.getID() + "list","nsListContainer");
		this.__listContainer.style.minHeight = (this.__divOuterContainer.clientHeight - 10) + "px";
		this.__divParentContainer.appendChild(this.__listContainer);
		if(this.__enableVirtualScroll)
		{
			this.__divVirtualScrollParent = this.util.createDiv(this.getID()  + "scrollParent","nsListScrollerCauseParent");
			this.__divVirtualScroller = this.util.createDiv(this.getID()  + "scroll","nsListScrollerCause");
			this.__divVirtualScroller.innerHTML = "&nbsp;";
			this.__divVirtualScrollParent.appendChild(this.__divVirtualScroller);
			this.__divOuterContainer.appendChild(this.__divVirtualScrollParent);
			this.util.addStyleClass(this.__divParentContainer,"nsListBodyContainerVirtual");
			this.util.addEvent(this.__divVirtualScrollParent,"scroll",this.__bodyScrollVirtualHandler.bind(this));
			this.util.addEvent(this.__divParentContainer,"mousewheel",this.__bodyMousewheelVirtualHandler.bind(this));
		}
	}
};

NSList.prototype.__renderBody = function()
{
	this.__listContainer.scrollTop = 0;
	this.util.removeAllChildren(this.__listContainer);
	if(this.__enableContextMenu)
	{
		this.__initializeContextMenu();
	}
	if(this.__enableVirtualScroll)
	{
		this.__setVirtualMesaurement();
		this.__createListVirtual(this.__rowCount);
	}
	else
	{
		this.__createList(this.__arrInternalSource,0,this.__arrInternalSource.length);
		//5 is offset for number of rows
		var listItem = this.__getListItemByIndex(0);
		if(listItem)
		{
			this.__listItemHeight = listItem.clientHeight;
		}
		this.__pageSize = (this.__divOuterContainer.clientHeight/this.__listItemHeight) - 5;
		this.__startArrayElement = 0;
	}
	this.__setBodyMeasurement();
	if(this.__nsListDragDrop)
	{
		this.__nsListDragDrop.initialize();
	}
};

NSList.prototype.__setVirtualMesaurement = function()
{
	this.__divOuterContainer.style.overflowY = "hidden";
	this.__divParentContainer.style.position = "relative";
	/*this.__listContainer.style.position = "absolute";
	this.__listContainer.style.top = "0px";
	this.__listContainer.style.left = "0px";*/
	this.__divParentContainer.scrollTop = 0;
	if(this.__divVirtualScrollParent)
	{
		this.__divVirtualScrollParent.scrollTop = 0;
	}
	this.__setVirtualVariables(true);
};

NSList.prototype.__setVirtualVariables = function(isReset)
{
	var divScroll = this.__divVirtualScroller;
	if(this.__arrInternalSource && this.__arrInternalSource.length > 0)
	{
		var totalRecords = 0;
		var scrollHeight = 0;
		var virtualRowHeight = 0;
		if(isReset)
		{
			var rect = this.__baseComponent.getBoundingClientRect();
			var availableHeight = rect.height;
			if(this.__rowHeight > 0)
			{
				this.__virtualRowHeight = this.__rowHeight;
			}
			else
			{
				this.__createList(this.__arrInternalSource,0,1);
				var item = this.__arrInternalSource[0];
				var listItem = item[this.__fieldItem];
			    this.__virtualRowHeight = listItem.offsetHeight;
			    listItem.parentNode.removeChild(listItem);
			}
			//Start of workaround for IE issue of limitation of scrollTop Value
			//In IE 11 it is 1533917px 
			//Logic is that this.__divCenterTableBodyContainer.scrollHeight gives max scrollTop Value hence if scrollHeight exceeds this.__divCenterTableBodyContainer.scrollHeight then reset scrollHeight value to this.__divCenterTableBodyContainer.scrollHeight
			//and recalculate rowHeight (this.__virtualRowHeight) value;
			scrollHeight = (this.__totalRecords * this.__virtualRowHeight);
			divScroll.style.maxHeight = scrollHeight + "px";
			divScroll.style.height = scrollHeight + "px";
			//if Custom scroll is there then te recalculation is not required
			if(this.__divVirtualScrollParent.scrollHeight < scrollHeight)
			{
				scrollHeight = this.__divVirtualScrollParent.scrollHeight;
				this.__virtualRowHeight = scrollHeight/this.__totalRecords;
			}
			//end of workaround for IE issue of limitation of scrollTop Value
			this.__rowCount = Math.round(availableHeight/this.__virtualRowHeight) * 2;
			divScroll.style.maxHeight = scrollHeight + "px";
			divScroll.style.height = scrollHeight + "px";
			this.__lastScrollPosition = 0;
			totalRecords = this.__totalRecords;
			virtualRowHeight = this.__virtualRowHeight;
		}
		else
		{
			var listItem = this.__listContainer.children[0];
			virtualRowHeight = listItem.offsetHeight;
			totalRecords = this.__totalRecords;
		}
		scrollHeight = (totalRecords * virtualRowHeight);
		//giving it a bit of padding
		scrollHeight = scrollHeight + 50;
		this.__scrollOffsetPosition = virtualRowHeight;
		divScroll.style.maxHeight = scrollHeight + "px";
		divScroll.style.height = scrollHeight + "px";
	}
	else
	{
		this.__virtualRowHeight = 0;
		this.__rowCount = 0;
		this.__scrollOffsetPosition = 0;
		this.__lastScrollPosition = 0;
		if(divScroll)
		{
			divScroll.style.height = 0 + "px";
		}
	}
	var hasVerticalScrollbar= this.__divVirtualScrollParent.scrollHeight > this.__divVirtualScrollParent.clientHeight;
	if(hasVerticalScrollbar)
	{
		this.__divVirtualScrollParent.style.height = null;
	}
	else
	{
		this.__divVirtualScrollParent.style.height = this.__divVirtualScrollParent.style.maxHeight;
	}
};

NSList.prototype.__updateItemsForVirtualMode = function()
{
	var source = this.__objGrid.__getFlatSource();
	if(source && source.length > 0)
	{
		var length = source.length;
		var item = null;
		for (var count = 0; count < length; count++) 
		{
			item = source[count];
			this.__updateItem(item,count);
		}
	}
};

NSList.prototype.__createListVirtual= function(totalRows)
{
	var source = this.__arrInternalSource;
	if(source && source.length > 0)
	{
    	if(totalRows > source.length)
    	{
    		totalRows = source.length;
    	}
    	this.__createList(source,0,totalRows);
    }
	else
	{
		this.__createNoDataRow();
	}
};

NSList.prototype.__resetDataInBody = function(fromIndex,toIndex,fromRowIndex,useVisibleIndex)
{
	this.__objGrid.__resetDataInBody(fromIndex,toIndex,fromRowIndex,useVisibleIndex);
};

NSList.prototype.__bodyScrollVirtualHandler = function(event)
{
	var target = this.util.getTarget(event);
	var scrollPos = target.scrollTop;
	if(this.__customScrollerRequired)
	{
		//scrollPos = event.scrollTop;
	}
	//console.log(this.__lastScrollPosition + "," + scrollPos);
	if(this.__lastScrollPosition !== scrollPos)
	{
		var itemToBegin = Math.ceil(scrollPos/this.__virtualRowHeight);
    	var itemToLimit =  Math.ceil(itemToBegin + this.__rowCount);
        //console.log(itemToBegin + "," + itemToLimit);
		this.__resetDataInBody(itemToBegin,itemToLimit);
		this.__handleScrollEdgeScenarios();
	}
	this.__lastScrollPosition = scrollPos;
};

NSList.prototype.__bodyMousewheelVirtualHandler = function(event)
{
	event = this.util.getEvent(event);
	this.util.preventDefault(event);
	var target = this.__divVirtualScrollParent;
	var delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));
    var scrollHeight = 3 * parseInt(this.__virtualRowHeight);
    var currentScrollPos = target.scrollTop;
    var contentHeight = this.__divVirtualScroller.clientHeight;
    //scroll-up
    if(delta === 1)
    {
        if((currentScrollPos - scrollHeight) < 0)
        {
        	target.scrollTop = 0;
        }
        else
        {
        	target.scrollTop = currentScrollPos - scrollHeight;
        }
   }
   else
   {
        if((currentScrollPos + scrollHeight) > contentHeight)
        {
        	target.scrollTop = contentHeight;
        }
        else
        {
        	target.scrollTop = currentScrollPos + scrollHeight;
        }
   }
};

NSList.prototype.__handleScrollEdgeScenarios = function()
{
	var target = this.__divVirtualScrollParent;
	if(target.scrollHeight - target.scrollTop === target.clientHeight)
	{
		this.__divParentContainer.scrollTop = this.__divParentContainer.scrollHeight;
	}
	if(target.scrollTop === 0)
	{
		this.__divParentContainer.scrollTop = 0;
	}
};

NSList.prototype.__virtualRowSelection = function()
{
	if(this.__listContainer.children && this.__listContainer.children.length > 0 && this.__arrInternalSource)
	{
		var listItem = null;
		var index = null;
		var item = null;
		for(var count = 0; count < this.__listContainer.children.length; count++) 
		{
			listItem = this.__listContainer.children[count];
			index = this.__getIndexFromTarget(listItem);
			item = this.__getItemByIndex(index);
			if(item && this.__isMouseHoverAllowed(index))
			{
				if(item[this.__fieldSelected])
				{
					//DONOT REPLACE WITH __markRowSelected
					this.util.addStyleClass(listItem,"nsListItemSelected"); 
				}
				else
				{
					//DONOT REPLACE WITH __markRowUnselected
					this.util.removeStyleClass(listItem,"nsListItemSelected");
				}
			}
		}
	}
};

NSList.prototype.__createNoDataRow = function()
{
	var listItem = this.util.createElement("li",null,"nsListNoRecordsFound");
	listItem.setAttribute("nsNoData","true");
	var textNode = document.createTextNode(this.__noDataMessage);
	listItem.appendChild(textNode);
	this.__listContainer.appendChild(listItem);
};

NSList.prototype.__setBodyMeasurement = function()
{
	//this.__divParentContainer.style.height = this.__divOuterContainer.clientHeight + "px";
	if(this.__divVirtualScrollParent)
	{
		var viewPortHeight = this.__divParentContainer.clientHeight;
		this.__divVirtualScrollParent.style.maxHeight = viewPortHeight + "px";
	}
};


NSList.prototype.__addListenerForBody = function()
{
	if(!this.__keyDownRef)
	{
		this.__keyDownRef = this.__keyDownHandler.bind(this);
		this.util.addEvent(document,"keydown",this.__keyDownRef);
	}
	if(!this.__keyUpRef)
	{
		this.__keyUpRef = this.__keyUpHandler.bind(this);
		this.util.addEvent(document,"keyup",this.__keyUpRef);
	}
};

NSList.prototype.__createList = function(dataSet,startIndex,endIndex)
{
	if(dataSet && dataSet.length > 0)
    {
		this.__objGrid.__createList(dataSet,startIndex,endIndex);
    }
	else
	{
		this.__createNoDataRow();
	}
};

NSList.prototype.__createListAt = function(item,index)
{
	if(item && index > -1)
    {
		this.__updateItem(item,index,true);
		var listItem = this.__createListItem(item,false);
		this.__listContainer.insertBefore(listItem, this.__listContainer.childNodes[index]);
    }
};

NSList.prototype.__updateItem = function(item,index,isReset)
{
	if(item)
	{
		item[this.__fieldIndex] = index;
		if(isReset || !item.hasOwnProperty(this.__fieldDisableHover))
		{
			item[this.__fieldDisableHover] = this.__isHoverDisabled(item);
		}
		if(isReset || !item.hasOwnProperty(this.__fieldSelected))
		{
			item[this.__fieldSelected] = false;
		}
	}
};

NSList.prototype.__createListItem = function(item,isAdd)
{
	if(item)
	{
		 if(this.util.isUndefined(isAdd) || isAdd === null)
		 {
			 isAdd = true;
		 }
		 var listItem = this.util.createElement("li",this.getID() + "nsListItem","nsListItem");
		 this.__objGrid.__createListItem(listItem,item);
		 if(this.__enableMouseHover)
		 {
			 this.util.addEvent(listItem,"mouseover",this.__itemMouseOverHandler.bind(this));
			 this.util.addEvent(listItem,"mouseout",this.__itemMouseOutHandler.bind(this));
			 if(this.__enableMouseHoverAnimation)
			 {
				 this.util.addStyleClass(listItem,"nsListItemAnimated");
			 }
			 else
			 {
				 this.util.addStyleClass(listItem,"nsListItemNormal");
			 }
		 }
		 this.util.addEvent(listItem,"click",this.__itemClickHandler.bind(this));
		 this.__setListItemProperties(listItem,item);
		 if(isAdd)
		 {
			 this.__listContainer.appendChild(listItem);
		 }
		 return listItem;
	}
	return null;
};

NSList.prototype.__setListItemProperties = function(listItem,item)
{
	this.__objGrid.__setListItemProperties(listItem,item);
};

NSList.prototype.__addCellText = function(listItem,item,div)
{
	var toolTipText = null;
	if(listItem && item && div)
	{
		if(this.__itemRenderer)
		{
			var objRenderer = this.__itemRenderer(item,this.__labelField,item[this.__fieldIndex],item[this.__fieldDisableHover],listItem);
			if(objRenderer)
			{
				if(this.util.isString(objRenderer))
				{
					var compBodySpan = document.createElement("span");
					compBodySpan.innerHTML = objRenderer;
					div.appendChild(compBodySpan);
				}
				else
				{
					div.appendChild(objRenderer);
				}
			}
		}
		else if(this.__template)
		{
			div.appendChild(this.__template.cloneNode(true));
			this.__setDataInTemplateRenderer(div,item,listItem);
		}
		else if(this.__labelFunction)
		{
			var text = this.__labelFunction(item,this.__labelField);
			div.appendChild(document.createTextNode(text));
		}
		else if(item.hasOwnProperty(this.__labelField) && !this.util.isUndefined(item[this.__labelField]) && item[this.__labelField] != null)
	    {
			var text = item[this.__labelField];
			div.appendChild(document.createTextNode(text));
	    }
		this.__highlightDiv(div);
		if(this.__toolTipField)
		{
			toolTipText = item[this.__toolTipField];
		}
		else if(this.__toolTipRenderer)
		{
			toolTipText = this.__toolTipRenderer(item,this.__labelField,item[this.__fieldIndex],item[this.__fieldDisableHover],listItem);
		}
		if(this.__enableTruncateToFit)
		{
			this.util.addStyleClass(div,"nsListTruncateToFit");
			//This condition is above so that toolTip and title are not set togeather
			if(!toolTipText || toolTipText === "")
			{
				if(this.__enableToolTipForTruncateText)
				{
					toolTipText = div.textContent;
				}
				else
				{
					div.setAttribute("title",div.textContent);
				}
			}
		}
		if(toolTipText && toolTipText !== "")
		{
			this.__nsToolTipInElement.addToolTip(div,toolTipText);
		}
	}
};

NSList.prototype.__setDataInTemplateRenderer = function(cellItem,data,listItem)
{
	if(cellItem && this.__setData)
	{
		this.__setRendererProperties(cellItem);
		this.__setRendererInData(cellItem,data,listItem);
		//IE bug
		cellItem.data = data;
		if(this.util.isFunction(this.__setData))
	    {
			var strParam = "(cellItem,data,dataField,isDisabled,listItem)"; 
	    	if(this.util.isString(this.__setData))
	    	{
	    		var base = this;
	    		this.util.callFunctionFromString(this.__setData + strParam,function(paramValue){
					if(paramValue === "cellItem")
					{
						return cellItem;
					}
					if(paramValue === "data")
					{
						return data;
					}
					if(paramValue === "dataField")
					{
						return base.__labelField;
					}
					if(paramValue === "isDisabled")
					{
						return data[base.__fieldDisableHover];
					}
					if(paramValue === "listItem")
					{
						return listItem;
					}
					return paramValue;
				});
	    	}
	    	else
	    	{
	    		this.__setData(cellItem,data,this.__labelField,data[this.__fieldDisableHover],listItem);
	    	}
	    }
	}
};

NSList.prototype.__setRendererInData = function(cellItem,data,listItem)
{
	if(cellItem)
	{
		var compChild = null;
		for(var count = 0; count < cellItem.children.length; count++) 
		{
			compChild = cellItem.children[count];
			if(compChild)
			{
				compChild.data = data;
				compChild.listItem = listItem;
			}
			//IE 9 Bug,you got to assign it back
			//listItem.children[count] = compChild;
			this.__setRendererInData(compChild,data,listItem);
		}
	}
};

NSList.prototype.__setRendererProperties = function(cellItem)
{
	if(cellItem)
	{
		var compChild = null;
		for(var count = 0; count < cellItem.children.length; count++) 
		{
			compChild = cellItem.children[count];
			var grid = this;
			Array.prototype.slice.call(compChild.attributes).forEach(function(attribute) 
			{
		        if(grid.util.isFunction(attribute.value))
		        {
		        	var newValue = attribute.value + "(this)";
		        	compChild.removeAttribute(attribute.name);
					compChild.setAttribute(attribute.name,newValue);
		        }
			});
			if(compChild)
			{
				if(compChild.hasAttribute("accessor-name"))
				{
					cellItem[compChild.getAttribute("accessor-name")] = compChild;
				}
			}
			this.__setRendererProperties(compChild);
		}
	}
};

NSList.prototype.__setTemplate = function()
{
	if(this.__templateID)
	{
		this.__template = this.util.getTemplate(this.__templateID);
	}
};

NSList.prototype.__isHoverDisabled = function(item)
{
	if(this.__disableHoverField)
	{
		return Boolean.parse(item[this.__disableHoverField]);
	}
	if(this.__disableHoverFunction)
	{
		return Boolean.parse(this.__disableHoverFunction(item,this.__fieldIndex));
	}
	return false;
};

NSList.prototype.__itemClickHandler = function(event)
{
	event = this.util.getEvent(event);
    var target = this.util.getTarget(event);
    target = this.util.findParent(target,"li");
    var index = this.__getIndexFromTarget(target);
    this.__setIndex(index,false);
    this.__lastNavigationDirection = null;
};

NSList.prototype.__setIndex = function(index,isMultiSelect)
{
	if(index > -1)
	{
		isMultiSelect = Boolean.parse(isMultiSelect);
		if (this.__isShiftPressed && this.__enableMultipleSelection)
	    {
	    	this.__multiSectionHandler(index);
	    }
	    else if(isMultiSelect || (this.__isCtrlPressed && this.__enableMultipleSelection))
	    {
	    	if(this.__isRowSelected(index))
	    	{
	    		this.__markRowUnselected(index);
	    	}
	    	else
	    	{
	    		this.__markRowSelected(index);
	    	}
	    }
	    else
	    {
	    	this.__clearAllRowSelection(false);
	    	this.__markRowSelected(index);
	    } 
	}
};

NSList.prototype.__itemMouseOverHandler = function(event)
{
	 var target = this.util.getTarget(event);
     target = this.util.findParent(target,"li");
     var index = this.__getIndexFromTarget(target);
     var item = this.__getItemByIndex(index);
     if(target && index > -1 && this.__isMouseHoverAllowed(index))
     {
    	 this.util.addStyleClass(target,"nsListItemHover");
    	 this.__navigationIndex = index;
    	 this.util.dispatchEvent(this.__baseComponent,this.ITEM_NAVIGATED,item,{index:this.__navigationIndex});
     }
};

NSList.prototype.__itemMouseOutHandler = function(event)
{
	 var target = this.util.getTarget(event);
     target = this.util.findParent(target,"li");
     if(target)
     {
    	 this.util.removeStyleClass(target,"nsListItemHover");
     }
};

NSList.prototype.__keyDownHandler = function(event)
{
	event = this.util.getEvent(event);
	if(this.hasFocus())
	{
		this.__isShiftPressed = event.shiftKey;
		this.__isCtrlPressed = event.ctrlKey;
		var isShiftCtrlPressed = this.__isShiftPressed || this.__isCtrlPressed;
		var keyCode = this.util.getKeyUnicode(event);
		if(this.__enableKeyboardNavigation)
		{
			var source = this.__objGrid.__getFlatSource();
			//key Up
			if(keyCode === this.util.KEYCODE.UP && isShiftCtrlPressed && this.__enableMultipleSelection)
			{
				if(this.__lastNavigationDirection && this.__lastNavigationDirection === this.NAVIGATION_DOWN)
				{
					return this.__keyBoardSelectionHandler(event,this.NAVIGATION_UP);
				}
				if(this.__selectedIndex != 0)
				{
					this.__selectedIndex--;
					this.__navigationIndex--;
					while(!this.__isMouseHoverAllowed(this.__selectedIndex))
					{
						this.__selectedIndex--;
						this.__navigationIndex--;
					}
					return this.__keyBoardSelectionHandler(event,this.NAVIGATION_UP);
				}
			}
			//key down
			else if(keyCode === this.util.KEYCODE.DOWN && isShiftCtrlPressed && this.__enableMultipleSelection)
			{
				if(this.__lastNavigationDirection && this.__lastNavigationDirection === this.NAVIGATION_UP)
				{
					return this.__keyBoardSelectionHandler(event,this.NAVIGATION_DOWN);
				}
				if(source && this.__selectedIndex != source.length - 1)
				{
					this.__selectedIndex++;
					this.__navigationIndex++;
					while(!this.__isMouseHoverAllowed(this.__selectedIndex))
					{
						this.__selectedIndex++;
						this.__navigationIndex++;
					}
					return this.__keyBoardSelectionHandler(event,this.NAVIGATION_DOWN);
				}
			}
			else if(keyCode === this.util.KEYCODE.UP)
			{
				if(source && this.__navigationIndex === -1)
				{
					this.__navigationIndex = source.length - 1;
				}
				if(this.__navigationIndex > 0)
				{
					return this.__keyBoardNavigationHandler(event,this.NAVIGATION_UP);
				}
			}
			else if(keyCode === this.util.KEYCODE.DOWN)
			{
				/*if(this.__navigationIndex === -1)
				{
					this.__navigationIndex = 0;
				}*/
				if(source && this.__navigationIndex < source.length)
				{
					return this.__keyBoardNavigationHandler(event,this.NAVIGATION_DOWN);
				}
			}
			else if(keyCode === this.util.KEYCODE.ENTER)
			{
				this.__clearAllRowSelection(false);
				this.__markRowSelected(this.__navigationIndex);
			}
		}
		if(keyCode === this.util.KEYCODE.SHIFT)
		{
			this.util.makeBodyUnselectable();
		}
	}
};

NSList.prototype.__keyUpHandler = function(event)
{
	if(this.util.getKeyUnicode(event) === this.util.KEYCODE.CTRL)
	{
		this.__isCtrlPressed = false;
	}
	if(this.util.getKeyUnicode(event) === this.util.KEYCODE.SHIFT)
	{
		this.__isShiftPressed = false;
		this.util.makeBodySelectable();
	}
};

NSList.prototype.__keyBoardNavigationHandler = function(event,direction)
{
	var listItem = this.__getListItemByIndex(this.__navigationIndex - this.__startArrayElement);
	this.util.removeStyleClass(listItem,"nsListItemHover");
	(direction === this.NAVIGATION_UP) ? this.__navigationIndex--:this.__navigationIndex++;
	while(!this.__isMouseHoverAllowed(this.__navigationIndex))
	{
		(direction === this.NAVIGATION_UP) ? this.__navigationIndex--:this.__navigationIndex++;
	}
	listItem = this.__getListItemByIndex(this.__navigationIndex - this.__startArrayElement);
	this.util.addStyleClass(listItem,"nsListItemHover");
	if(direction === this.NAVIGATION_DOWN)
	{
		if(this.__enableVirtualScroll)
		{
			this.scrollToIndex(this.__navigationIndex,false);
		}
		else
		{
			this.__refreshScrollPosition(listItem,this.NAVIGATION_DOWN);
		}
	}
	else if(direction === this.NAVIGATION_UP)
	{
		if(this.__enableVirtualScroll)
		{
			this.scrollToIndex(this.__navigationIndex,false);
		}
		else
		{
			this.__refreshScrollPosition(listItem,this.NAVIGATION_UP);
		}
	}
	var source = this.__objGrid.__getFlatSource();
	this.util.dispatchEvent(this.__baseComponent,this.ITEM_NAVIGATED,source[this.__navigationIndex],{index:this.__navigationIndex});
	this.__lastNavigationDirection = null;
	event.preventDefault();
	return false;
};

NSList.prototype.__keyBoardSelectionHandler = function(event,direction)
{
	if(this.__isRowSelected(this.__selectedIndex))
	{
		this.__markRowUnselected(this.__selectedIndex);
	}
	else
	{
		this.__markRowSelected(this.__selectedIndex);
	}
	if(direction === this.NAVIGATION_DOWN)
	{
		if(this.__enableVirtualScroll)
		{
			this.scrollToIndex(this.__selectedIndex,false);
		}
		else if(Math.floor(this.__selectedIndex % this.__pageSize) === 0)
		{
			var listItem = this.__getListItemByIndex(this.__selectedIndex);
			var rowOffset = this.util.getPosition(listItem);
			this.__scrollTarget.scrollTop = rowOffset.top;
		}
	}
	else if(direction === this.NAVIGATION_UP)
	{
		if(this.__enableVirtualScroll)
		{
			this.scrollToIndex(this.__selectedIndex,false);
		}
		else
		{
			var listItem = this.__getListItemByIndex(this.__selectedIndex);
			var rowOffset = this.util.getPosition(listItem);
			this.__scrollTarget.scrollTop = rowOffset.top;
		}
	}
	this.__lastNavigationDirection = direction;
	event.preventDefault();
	return false;
};

NSList.prototype.__refreshScrollPosition = function(listItem,direction)
{
	if(listItem)
	{
		var cellRect = listItem.getBoundingClientRect();
		var newOffset = this.util.getPosition(listItem,true);
		//vertical scroll logic
	 	var cellTop = newOffset.top;
	    var cellBottom = cellTop + cellRect.height;
	    var scrollerHeight = this.__divOuterContainer.clientHeight;
	    var currentScrollTop = this.__divOuterContainer.scrollTop;
	    console.log(currentScrollTop  + "," + cellRect.height + "," + (currentScrollTop - cellRect.height));
	    // scroll up
	    if (cellTop < currentScrollTop)
	    {
	    	
	    	if(this.__getListItemRawIndex(listItem) < 2)
	    	{
	    		this.__divOuterContainer.scrollTop = 0;
	    	}
	    	else
	    	{
	    		this.__divOuterContainer.scrollTop = currentScrollTop - cellRect.height;	
	    	}
	    }
	    else if (cellBottom  > scrollerHeight)
	    {
	        this.__divOuterContainer.scrollTop = currentScrollTop + cellRect.height;
	    }
	}
};
