var nsDividerBox = Object.create(nsContainerBase);

nsDividerBox.DIRECTION_VERTICAL = "vertical";
nsDividerBox.DIRECTION_HORIZONTAL = "horizontal";
nsDividerBox.DIVIDER_DIMENSION = 6;

nsDividerBox.__childContainer = null;
nsDividerBox.__direction = null;
nsDividerBox.__arrDivider = [];
nsDividerBox.__expectedDimension = 0;

nsDividerBox.__currentDivider = null;
nsDividerBox.__currentDividerObject = null;
nsDividerBox.__lastPosition = 0;
nsDividerBox.__offsetDimension = 0;


nsDividerBox.initializeComponent = function() 
{
	this.base.initializeComponent();
};

nsDividerBox.setComponentProperties = function() 
{
	if(this.hasAttribute("direction")) 
	{
		this.__direction = this.getAttribute("direction");
		if(!this.__direction)
		{
			this.util.throwNSError("NSDividerBox","Direction is not initialized");
			return;
		}
		if(this.__direction == this.DIRECTION_VERTICAL)
		{
			this.setVerticalComponents();
		}
		else if(this.__direction == this.DIRECTION_HORIZONTAL)
		{
			this.setHorizontalComponents();
		}
	}
	if(this.hasAttribute("labelClass"))
	{
		this.util.addStyleClass(this.label,this.getAttribute("labelClass"));
	}
	this.base.setComponentProperties();
};

nsDividerBox.setHorizontalComponents = function() 
{
	this.__expectedDimension = this.getBoundingClientRect().height;
	this.__childContainer = this.util.createDiv(this.getID() + "#container","nsHorizontalResizerContainer");
	var children = this.childNodes;
	var arrChildElement = [];
	var childCount = -1;
	for (var count = 0; count < children.length; count++) 
	{
		var child =  children[count];
		if(child && this.util.isElement(child) && child.nodeName != "SCRIPT")
	    {
			var item = {child:child,dimension:child.getBoundingClientRect()};
			arrChildElement[++childCount] = item;
			this.removeChild(child);
	    }
	}
	var totalHeightAllocated = 0;
	for (var count = 0; count < arrChildElement.length; count++) 
	{
		var item = arrChildElement[count];
		var child =  item.child;
		var expectedChildHeight = item.dimension.height;
		this.util.addStyleClass(child,"nsHorizontalResizerChild");
		//substracting the height of the divider from its calculated height 
		if(count < arrChildElement.length - 1)
		{
			expectedChildHeight = expectedChildHeight - this.DIVIDER_DIMENSION;
		}
		var childTop = expectedChildHeight;
		child.style.top = totalHeightAllocated + "px";
		child.style.height = childTop + "px";
		this.__childContainer.appendChild(child);
		//5 to avoid overlapping of two dividers
		var minDimension = 5;
		var offsetDimension = 0;
		if(child.style.minHeight)
		{
			minDimension = this.util.getDimensionAsNumber(child,child.style.minHeight);
		}
		offsetDimension = totalHeightAllocated;
		var objDivider = {beforeElement:child, afterElement:null, 
						  beforeElementMinDimension:minDimension, afterElementMinDimension:0,
				  		  beforeElementTopDimension:offsetDimension,afterElementTopDimension:0,
				  		  beforeElementNextSiblingTop:offsetDimension,afterElementNextSiblingTop:0,
				  		  orignalBeforeElementDimension:0,orignalAfterElementDimension:0,
				  		  fromDimension:offsetDimension + minDimension,toDimension:0};
		totalHeightAllocated += childTop;
		objDivider.orignalBeforeElementDimension = totalHeightAllocated;
		objDivider.beforeElementNextSiblingTop = totalHeightAllocated;
		if(count != 0)
		{
			//setting the next element for previous Divider for global Divider Array
			var prevDividerID = this.__getDividerID(count - 1);
			var objPrevDivider = this.__arrDivider[prevDividerID];
			objPrevDivider.afterElement = child;
			objPrevDivider.afterElementMinDimension = minDimension;
			objPrevDivider.orignalAfterElementDimension = totalHeightAllocated;
			objPrevDivider.afterElementTopDimension = offsetDimension;
			objPrevDivider.toDimension = totalHeightAllocated - minDimension;
			objPrevDivider.afterElementNextSiblingTop = totalHeightAllocated;
			this.__arrDivider[prevDividerID] = objPrevDivider;
		}
		if(count < arrChildElement.length - 1)
		{
			var divider = this.__getHorizontalDivider(count);
			var dividerHeight = this.DIVIDER_DIMENSION;
			divider.style.height = dividerHeight + "px";
			divider.style.top = totalHeightAllocated + "px";
			totalHeightAllocated += dividerHeight;
			this.util.addEvent(divider,"mousedown",this.dividerMouseDownHandler.bind(this));
			this.__childContainer.appendChild(divider);
			//setting the global Divider Array
			this.__arrDivider[divider.id] = objDivider;
		}
		
	}
	this.appendChild(this.__childContainer);
};

nsDividerBox.__getHorizontalDivider = function(count)
{
	var dividerID  = this.__getDividerID(count);
	var divider = this.util.createDiv(dividerID,"nsHorizontalResizer");
	var dividerLines = document.createElement("span");
	this.util.addStyleClass(dividerLines,"nsHorizontalResizerLines");
	divider.appendChild(dividerLines);
	return divider;
};

nsDividerBox.setVerticalComponents = function() 
{
	this.__expectedDimension = this.getBoundingClientRect().width;
	this.__childContainer = this.util.createDiv(this.getID() + "#container","nsVerticalResizerContainer");
	var children = this.childNodes;
	var arrChildElement = [];
	var childCount = -1;
	for (var count = 0; count < children.length; count++) 
	{
		var child =  children[count];
		if(child && this.util.isElement(child) && child.nodeName != "SCRIPT")
	    {
			var item = {child:child,dimension:child.getBoundingClientRect()};
			arrChildElement[++childCount] = item;
			this.removeChild(child);
	    }
	}
	var totalWidthAllocated = 0;
	for (var count = 0; count < arrChildElement.length; count++) 
	{
		var item = arrChildElement[count];
		var child =  item.child;
		var expectedChildWidth = item.dimension.width;
		this.util.addStyleClass(child,"nsVerticalResizerChild");
		//substracting the width of the divider from its calculated height 
		if(count < arrChildElement.length - 1)
		{
			expectedChildWidth = expectedChildWidth - this.DIVIDER_DIMENSION;
		}
		var childLeft = expectedChildWidth;
		child.style.left = totalWidthAllocated + "px";
		child.style.width = childLeft + "px";
		this.__childContainer.appendChild(child);
		//5 to avoid overlapping of two dividers
		var minDimension = 5;
		var offsetDimension = 0;
		if(child.style.minWidth)
		{
			minDimension = this.util.getDimensionAsNumber(child,child.style.minWidth);
		}
		offsetDimension = totalWidthAllocated;
		var objDivider = {beforeElement:child, afterElement:null, 
						  beforeElementMinDimension:minDimension, afterElementMinDimension:0,
				  		  beforeElementTopDimension:offsetDimension,afterElementTopDimension:0,
				  		  beforeElementNextSiblingTop:offsetDimension,afterElementNextSiblingTop:0,
				  		  orignalBeforeElementDimension:0,orignalAfterElementDimension:0,
				  		  fromDimension:offsetDimension + minDimension,toDimension:0};
		totalWidthAllocated += childLeft;
		objDivider.orignalBeforeElementDimension = totalWidthAllocated;
		objDivider.beforeElementNextSiblingTop = totalWidthAllocated;
		if(count != 0)
		{
			//setting the next element for previous Divider for global Divider Array
			var prevDividerID = this.__getDividerID(count - 1);
			var objPrevDivider = this.__arrDivider[prevDividerID];
			objPrevDivider.afterElement = child;
			objPrevDivider.afterElementMinDimension = minDimension;
			objPrevDivider.orignalAfterElementDimension = totalWidthAllocated;
			objPrevDivider.afterElementTopDimension = offsetDimension;
			objPrevDivider.toDimension = totalWidthAllocated - minDimension;
			objPrevDivider.afterElementNextSiblingTop = totalWidthAllocated;
			this.__arrDivider[prevDividerID] = objPrevDivider;
		}
		if(count < arrChildElement.length - 1)
		{
			var divider = this.__getVerticalDivider(count);
			var dividerWidth = this.DIVIDER_DIMENSION;
			divider.style.width = dividerWidth + "px";
			divider.style.left = totalWidthAllocated + "px";
			totalWidthAllocated += dividerWidth;
			this.util.addEvent(divider,"mousedown",this.dividerMouseDownHandler.bind(this));
			this.__childContainer.appendChild(divider);
			//setting the global Divider Array
			this.__arrDivider[divider.id] = objDivider;
		}
		
	}
	this.appendChild(this.__childContainer);
};

nsDividerBox.__getVerticalDivider = function(count)
{
	var dividerID  = this.__getDividerID(count);
	var divider = this.util.createDiv(dividerID,"nsVerticalResizer");
	var collapser = this.util.createElement("span",null,"toggleLink");
	collapser.setAttribute("href","#");
	divider.appendChild(collapser);
	this.util.addEvent(collapser,"click",this.__collapserClickHandler.bind(this));
	var dividerLines = document.createElement("span");
	this.util.addStyleClass(dividerLines,"nsVerticalResizerLines");
	divider.appendChild(dividerLines);
	return divider;
};

nsDividerBox.__collapserClickHandler = function(event)
{
	var target = this.util.getTarget(event);
	target = this.util.findParentBySelector(target,".nsVerticalResizer");
	if(target)
	{
		var objDivider = this.__arrDivider[target.id];
		if(objDivider)
		{
			objDivider.beforeElement.style.width = 0 + "px";
			target.style.left = 0 + "px";
			
			/*target.style.left = 0 + "px";
			objDivider.beforeElement.style.width = 0 + "px";
			objDivider.afterElement.style.width = expectedAfterElementWidth + "px";
			objDivider.afterElement.style.left = (xPos + this.DIVIDER_DIMENSION) + "px";*/
		}
	}
	
};

nsDividerBox.__getDividerID = function(count)
{
	return this.getID() + "#resizer" + count;
};

nsDividerBox.dividerMouseDownHandler = function (event) 
{
	event = this.util.getEvent(event);
	event.preventDefault();
	
	var divider = this.util.getTarget(event);
	if(divider && divider.nodeName.toLowerCase() != "div")
	{
		divider = divider.parentNode;
	}
	if(divider)
	{
		var objDivider = this.__arrDivider[divider.id];
		
		this.__currentDivider = divider;
		this.__currentDividerObject = objDivider;
		var offset = this.util.getOffSet(this);
		if(this.__direction == this.DIRECTION_VERTICAL)
		{
			this.__offsetDimension = offset.left;
		}
		else if(this.__direction == this.DIRECTION_HORIZONTAL)
		{
			this.__offsetDimension = offset.top;
		}
		document.onmousemove = this.documentMouseMoveHandler.bind(this);
		document.onmouseup =  this.documentMouseUpHandler.bind(this);
	}
};

nsDividerBox.documentMouseMoveHandler = function (event) 
{
	var objDivider = this.__currentDividerObject;
	if(this.__direction == this.DIRECTION_VERTICAL)
	{
		var xPos = event.pageX  - this.offsetLeft;
		if(xPos > objDivider.fromDimension && xPos < objDivider.toDimension)
		{
			var doResize = false;
			var expectedAfterElementWidth = objDivider.afterElementNextSiblingTop - xPos;
			//mouse movement is UP
			if(event.pageX < this.__lastPosition)
			{
				if(xPos > (objDivider.beforeElementTopDimension + objDivider.beforeElementMinDimension))
				{
					doResize = true;
				}
			}
			//mouse movement is down
			else if (event.pageX > this.__lastPosition) 
			{
				if(expectedAfterElementWidth > objDivider.afterElementMinDimension)
				{
					doResize = true;
				}
			}
			if(doResize)
			{
				this.__currentDivider.style.left = xPos + "px";
				objDivider.beforeElement.style.width = (xPos - objDivider.beforeElementTopDimension) + "px";
				objDivider.afterElement.style.width = expectedAfterElementWidth + "px";
				objDivider.afterElement.style.left = (xPos + this.DIVIDER_DIMENSION) + "px";
			}
			this.__lastPosition = event.pageX;
		}
		
	}
	else if(this.__direction == this.DIRECTION_HORIZONTAL)
	{
		var yPos = event.pageY - this.__offsetDimension;
		if(yPos > objDivider.fromDimension && yPos < objDivider.toDimension)
		{
			var doResize = false;
			var expectedAfterElementHeight = objDivider.afterElementNextSiblingTop - yPos;
			//mouse movement is UP
			if(event.pageY < this.__lastPosition)
			{
				if(yPos > (objDivider.beforeElementTopDimension + objDivider.beforeElementMinDimension))
				{
					doResize = true;
				}
			}
			//mouse movement is down
			else if (event.pageY > this.__lastPosition) 
			{
				if(expectedAfterElementHeight > objDivider.afterElementMinDimension)
				{
					doResize = true;
				}
			}
			if(doResize)
			{
				this.__currentDivider.style.top = yPos + "px";
				objDivider.beforeElement.style.height = (yPos - objDivider.beforeElementTopDimension) + "px";
				objDivider.afterElement.style.height = expectedAfterElementHeight + "px";
				objDivider.afterElement.style.top = (yPos + this.DIVIDER_DIMENSION) + "px";
			}
			this.__lastPosition = event.pageY;
		}
	}
};

nsDividerBox.documentMouseUpHandler = function (event) 
{
	document.onmousemove = null;
	document.onmouseup =  null;
	
	if(this.__direction == this.DIRECTION_VERTICAL)
	{
		var id = this.__currentDivider.id;
		var count =  parseInt(id.substring(id.length - 1));
		var beforeDividerID = this.__getDividerID(count - 1);
		var objPrevDivider = this.__arrDivider[beforeDividerID];
		if(objPrevDivider)
		{
			objPrevDivider.afterElementTopDimension = this.util.getDimensionAsNumber(objPrevDivider.afterElement,objPrevDivider.afterElement.style.left);
			var dividerLeft = this.util.getDimensionAsNumber(this.__currentDivider,this.__currentDivider.style.left);
			objPrevDivider.toDimension = dividerLeft - objPrevDivider.afterElementMinDimension;
			var nextSibling = objPrevDivider.afterElement.nextSibling;
			if(nextSibling)
			{
				var nextSiblingLeft = this.util.getDimensionAsNumber(nextSibling,nextSibling.style.left);
				objPrevDivider.afterElementNextSiblingTop = nextSiblingLeft;
			}
		}
		var nextDividerID = this.__getDividerID(count + 1);
		var objNextDivider = this.__arrDivider[nextDividerID];
		if(objNextDivider)
		{
			objNextDivider.beforeElementTopDimension = this.util.getDimensionAsNumber(objNextDivider.beforeElement,objNextDivider.beforeElement.style.left);
			objNextDivider.fromDimension = objNextDivider.beforeElementTopDimension + objNextDivider.beforeElementMinDimension;
			var nextSibling = objNextDivider.beforeElement.nextSibling;
			if(nextSibling)
			{
				var nextSiblingLeft = this.util.getDimensionAsNumber(nextSibling,nextSibling.style.left);
				objNextDivider.beforeElementNextSiblingTop = nextSiblingLeft;
			}
		}
	}
	else if(this.__direction == this.DIRECTION_HORIZONTAL)
	{
		var id = this.__currentDivider.id;
		var count =  parseInt(id.substring(id.length - 1));
		var beforeDividerID = this.__getDividerID(count - 1);
		var objPrevDivider = this.__arrDivider[beforeDividerID];
		if(objPrevDivider)
		{
			objPrevDivider.afterElementTopDimension = this.util.getDimensionAsNumber(objPrevDivider.afterElement,objPrevDivider.afterElement.style.top);
			var dividerTop = this.util.getDimensionAsNumber(this.__currentDivider,this.__currentDivider.style.top);
			objPrevDivider.toDimension = dividerTop - objPrevDivider.afterElementMinDimension;
			var nextSibling = objPrevDivider.afterElement.nextSibling;
			if(nextSibling)
			{
				var nextSiblingTop = this.util.getDimensionAsNumber(nextSibling,nextSibling.style.top);
				objPrevDivider.afterElementNextSiblingTop = nextSiblingTop;
			}
		}
		var nextDividerID = this.__getDividerID(count + 1);
		var objNextDivider = this.__arrDivider[nextDividerID];
		if(objNextDivider)
		{
			objNextDivider.beforeElementTopDimension = this.util.getDimensionAsNumber(objNextDivider.beforeElement,objNextDivider.beforeElement.style.top);
			objNextDivider.fromDimension = objNextDivider.beforeElementTopDimension + objNextDivider.beforeElementMinDimension;
			var nextSibling = objNextDivider.beforeElement.nextSibling;
			if(nextSibling)
			{
				var nextSiblingTop = this.util.getDimensionAsNumber(nextSibling,nextSibling.style.top);
				objNextDivider.beforeElementNextSiblingTop = nextSiblingTop;
			}
		}
	}
	
	this.__currentDivider = null;
	this.__currentDividerObject = null;
	this.__lastPosition = 0;
};

document.registerElement("ns-dividerBox", {prototype: nsDividerBox});
