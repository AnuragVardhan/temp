NSUtil.prototype.groupCollection = function(dataSource,childField,parentLevelIndicatorField,isSingleLevel)
{
	this.__dataSource = dataSource;
	this.__childField = childField;
	this.__parentLevelIndicatorField = parentLevelIndicatorField;
	this.__isSingleLevel = isSingleLevel;
	this.__util = new NSUtil();
	if(!this.__childField)
	{
		this.__childField = "children";
	}
	if(!this.__parentLevelIndicatorField)
	{
		this.__parentLevelIndicatorField = "ns-IsParent";
	}
	if(this.__util.isUndefined(this.__isSingleLevel))
	{
		this.__isSingleLevel = true;
	}
	
	this.groupBy = function(arrGroupField)
	{
		var arrResult = this.__dataSource;
  	    if(arrGroupField && arrGroupField.length > 0)
  	    {
  	    	if(this.__isSingleLevel)
  	    	{
  	    		arrResult = this.__groupByFieldOnSingleLevel(this.__dataSource,arrGroupField);
  	    	}
  	    	else
  	    	{
  	    		arrResult = this.__groupByFieldOnMultiLevel(this.__dataSource,arrGroupField);
  	    	}
  	    	
  	    }
  	    return arrResult;
	};
	
	this.__groupByFieldOnSingleLevel = function(list,arrGroupField)
	{
		var groups = {};
		if(list)
		{
			for (var count = 0; count < list.length; count++) 
	  	    {
	  	    	var item = list[count];
	  	    	var arrItems = this.__getGroupItemValues(item,arrGroupField);
	  	        var group = JSON.stringify(arrItems);
	  	        if (group in groups) 
	  	        {
	  	            groups[group][this.__childField].push(item); 
	  	        } 
	  	        else 
	  	        {
	  	        	var objEmpty = this.__createEmptyItem(list[count]);
	  	        	objEmpty[this.__parentLevelIndicatorField] = true;
	  	        	for(var fieldCount = 0;fieldCount < arrGroupField.length;fieldCount++)
	  	    		{
	  	        		var fieldName = arrGroupField[fieldCount];
	  	        		objEmpty[fieldName] = item[fieldName];
	  	    		}
	  	        	objEmpty[this.__childField] = [];
	  	        	objEmpty[this.__childField].push(item); 
	  	            groups[group] = objEmpty;
	  	        }
	  	    }
		}
  	    return this.__arrayFromObject(groups);
	};
	
	this.__getGroupItemValues = function(item,arrGroupField)
	{
		var arrResult = [];
		if(item && arrGroupField && arrGroupField.length > 0)
    	{
    		for(var count = 0;count < arrGroupField.length;count++)
    		{
    			var fieldValue = item[arrGroupField[count]];
    			if(!this.__util.isUndefined(fieldValue) && fieldValue != null)
    			{
    				arrResult.push(fieldValue);
    			}
    		}
    	}
		return arrResult;
	};
	
	this.__groupByFieldOnMultiLevel = function(list,arrGroupField)
	{
		
	};
	
	this.__groupByField = function(source,field)
	{
		if(source && field)
		{
			for (var count = 0; count < source.length; count++) 
	  	    {
				var item = list[count];
				if(item.hasOwnProperty(this.__childField) && item[this.__childField].length > 0)
				{
					this.__groupByField(item[this.__childField],field);
				}
				else
				{
					
				}
	  	    }
		}
	};
	
	this.__arrayFromObject = function(objArr)
	{
		var arr = [];
		if(objArr)
		{
			for (var count in objArr) 
	  	    {
	  	        arr.push(objArr[count]);
	  	    }
		}
  	    return arr;
	};
	
	this.__createEmptyItem = function(objSource)
  	{
  		var objCopy = {};
  		if (objSource instanceof Object) 
  		{
  	        for (var attr in objSource) 
  	        {
  	            if (objSource.hasOwnProperty(attr))
  	            {
  	            	objCopy[attr] = null;
  	            }
  	        }
  	    }
  		return objCopy;
  	};
};
