function NSPanel(component,setting) 
{
	this.__DEFAULT_ANIMATION_STEPS = 10;
	this.__DEFAULT_ANIMATION_DELAY = 20;
	
	this.DRAG_STARTING = "dragStaring";
	this.DRAGGING = "dragging";
	this.DRAG_END = "dragEnd";
	this.RESIZE_STARTING = "resizeStaring";
	this.RESIZING = "resizing";
	this.RESIZE_END = "resizeEnd";
	this.COLLAPSE_STARTING = "collapseStarting";
	this.COLLAPSE_END = "collapseEnd";
	this.EXPANSION_STARTING = "expansionStarting";
	this.EXPANSION_END = "expansionEnd";
	this.MINIMIZE_STARTING = "minimizeStarting";
	this.MINIMIZE_END = "minimizeEnd";
	this.MAXIMIZE_STARTING = "maximizeStarting";
	this.MAXIMIZE_END = "maximizeEnd";
	this.FULLSCREEN_STARTING = "fullScreenStarting";
	this.FULLSCREEN_END = "fullScreenEnd";
	this.RESTORE_STARTING = "restoreStarting";
	this.RESTORE_END = "restoreEnd";
	
	this.__OUTER_CONTAINER_ID = "panelContainer";
	this.__TITLE_CONTAINER_ID = "divTitleBar";
	this.__BODY_CONTAINER_ID = "divBody";
	
	this.__CLASS_OUTER_CONTAINER = "nsPanelContainer";
	this.__CLASS_TITLEBAR = "nsPanelTitleBar";
	this.__CLASS_BODY_CONTAINER = "nsPanelBody";
	
	this.__setting = setting;
	
	this.__header = null;
	this.__body = null;
	
	this.__title = null;
	this.__templateID = null;
	this.__templateUrl = null;
	this.__minWidth = null;
	this.__minHeight = null;
	this.__enableModal = false;
	this.__enableCollapse = false;
	this.__enableMinimization = false;
	this.__enableFullScreen = false;
	this.__enableDrag = false;
	this.__enableResize = false;
	this.__enableTitleDblClick = false;
	this.__enableMoveOnClick = false;
	this.__enableModalAnimation = true;
	this.__enableModalBodyClick = false;
	this.__enableModalKeyboard = false;
	
	this.__customClass = {};
	
	this.__lastHeight = null;
	this.__lastBodyHeight = -1;
	this.__nsDragResizeElements = null;
	this.__divGhost = null;
	this.__divModal = null;
	this.__isCollapsingExpanding = false;
	this.__isCollapsed = false;
	this.__isMinimized = false;
	this.__isFullScreen = false;
	this.__isInternalRemove = false;
	this.__divOrignalChildren = null;
	this.__dragExcludeElement = [];
	//Minimize Variables
	this.__divMinFixedContainer = null;
	this.__minimizedDirection = "left";
	this.__baseComponentParent = null;
	
	this.__windowClickRef = null;
	this.__documentKeydownRef = null;
	this.__isComponentNull = false;
	if(!component)
	{
		component = document.createElement("div");
		component.style.display = "none";
		document.body.appendChild(component);
		this.__isComponentNull = true;
	}
	this.base.__setBaseComponent.call(this,component);
};

nsExtendPrototype(NSContainerBase,NSPanel);
NSPanel.prototype.constructor = NSPanel;

NSPanel.prototype.initializeComponent = function() 
{
	this.base.initializeComponent.call(this);
	this.__setSetting();
	if(this.__isComponentNull)
	{
		this.__baseComponent.setAttribute("id",this.getID() + "Panel");
	}
	else
	{
		this.__createStructure();
	}
};

NSPanel.prototype.setComponentProperties = function() 
{
	this.base.setComponentProperties.call(this);
};

NSPanel.prototype.propertyChange = function(attrName, oldVal, newVal, setProperty)
{
	var attributeName = attrName.toLowerCase();
	this.base.propertyChange.call(this,attrName, oldVal, newVal, setProperty);
};

NSPanel.prototype.removeComponent = function() 
{
	if(!this.__isInternalRemove || this.__isComponentNull)
	{
		if(this.__nsDragResizeElements)
		{
			this.__nsDragResizeElements.destroy();
			this.__nsDragResizeElements = null;
		}
		if(this.__windowClickRef)
		{
			this.util.removeEvent(window,"click",this.__windowClickRef);
			this.__windowClickRef = null;
		}
		if(this.__documentKeydownRef)
		{
			this.util.removeEvent(document,"keydown",this.__documentKeydownRef);
			this.__documentKeydownRef = null;
		}
		this.__dragExcludeElement = [];
		this.base.removeComponent.call(this);
	}
	this.__isInternalRemove = false;
};

NSPanel.prototype.componentResized = function(event) 
{
	this.base.componentResized.call(this,event);
};

NSPanel.prototype.openModal = function()
{
	if(this.__isComponentNull)
	{
		this.__createStructure();
	}
	if(this.__divModal)
	{
		if(this.__enableModalAnimation)
		{
			this.util.addStyleClass(this.__baseComponent,"nsPanelModalAnimation");
			var cssAnimationHelper = new this.util.nsCSSAnimationHelper();
			cssAnimationHelper.addEndEvent(this.__baseComponent,this.__modalAnimationEndHandler.bind(this));
		}
		this.__divModal.style.display = "block";
	}
};

NSPanel.prototype.closeModal = function()
{
	if(this.__isComponentNull)
	{
		this.removeComponent();
		this.util.removeAllChildren(this.__baseComponent);
		this.__divModal.parentNode.removeChild(this.__divModal);
		this.__baseComponent.style.display = "none";
		document.body.appendChild(this.__baseComponent);
	}
	else
	{
		if(this.__divModal)
		{
			this.__divModal.style.display = "none";
		}
	}
};

NSPanel.prototype.getBaseElement = function()
{
	return this.__baseComponent;
};

NSPanel.prototype.__setSetting = function()
{
	var setting = this.__setting;
	if(setting)
	{
		if(setting.hasOwnProperty("nsTitle"))
		{
			this.__title = setting["nsTitle"];
		}
		if(setting.hasOwnProperty("template"))
		{
			this.__templateID = setting["template"];
		}
		if(setting.hasOwnProperty("templateUrl"))
		{
			this.__templateUrl = setting["templateUrl"];
		}
		if(setting.hasOwnProperty("minWidth"))
		{
			this.__minWidth = this.util.getNumber(setting["minWidth"]);
		}
		if(setting.hasOwnProperty("minHeight"))
		{
			this.__minHeight = this.util.getNumber(setting["minHeight"]);
		}
		if(setting.hasOwnProperty("enableModal"))
		{
			this.__enableModal = Boolean.parse(setting["enableModal"]);
		}
		if(setting.hasOwnProperty("enableCollapse"))
		{
			this.__enableCollapse = Boolean.parse(setting["enableCollapse"]);
		}
		if(setting.hasOwnProperty("enableMinimization"))
		{
			this.__enableMinimization = Boolean.parse(setting["enableMinimization"]);
		}
		if(setting.hasOwnProperty("enableFullScreen"))
		{
			this.__enableFullScreen = Boolean.parse(setting["enableFullScreen"]);
		}
		if(setting.hasOwnProperty("enableDrag"))
		{
			this.__enableDrag = Boolean.parse(setting["enableDrag"]);
		}
		if(setting.hasOwnProperty("enableResize"))
		{
			this.__enableResize = Boolean.parse(setting["enableResize"]);
		}
		if(setting.hasOwnProperty("enableTitleDblClick"))
		{
			this.__enableTitleDblClick = Boolean.parse(setting["enableTitleDblClick"]);
		}
		if(setting.hasOwnProperty("enableMoveOnClick"))
		{
			if(!this.__enableModal)
			{
				this.__enableMoveOnClick = Boolean.parse(setting["enableMoveOnClick"]);
			}
		}
		if(setting.hasOwnProperty("enableModalAnimation"))
		{
			this.__enableModalAnimation = Boolean.parse(setting["enableModalAnimation"]);
		}
		if(setting.hasOwnProperty("enableModalBodyClick"))
		{
			if(this.__enableDrag)
			{
				this.__enableModalBodyClick = Boolean.parse(setting["enableModalBodyClick"]);
			}
		}
		if(setting.hasOwnProperty("enableModalKeyboard"))
		{
			this.__enableModalKeyboard = Boolean.parse(setting["enableModalKeyboard"]);
		}
		var customClass = {};
		if(setting.hasOwnProperty("customClass"))
		{
			customClass = setting["customClass"];
			if(!customClass)
			{
				customClass = {};
			}
		}
		this.__customClass = {container:customClass["container"] || null,
				  titleBar:customClass["titleBar"] || null,
				  titleBarContent:customClass["titleBarContent"] || null,
				  iconContainer:customClass["iconContainer"] || null,
				  icon:customClass["icon"] || null,
				  body:this.__setting.customClass["body"] || null};
	}
};

NSPanel.prototype.__createStructure = function()
{
	this.__copyOrignalContent();
	this.util.addStyleClass(this.__baseComponent,"nsPanel");
	this.util.addStyleClass(this.__baseComponent,"nsPanelExpanded");
	this.__applyTheme(this.__baseComponent,"nsPanel");
	this.__applyTheme(this.__baseComponent,"nsPanelWidget");
	this.__applyCustomClass(this.__baseComponent,"container");
	if(this.__enableDrag)
	{
		this.util.addStyleClass(this.__baseComponent,"nsPanelModalContentDrag");
	}
	if(this.__enableModal)
	{
		var parentNode = this.parentNode;
		if(!parentNode)
		{
			parentNode = document.body;
		}
		this.__divModal = this.__createModal();
		this.__isInternalRemove = true;
		this.__divModal.appendChild(this.__baseComponent);
		parentNode.appendChild(this.__divModal);
		this.util.addStyleClass(this.__baseComponent,"nsPanelModalContent");
		if(this.__enableModalBodyClick)
		{
			this.__windowClickRef = this.__windowClickHandler.bind(this);
			this.util.addEvent(window,"click",this.__windowClickRef);
		}
		if(this.__enableModalKeyboard)
		{
			//To detect escape button
			this.__documentKeydownRef = this.__documentKeydownHandler.bind(this);
			this.util.addEvent(document,"keydown",this.__documentKeydownRef);
		}
	}
	this.__header = this.__createTitleBar(this.__baseComponent);
	this.__body = this.__createBody(this.__baseComponent);
	this.__lastHeight = this.util.getStyleValue(this.__baseComponent,"height");
	var dragResizeSetting = {element:this.__baseComponent,
			enableDrag:this.__enableDrag,
			enableResize:this.__enableResize,
			enableMoveOnClick:this.__enableMoveOnClick,
			minWidth:this.__minWidth,
			minHeight:this.__minHeight,
			createGhostElementCallback:this.__createGhostElement.bind(this),
			enableDragContainment:true,
			excludeElement:this.__dragExcludeElement};
	this.__nsDragResizeElements = new this.util.nsDragResizeElements(dragResizeSetting);
	this.util.addEvent(this.__baseComponent,this.__nsDragResizeElements.DRAG_STARTING,this.__dragResizeEventHandler.bind(this));
	this.util.addEvent(this.__baseComponent,this.__nsDragResizeElements.RESIZE_END,this.__dragResizeEventHandler.bind(this));
};

NSPanel.prototype.__createModal = function()
{
	var divModal = this.util.createDiv(this.getID() + "modal","nsPanelModal");
	this.util.addStyleClass(divModal,"nsPanelModal" + this.__theme);
	return divModal;
};

NSPanel.prototype.__createTitleBar = function(parentElement)
{
	if(parentElement)
	{
		var divTitleBar = this.util.createDiv(this.getID() + this.__TITLE_CONTAINER_ID,"nsPanelTitleBar");
		this.util.addStyleClass(divTitleBar,this.__CLASS_TITLEBAR);
		this.__applyCustomClass(divTitleBar,"titleBar");
		var divTitleBarContent = this.util.createDiv(this.getID() + this.__TITLE_CONTAINER_ID + "Content","nsPanelTitleBarContent");
		this.__applyCustomClass(divTitleBarContent,"titleBarContent");
		divTitleBar.appendChild(divTitleBarContent);
		if(this.__title && this.__title.length > 0)
		{
			var titleText = document.createTextNode(this.__title);
			divTitleBarContent.appendChild(titleText);
		}
		var svgShapes = new NSSvgShapes();
		var objSVG = new NSSvg();
		var divIcon = this.util.createDiv(this.getID() + this.__TITLE_CONTAINER_ID + "IconContainer","nsPanelControlbar");
		this.__applyCustomClass(divIcon,"iconContainer");
		if(this.__enableCollapse)
		{
			svgShapes.addExpandInPage();
			svgShapes.addCollapseInPage();
			var expColID = this.getID() + "ExpCol";
			var headerDoubleClickRef = this.__headerDoubleClickHandler.bind(this);
			this.__addToolbarIcon(divIcon,objSVG,"nsPanelExpColContainer",expColID,"nsPanelExpColIcon",svgShapes.__EXPAND_ICON_ID,headerDoubleClickRef);
			if(this.__enableTitleDblClick)
			{
				this.util.addEvent(divTitleBar,"dblclick",headerDoubleClickRef);
			}
		}
		if(this.__enableMinimization)
		{
			svgShapes.addMinimizeInPage();
			svgShapes.addMaximizeInPage();
			var minMaxID = this.getID() + "MinMax";
			this.__addToolbarIcon(divIcon,objSVG,"nsPanelMinMaxContainer",minMaxID,"nsPanelMinMaxIcon",svgShapes.__MINIMIZE_ICON_ID,this.__minimizeIconClickHandler.bind(this));
		}
		if(this.__enableFullScreen)
		{
			
		}
		if(this.__enableModal)
		{
			svgShapes.addCloseIcon();
			var closeID = this.getID() + "Close";
			this.__addToolbarIcon(divIcon,objSVG,"nsPanelCloseContainer",closeID,"nsPanelCloseIcon",svgShapes.__CLOSE_ICON_ID,this.__closeIconClickHandler.bind(this));
		}
		divTitleBar.appendChild(divIcon);
		parentElement.appendChild(divTitleBar);
		return divTitleBar;
	}
	return null;
};

NSPanel.prototype.__createBody = function(parentElement)
{	
	if(parentElement)
	{
		var divBody = this.util.createDiv(this.getID() + this.__BODY_CONTAINER_ID,this.__CLASS_BODY_CONTAINER);
		this.__applyCustomClass(divBody,"body");
		if(this.__divOrignalChildren)
		{
			divBody.appendChild(this.__divOrignalChildren);
		}
		if(this.__templateID && this.__templateID.length > 0)
		{
			divBody.appendChild(this.util.getTemplate(this.__templateID));
		}
		else if(this.__templateUrl && this.__templateUrl.length > 0)
		{
			var self = this;
			var templateLoadHandler = function(templateText)
			{
				if(templateText)
				{
					divBody.innerHTML = templateText;
				}
				else
				{
					console.error(self.__templateUrl + " was not loaded.Please check the URL");
				}
			};
			var templateErrorHandler = function(errorText)
			{
				console.error(self.__templateUrl + " was not loaded.Please check the URL");
			};
			this.util.getTemplateFromURL(this.__templateUrl,templateLoadHandler,templateErrorHandler);
		}
		parentElement.appendChild(divBody);
		return divBody;
	}
	return null;
};

NSPanel.prototype.__createGhostElement = function(element)
{
	this.__divGhost = element.cloneNode(true);
	var divMinMaxContainer = this.__divGhost.querySelector(".nsPanelMinMaxContainer");
	if(divMinMaxContainer)
	{
		divMinMaxContainer.parentNode.removeChild(divMinMaxContainer);
	}
	var divCloseContainer = this.__divGhost.querySelector(".nsPanelCloseContainer");
	if(divCloseContainer)
	{
		divCloseContainer.parentNode.removeChild(divCloseContainer);
	}
	var divBody = this.__divGhost.querySelector(".nsPanelBody");
	if(divBody)
	{
		divBody.innerHTML = "";
	}
	return this.__divGhost;
};

NSPanel.prototype.__windowClickHandler = function(event)
{
	var target = this.util.getTarget(event);
	if(target === this.__divModal)
	{
		this.closeModal();
	}
};

NSPanel.prototype.__documentKeydownHandler = function(event)
{
	event = this.util.getEvent(event);
	if (event.keyCode === this.util.KEYCODE["ESC"]) 
	{
		this.closeModal();
	}
};

NSPanel.prototype.__copyOrignalContent = function()
{
	if(this.__baseComponent && this.__baseComponent.childNodes.length > 0)
	{
		this.__divOrignalChildren = this.util.createDiv(this.getID() + "orignalChildren");
		while (this.__baseComponent.childNodes.length > 0) 
		{
			this.__divOrignalChildren.appendChild(this.__baseComponent.childNodes[0]);
		}
	}
};

NSPanel.prototype.__headerDoubleClickHandler = function(event)
{
	event = this.util.getEvent(event);
	this.__initializeExpCol();
	event.stopPropagation();
	event.stopImmediatePropagation();
};

NSPanel.prototype.__minimizeIconClickHandler = function(event)
{
	event = this.util.getEvent(event);
	this.__initializeMinMax();
	event.stopPropagation();
	event.stopImmediatePropagation();
};

NSPanel.prototype.__closeIconClickHandler = function(event)
{
	event = this.util.getEvent(event);
	this.closeModal();
	event.stopPropagation();
	event.stopImmediatePropagation();
};

NSPanel.prototype.__modalAnimationEndHandler = function(event)
{
	this.util.removeStyleClass(this.__baseComponent,"nsPanelModalAnimation");
};

NSPanel.prototype.__dragResizeEventHandler = function(event)
{
	if(event.eventName === this.DRAG_STARTING)
	{
		var target = event.detail;
		if(target && (this.util.hasStyleClass(target,"nsPanelMinMaxContainer")))
		{
			this.util.preventDefault(event);
			event.stopImmediatePropagation();
		}
	}
	else if(event.eventName === this.RESIZE_END)
	{
		this.__lastHeight = this.util.getStyleValue(this.__baseComponent,"height");
	}
};
NSPanel.prototype.__addToolbarIcon = function(divIcon,objSVG,containerClass,iconID,svgClass,svgShapeIconID,clickHandler)
{
	var divButton = this.util.createDiv(null,"nsPanelControlButton");
	this.util.addStyleClass(divButton,containerClass);
	this.__applyCustomClass(divButton,"icon");
	var svg = objSVG.addSVG(divButton,iconID,svgClass,null,null,null,null,null,null,true);
	objSVG.addUse(svg,iconID + "use",svgClass + "Use","#" + svgShapeIconID);
	divIcon.appendChild(divButton);
	this.util.addEvent(divButton,"click",clickHandler);
	this.__dragExcludeElement.push(divButton);
	return divButton;
};

NSPanel.prototype.__applyCustomClass = function(element,type)
{
	if(element && type && this.__customClass[type])
	{
		this.util.addStyleClass(element,this.__customClass[type]);
	}
};

/******************************Start of Expansion Collapse Function *************************************/
NSPanel.prototype.__initializeExpCol = function()
{
	if(this.__body && !this.__isCollapsingExpanding)
	{
		var objBrowser = this.util.getBrowser();
		//for some weird reason browser other than Chrome moves on click and know how to fix it
		if(objBrowser && objBrowser.code !== "chrome")
		{
			this.__nsDragResizeElements.stopMoveOnClick();
		}
		this.__isCollapsingExpanding = true;
		var isCollapsed = this.util.hasStyleClass(this.__baseComponent,"nsPanelCollapsed");
		this.__animateExpCol(isCollapsed);
	}
};

NSPanel.prototype.__animateExpCol = function(isExpanding)
{
	var eventType = isExpanding ? this.EXPANSION_STARTING:this.COLLAPSE_STARTING;
	this.util.dispatchEvent(this.getBaseElement(),eventType,null,null);
	this.__body.style.display = "block";
	var contentHeight = this.__body.offsetHeight;
	if (isExpanding)
	{
		this.__body.style.height = "0px";
		contentHeight = this.__lastBodyHeight;
	}
	else
	{
		this.__lastBodyHeight = this.__body.offsetHeight;
	}
	var stepHeight = contentHeight / this.__DEFAULT_ANIMATION_STEPS;
	var direction = (isExpanding ? 1 : -1);
	var self = this;
	setTimeout(function(){self.__animateExpColStep.bind(self)(1,stepHeight,direction);}, this.__DEFAULT_ANIMATION_DELAY);
};

NSPanel.prototype.__animateExpColStep = function(iteration, stepHeight, direction)
{
	if (iteration < this.__DEFAULT_ANIMATION_STEPS)
	{
		this.__body.style.height = Math.round(((direction > 0) ? iteration : 10 - iteration) * stepHeight) +"px";
		iteration++;
		var self = this;
		setTimeout(function(){self.__animateExpColStep.bind(self)(iteration,stepHeight,direction);}, this.__DEFAULT_ANIMATION_DELAY);
	}
	else
	{
		var divGhostBody = this.__divGhost.querySelector(".nsPanelBody");
		var eventType = "";
		if(direction < 0)
		{
			this.util.changeStyleClass(this.__baseComponent,"nsPanelExpanded","nsPanelCollapsed");
			this.__body.style.display = "none";
			this.__baseComponent.style.height = this.__header.offsetHeight + "px";
			eventType = this.COLLAPSE_END;
			this.util.changeStyleClass(this.__divGhost,"nsPanelExpanded","nsPanelCollapsed");
		}
		else
		{
			this.util.changeStyleClass(this.__baseComponent,"nsPanelCollapsed","nsPanelExpanded");
			this.__body.style.display = "";
			this.__baseComponent.style.height = (this.__lastHeight) ? this.__lastHeight : (this.__lastBodyHeight + this.__header.offsetHeight + "px");
			this.__lastBodyHeight = 0;
			eventType = this.EXPANSION_END;
			this.util.changeStyleClass(this.__divGhost,"nsPanelCollapsed","nsPanelExpanded");
		}
		divGhostBody.style.display = this.__body.style.display;
		this.__divGhost.style.height = this.__baseComponent.style.height;
		this.__body.style.height = "";
		this.__handleExpColIcon(direction < 0);
		this.__isCollapsingExpanding = false;
		this.util.dispatchEvent(this.getBaseElement(),eventType,null,null);
	}
};

NSPanel.prototype.__handleExpColIcon = function(isCollapsed)
{
	var objSVG = new NSSvg();
	var useID = this.getID() + "ExpCol" + "use";
	if(isCollapsed)
	{
		objSVG.changeUseHref(useID,"#" + new NSSvgShapes().__EXPAND_ICON_ID);
	}
	else
	{
		objSVG.changeUseHref(useID,"#" + new NSSvgShapes().__COLLAPSE_ICON_ID);
	}
	this.__isCollapsed = !isCollapsed;
};
/******************************End of Expansion Collapse Function *************************************/

/******************************Start of Minimize Maximize Function *************************************/
NSPanel.prototype.__initializeMinMax = function()
{
	if(this.__body)
	{
		var fixedContainer = this.__getMinFixedContainer();
		var eventType = "";
		if(this.__isMinimized)
		{
			//maximize
			this.util.dispatchEvent(this.getBaseElement(),this.MAXIMIZE_STARTING,null,null);
			this.util.removeStyleClass(this.__baseComponent,"nsPanelModalMinimized");
			this.util.removeStyleClass(this.__baseComponent,"nsPanelModalMinimized" + this.__minimizedDirection);
			fixedContainer.removeChild(this.__baseComponent);
			this.__baseComponentParent.appendChild(this.__baseComponent);
			this.__body.style.display = "";
			this.__baseComponent.style.height = (this.__lastHeight) ? this.__lastHeight : (this.__lastBodyHeight + this.__header.offsetHeight + "px");
			this.__lastBodyHeight = 0;
			eventType = this.MAXIMIZE_END;
		}
		else
		{
			//minimize
			this.util.dispatchEvent(this.getBaseElement(),this.MINIMIZE_STARTING,null,null);
			this.__lastBodyHeight = this.__body.offsetHeight;
			this.util.addStyleClass(this.__baseComponent,"nsPanelModalMinimized");
			this.util.addStyleClass(this.__baseComponent,"nsPanelModalMinimized" + this.__minimizedDirection);
			this.__baseComponentParent = this.__baseComponent.parentNode;
			this.__baseComponentParent.removeChild(this.__baseComponent);
			fixedContainer.appendChild(this.__baseComponent);
			this.__body.style.display = "none";
			this.__baseComponent.style.height = this.__header.offsetHeight + "px";
			this.__body.style.height = "";
			eventType = this.MINIMIZE_END;
		}
		this.__handleMinMaxIcon(!this.__isMinimized);
		this.__isMinimized = !this.__isMinimized;
		this.util.dispatchEvent(this.getBaseElement(),eventType,null,null);
	}
};
NSPanel.prototype.__handleMinMaxIcon = function(isMinimized)
{
	var objSVG = new NSSvg();
	var useID = this.getID() + "MinMax" + "use";
	if(isMinimized)
	{
		objSVG.changeUseHref(useID,"#" + new NSSvgShapes().__MAXIMIZE_ICON_ID);
	}
	else
	{
		objSVG.changeUseHref(useID,"#" + new NSSvgShapes().__MINIMIZE_ICON_ID);
	}
};
NSPanel.prototype.__getMinFixedContainer = function()
{
	if(!this.__divMinFixedContainer)
	{
		this.__divMinFixedContainer = document.getElementById("nsPanelMinimizeContainer");
		if(!this.__divMinFixedContainer)
		{
			this.__divMinFixedContainer = this.util.createDiv("nsPanelMinimizeContainer","nsPanelMinimizeContainer");
			document.body.appendChild(this.__divMinFixedContainer);
		}
	}
	return this.__divMinFixedContainer;
};



/******************************End of Minimize Maximize Function *************************************/

/******************************Start of FullScreen Function *************************************/

/******************************End of FullScreen Function *************************************/
