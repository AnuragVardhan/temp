"use strict"; 
var nsPanel = Object.create(nsContainerBase);
//http://codepen.io/zz85/pen/gbOoVP
//http://jsfiddle.net/3jMQD/
//https://github.com/zz85/sparks.js
nsPanel.initializeComponent = function() 
{
	this.base.initializeComponent();
	
	this.__DEFAULT_ANIMATION_STEPS = 10;
	this.__DEFAULT_ANIMATION_DELAY = 20; /*ms*/
	
	this.__OUTER_CONTAINER_ID = "panelContainer";
	this.__TITLE_CONTAINER_ID = "divTitleBar";
	this.__BODY_CONTAINER_ID = "divBody";
	
	this.__CLASS_OUTER_CONTAINER = "nsPanelContainer";
	this.__CLASS_TITLEBAR = "nsPanelTitleBar";
	this.__CLASS_BODY_CONTAINER = "nsPanelBody";
	
	this.__container = null;
	this.__header = null;
	this.__body = null;
	this.__setting = null;
	
	this.__title = null;
	this.__templateID = null;
	this.__minWidth = null;
	this.__minHeight = null;
	this.__enableCollapse = false;
	this.__enableDrag = false;
	this.__enableResize = false;
	this.__enableTitleDblClick = false;
	
	this.__styleClass = null;
	this.__containerClass = null;
	this.__titleClass = null;
	this.__bodyClass = null;
	
	this.__lastHeight = null;
	this.__lastBodyHeight = -1;
	this.__nsDragResizeElements = null;
};

nsPanel.setSetting = function(setting)
{
	this.__setting = setting;
	if(setting)
	{
		if(setting.hasOwnProperty("nsTitle"))
		{
			this.__title = setting["nsTitle"];
		}
		if(setting.hasOwnProperty("template"))
		{
			this.__templateID = setting["template"];
		}
		if(setting.hasOwnProperty("minWidth"))
		{
			this.__minWidth = this.util.getNumber(setting["minWidth"]);
		}
		if(setting.hasOwnProperty("minHeight"))
		{
			this.__minHeight = this.util.getNumber(setting["minHeight"]);
		}
		if(setting.hasOwnProperty("enableCollapse"))
		{
			this.__enableCollapse = Boolean.parse(setting["enableCollapse"]);
		}
		if(setting.hasOwnProperty("enableDrag"))
		{
			this.__enableDrag = Boolean.parse(setting["enableDrag"]);
		}
		if(setting.hasOwnProperty("enableResize"))
		{
			this.__enableResize = Boolean.parse(setting["enableResize"]);
		}
		if(setting.hasOwnProperty("enableTitleDblClick"))
		{
			this.__enableTitleDblClick = Boolean.parse(setting["enableTitleDblClick"]);
		}
		if(setting.hasOwnProperty("styleClass"))
		{
			this.__styleClass = setting["styleClass"];
		}
		else
		{
			this.__styleClass = "nsPanelWidget";
		}
		if(setting.hasOwnProperty("containerClass"))
		{
			this.__containerClass = setting["containerClass"];
		}
		else
		{
			this.__containerClass = this.__CLASS_OUTER_CONTAINER;
		}
		if(setting.hasOwnProperty("titleClass"))
		{
			this.__titleClass = setting["titleClass"];
		}
		else
		{
			this.__titleClass = this.__CLASS_TITLEBAR;
		}
		if(setting.hasOwnProperty("bodyClass"))
		{
			this.__bodyClass = setting["bodyClass"];
		}
		else
		{
			this.__bodyClass = this.__CLASS_BODY_CONTAINER;
		}
		this.__createStructure();
	}
};

nsPanel.setComponentProperties = function() 
{
	this.base.setComponentProperties();
};

nsPanel.propertyChange = function(attrName, oldVal, newVal, setProperty)
{
	var attributeName = attrName.toLowerCase();
	this.base.propertyChange(attrName, oldVal, newVal, setProperty);
};

nsPanel.removeComponent = function() 
{
	this.__stopDrag();
	if(this.__nsDragResizeElements)
	{
		this.__nsDragResizeElements.__destroyElements();
	}
	this.base.removeComponent();
};

nsPanel.componentResized = function(event) 
{
	this.base.componentResized(event);
};

nsPanel.__createStructure = function()
{
	this.util.addStyleClass(this,"nsPanel");
	this.util.addStyleClass(this,this.__styleClass);
	this.__container = this.__createOuterContainer();
	this.__header = this.__createTitleBar(this.__container);
	this.__body = this.__createBody(this.__container);
	this.__lastHeight = this.util.getStyleValue(this,"height");
	var dragResizeSetting = {element:this,
			dragEnabled:this.__enableDrag,
			resizeEnabled:this.__enableResize,
			minWidth:this.__minWidth,
			minHeight:this.__minHeight,
			resizeEndCallback:this.__resizeEndHandler.bind(this),
			createGhostElementCallback:this.__createGhostElement.bind(this)};
	this.__nsDragResizeElements = new this.util.nsDragResizeElements(dragResizeSetting);
};

nsPanel.__createGhostElement = function(element)
{
	var divGhost = element.cloneNode(true);
	var divBody = divGhost.querySelector(".nsPanelBody");
	if(divBody)
	{
		divBody.innerHTML = "";
	}
	return divGhost;
};

nsPanel.__createOuterContainer = function()
{
	var divOuterContainer = this.getElement(this.getID() + this.__OUTER_CONTAINER_ID);
	if(divOuterContainer)
	{
		divOuterContainer.parentNode.removeChild(divOuterContainer);
		divOuterContainer = null;
	}
	divOuterContainer = this.util.createDiv(this.getID() + this.__OUTER_CONTAINER_ID,this.__containerClass);
	this.appendChild(divOuterContainer);
	return divOuterContainer;
};

nsPanel.__createTitleBar = function(parentElement)
{
	if(parentElement)
	{
		var divTitleBar = this.util.createDiv(this.getID() + this.__TITLE_CONTAINER_ID,this.__titleClass);
		if(this.__title && this.__title.length > 0)
		{
			var titleText = document.createTextNode(this.__title);
			divTitleBar.appendChild(titleText);
		}
		if(this.__enableCollapse)
		{
			var svgShapes = new NSSvgShapes();
			svgShapes.addMinimizeInPage();
			svgShapes.addMaximizeInPage();
			var spanMinMax = document.createElement("span");
			spanMinMax.style.cursor = "pointer";
			spanMinMax.style.float = "right";
			var objSVG = new NSSvg();
			var minMaxID = this.getID() + "MinMax";
			var svg = objSVG.addSVG(spanMinMax,minMaxID,"nsPanelMinMax",null,null,null,null,null,null,true);
			objSVG.addUse(svg,minMaxID + "use","nsPanelMinMaxUse","#" + new NSSvgShapes().__MINIMIZE_ICON_ID);
			divTitleBar.appendChild(spanMinMax);
			var headerDoubleClickRef = this.__headerDoubleClickHandler.bind(this);
			this.util.addEvent(spanMinMax,"click",headerDoubleClickRef);
			if(this.__enableTitleDblClick)
			{
				this.util.addEvent(divTitleBar,"dblclick",headerDoubleClickRef);
			}
		}
		parentElement.appendChild(divTitleBar);
		return divTitleBar;
	}
	return null;
};

nsPanel.__createBody = function(parentElement)
{	
	if(parentElement)
	{
		var divBody = this.util.createDiv(this.getID() + this.__BODY_CONTAINER_ID,this.__bodyClass);
		if(this.__templateID && this.__templateID.length > 0)
		{
			divBody.appendChild(this.util.getTemplate(this.__templateID));
		}
		parentElement.appendChild(divBody);
		/*var transitionStyle = "height .3s linear, padding-top .3s linear,padding-bottom .3s linear, border-width .3s linear";
		var transitionProperty = this.util.getSupportedCSSPropertyName(["transition","OTransition","msTransition","MozTransition","WebkitTransition"]);
		if(transitionProperty)
		{
			divBody.style[transitionProperty] = transitionStyle;
		}*/
		return divBody;
	}
	return null;
};

nsPanel.__headerDoubleClickHandler = function(event)
{
	this.__initializeMinMax();
	event.preventDefault();
};

nsPanel.__resizeEndHandler = function()
{
	this.__lastHeight = this.util.getStyleValue(this,"height");
};
/******************************Start of Minimize Maximize Function *************************************/
nsPanel.__initializeMinMax = function()
{
	if(this.__body)
	{
		var isCollapsed = this.util.hasStyleClass(this,"nsPanelCollapsed");
		this.__animateMinMax(isCollapsed);
	}
};

nsPanel.__animateMinMax = function(isExpanding)
{
	this.__body.style.display = "block";
	var contentHeight = this.__body.offsetHeight;
	if (isExpanding)
	{
		this.__body.style.height = "0px";
		//console.log("height::" + this.__lastBodyHeight + ",headerHeight::" + this.__header.offsetHeight + ",styleHeight::" + this.util.getStyleValue(this,"height"));
		contentHeight = this.__lastBodyHeight;
	}
	else
	{
		this.__lastBodyHeight = this.__body.offsetHeight;
	}
	var stepHeight = contentHeight / this.__DEFAULT_ANIMATION_STEPS;
	var direction = (isExpanding ? 1 : -1);
	var self = this;
	setTimeout(function(){self.__animateMinMaxStep.bind(self)(1,stepHeight,direction)}, this.__DEFAULT_ANIMATION_DELAY);
};

nsPanel.__animateMinMaxStep = function(iteration, stepHeight, direction)
{
	if (iteration < this.__DEFAULT_ANIMATION_STEPS)
	{
		this.__body.style.height = Math.round(((direction > 0) ? iteration : 10 - iteration) * stepHeight) +"px";
		iteration++;
		var self = this;
		setTimeout(function(){self.__animateMinMaxStep.bind(self)(iteration,stepHeight,direction)}, this.__DEFAULT_ANIMATION_DELAY);
	}
	else
	{
		if(direction < 0)
		{
			this.util.changeStyleClass(this,"nsPanel","nsPanelCollapsed");
			this.__body.style.display = "none";
			this.style.height = this.__header.offsetHeight + "px";
		}
		else
		{
			this.util.changeStyleClass(this,"nsPanelCollapsed","nsPanel");
			this.__body.style.display = "";
			this.style.height = (this.__lastHeight) ? this.__lastHeight : (this.__lastBodyHeight + this.__header.offsetHeight + "px");
			this.__lastBodyHeight = 0;
		}
		this.__body.style.height = "";
		this.__handleMinMaxIcon(direction < 0);
	}
};

nsPanel.__handleMinMaxIcon = function(isMinimized)
{
	var objSVG = new NSSvg();
	var useID = this.getID() + "MinMax" + "use";
	if(isMinimized)
	{
		
		objSVG.changeUseHref(useID,"#" + new NSSvgShapes().__MAXIMIZE_ICON_ID);
	}
	else
	{
		objSVG.changeUseHref(useID,"#" + new NSSvgShapes().__MINIMIZE_ICON_ID);
	}
};
/******************************End of Minimize Maximize Function *************************************/
document.registerElement('ns-panel', {prototype: nsPanel});
