NSUtil.prototype.nsDragResizeElements = function(setting)
{
	this.DRAG_STARTING = "dragStaring";
	this.DRAGGING = "dragging";
	this.DRAG_END = "dragEnd";
	this.RESIZE_STARTING = "resizeStaring";
	this.RESIZING = "resizing";
	this.RESIZE_END = "resizeEnd";
	
	this.__ELEMENT_OFFSET = 4;
	
	this.__setting = setting;
	
	//Drag Variables
	this.__dragSetting = {x:0,y:0,isDragging:false};
	
	//Resize Variables
	this.__resizeSetting = {isResizing:false};
	this.__resizeDirection = {top:false,right:false,bottom:false,left:false};
	this.__dragEdge = {right:null,bottm:null};
	this.__elementRect = null;
	this.__lastElementDimension = null;
	this.__posX = null;
	this.__posY = null;
	this.__tempEvent = null;

	//Common Variables
	this.__divHidden = null;
	this.__rePaint = false;
	this.__isStopMoveOnClick = false;
	
	this.util = new NSUtil();
	
	this.__documentMouseMoveRef = null;
	this.__documentMouseUpRef = null;
	this.__documentTouchMoveRef = null;
	this.__documentTouchEndRef = null;
	this.__containerClickRef = null;
	
	this.__initialize = function() 
	{
		this.__config = {
				element: this.__setting["element"] || null,
				enableDrag: Boolean.parse(this.__setting["enableDrag"]),
				enableResize: Boolean.parse(this.__setting["enableResize"]),
				enableMoveOnClick: Boolean.parse(this.__setting["enableMoveOnClick"]),
				minWidth: this.util.getDimensionAsNumber(this.__setting["element"],this.__setting["minWidth"]),
				minHeight: this.util.getDimensionAsNumber(this.__setting["element"],this.__setting["minHeight"]),
				createGhostElementCallback: this.__setting["createGhostElementCallback"] || this.__createHiddenDiv.bind(this),
				enableDragContainment:Boolean.parse(this.__setting["enableDragContainment"]),
				container: this.__setting["container"] || document.documentElement
		};
		if(this.__config.element)
		{
			this.__divHidden = this.__config.createGhostElementCallback(this.__config.element);
			this.__initializeHiddenDiv();
			this.__addEvent();
			if(this.__config.enableDrag)
			{
				this.__initializeDrag();
			}
			if(this.__config.enableResize)
			{
				this.__initializeResize();
			}
			if(this.__config.enableMoveOnClick)
			{
				this.__initializeMoveOnClick();
			}
			this.__animateAction();
		}
	};
	
	this.stopMoveOnClick = function()
	{
		this.__isStopMoveOnClick = true;
	};
	
	this.destroy = function()
	{
		if(this.__documentMouseMoveRef)
		{
			this.util.removeEvent(document,"mousemove",this.__documentMouseMoveRef);
			this.__documentMouseMoveRef = null;
		}
		if(this.__documentMouseUpRef)
		{
			this.util.removeEvent(document,"mouseup",this.__documentMouseUpRef);
			this.__documentMouseUpRef = null;
		}
		if(this.__documentTouchMoveRef)
		{
			this.util.removeEvent(document,"touchmove",this.__documentTouchMoveRef);
			this.__documentTouchMoveRef = null;
		}
		if(this.__documentTouchEndRef)
		{
			this.util.removeEvent(document,"touchend",this.__documentTouchEndRef);
			this.__documentTouchEndRef = null;
		}
		if(this.__containerClickRef)
		{
			this.util.removeEvent(this.__config.container,"click",this.__containerClickRef);
			this.__containerClickRef = null;
		}
	};
	
	this.__addEvent = function()
	{
		this.util.addEvent(this.__config.element,"mousedown",this.__elementMouseDownHandler.bind(this));
		this.util.addEvent(this.__config.element,"touchstart",this.__elementTouchStartHandler.bind(this));
		if(!this.__documentMouseMoveRef)
		{
			this.__documentMouseMoveRef = this.__documentMouseMoveHandler.bind(this);
			this.util.addEvent(document,"mousemove",this.__documentMouseMoveRef);
		}
		if(!this.__documentMouseUpRef)
		{
			this.__documentMouseUpRef = this.__documentMouseUpHandler.bind(this);
			this.util.addEvent(document,"mouseup",this.__documentMouseUpRef);
		}
		if(!this.__documentTouchMoveRef)
		{
			this.__documentTouchMoveRef = this.__documentTouchMoveHandler.bind(this);
			this.util.addEvent(document,"touchmove",this.__documentTouchMoveRef);
		}
		if(!this.__documentTouchEndRef)
		{
			this.__documentTouchEndRef = this.__documentTouchEndHandler.bind(this);
			this.util.addEvent(document,"touchend",this.__documentTouchEndRef);
		}
	};
	
	this.__elementMouseDownHandler = function(event)
	{
		event = this.util.getEvent(event);
		this.__downActionHandler(event);
		this.util.preventDefault(event); 
		event.stopImmediatePropagation();
	};
	
	this.__elementTouchStartHandler = function(event)
	{
		 event = this.util.getEvent(event);
		 this.__downActionHandler(event.touches[0]);
		 this.util.preventDefault(event);
		 event.stopImmediatePropagation();
	};
	
	this.__documentMouseMoveHandler = function(event)
	{
		event = this.util.getEvent(event);
		this.__moveActionHandler(event);
		this.util.preventDefault(event); 
		event.stopImmediatePropagation();
	};
	
	this.__documentMouseUpHandler = function(event)
	{
		console.log("In __documentMouseUpHandler");
		event = this.util.getEvent(event);
		this.__upActionHandler(event);
		this.util.preventDefault(event); 
		event.stopPropagation();
		event.stopImmediatePropagation();
	};
	
	this.__documentTouchMoveHandler = function(event)
	{
		event = this.util.getEvent(event);
		this.__moveActionHandler(event.touches[0]);
		this.util.preventDefault(event); 
		event.stopImmediatePropagation();
	};
	
	this.__documentTouchEndHandler = function(event)
	{
		console.log("In __documentTouchEndHandler");
		event = this.util.getEvent(event);
		if (event.touches.length === 0) 
		{
			this.__upActionHandler(event.changedTouches[0]);
		}
		this.util.preventDefault(event); 
		event.stopImmediatePropagation();
	};
	
	this.__downActionHandler = function(event)
	{
		this.__setResizeVariables(event);
		var isResizing = this.__isResizeValid();
		var isDragging = !isResizing && this.__isDragValid();
		if(isResizing)
		{
			this.__startResize(event);
		}
		else if(isDragging)
		{
			this.__startDrag(event);
		}
	};
	
	this.__moveActionHandler = function(event)
	{
		this.__setResizeVariables(event);
		this.__tempEvent = event;
		this.__rePaint = true;
		if(this.__resizeSetting.isResizing) 
		{
			this.__actionResize(event);
		}
		else if(this.__dragSetting.isDragging)
		{
			this.__actionDrag(event);
		}
	};
	
	this.__upActionHandler = function(event)
	{ 
		this.__setResizeVariables(event);
		if(this.__resizeSetting.isResizing)
		{
			this.__endResize(event);
			this.stopMoveOnClick();
		}
		else if(this.__dragSetting.isDragging)
		{
			this.__endDrag(event);
			this.stopMoveOnClick();
		}
	};
	
	/*********************************Resize Methods Starts*********************************/
	this.__initializeResize = function()
	{
	};
	
	this.__resizeElement = function()
	{
	};
	
	this.__startResize = function(event)
	{
		this.util.dispatchEvent(this.__config.element,this.RESIZE_STARTING,null,null);
		this.__resizeSetting = {
			    posX: this.__posX,
			    posY: this.__posY,
			    clientX: event.clientX,
			    clientY: event.clientY,
			    elementWidth: this.__elementRect.width,
			    elementHeight: this.__elementRect.height,
			    isResizing: true,
			    isResizeTop: this.__resizeDirection.top,
			    isResizeLeft: this.__resizeDirection.left,
			    isResizeRight: this.__resizeDirection.right,
			    isResizeBottom: this.__resizeDirection.bottom
		 };
	};
	
	this.__actionResize = function(event)
	{
		if(this.__resizeSetting.isResizeRight) 
	    {
	    	this.__config.element.style.width = Math.max(this.__posX, this.__config.minWidth) + "px";
	    }
	    if(this.__resizeSetting.isResizeBottom) 
	    {
	    	this.__config.element.style.height = Math.max(this.__posY, this.__config.minHeight) + "px";
	    }
	    if(this.__resizeSetting.isResizeLeft) 
	    {
		     var currentWidth = Math.max(this.__resizeSetting.clientX - this.__tempEvent.clientX  + this.__resizeSetting.elementWidth, this.__config.minWidth);
		     if (currentWidth > this.__config.minWidth) 
		     {
		    	 this.__config.element.style.width = currentWidth + "px";
		    	 this.__config.element.style.left = this.__tempEvent.clientX + "px";	
		     }
	    }
	    if (this.__resizeSetting.isResizeTop) 
	    {
	    	var currentHeight = Math.max(this.__resizeSetting.clientY - this.__tempEvent.clientY  + this.__resizeSetting.elementHeight, this.__config.minHeight);
		    if(currentHeight > this.__config.minHeight) 
		    {
		    	this.__config.element.style.height = currentHeight + "px";
		    	this.__config.element.style.top = this.__tempEvent.clientY + "px";	
		    }
	    }
	    this.__updateHiddenDivDimension();
	    var elementRect = this.__config.element.getBoundingClientRect();
	    this.util.dispatchEvent(this.__config.element,this.RESIZING,elementRect,{dimension:elementRect});
	};
	
	this.__endResize = function(event)
	{
		console.log("In __endResize");
		this.__resizeSetting = {isResizing:false};
		this.util.dispatchEvent(this.__config.element,this.RESIZE_END,null,null);
	};
	
	this.__setResizeVariables = function(event)
	{
		  this.__elementRect = this.__config.element.getBoundingClientRect();
		  this.__posX = event.clientX - this.__elementRect.left;
		  this.__posY = event.clientY - this.__elementRect.top;

		  this.__resizeDirection.top = this.__posY < this.__ELEMENT_OFFSET;
		  this.__resizeDirection.left = this.__posX < this.__ELEMENT_OFFSET;
		  this.__resizeDirection.right = this.__posX >= this.__elementRect.width - this.__ELEMENT_OFFSET;
		  this.__resizeDirection.bottom = this.__posY >= this.__elementRect.height - this.__ELEMENT_OFFSET;
		  
		  this.__dragEdge.right = window.innerWidth - this.__ELEMENT_OFFSET;
		  this.__dragEdge.bottom = window.innerHeight - this.__ELEMENT_OFFSET;
	};
	
	this.__isResizeValid = function()
	{
		if(this.__config.enableResize)
		{
			var retValue =  this.__resizeDirection.right || this.__resizeDirection.bottom || this.__resizeDirection.top || this.__resizeDirection.left;
			return retValue;
		}
		return false;
	};
		
	/*********************************Resize Methods Ends*********************************/
		
	/*********************************Drag Methods Starts*********************************/
	this.__initializeDrag = function()
	{
		var container = this.__config.container;
		var isContainerBody = false;
		if(container.tagName === "BODY" || container.tagName === "HTML")
		{
			isContainerBody = true;
		}
		var setPosition = function(element)
		{
			var style = getComputedStyle(element);
			if(isContainerBody && style.position !== "absolute")
			{
				element.style.position = "absolute";
			}
			else if (style.position !== "relative" && style.position !== "absolute" ) 
			{
				element.style.position = "relative";
			}
		};
		setPosition(this.__config.element);
		setPosition(this.__divHidden);
	};
	
	this.__dragElement = function()
	{
	};

	this.__startDrag = function(event)
	{
		var target = this.util.getTarget(event);
		var cancelled = this.util.dispatchEvent(this.__config.element,this.DRAG_STARTING,target,null,true,true);
		if(!cancelled)
		{
			
			this.__dragSetting.isDragging = true;
			var rectElement = this.__config.element.getBoundingClientRect();
			
			this.__dragSetting.posX = event.clientX;
			this.__dragSetting.posY = event.clientY;
			this.__dragSetting.elementTop = rectElement.top;
			this.__dragSetting.elementLeft = rectElement.left;
			this.__dragSetting.elementWidth = rectElement.width;
			this.__dragSetting.elementHeight = rectElement.height;
			this.__dragSetting.diffX = this.__dragSetting.posX - this.__dragSetting.elementLeft;
			this.__dragSetting.diffY = this.__dragSetting.posY - this.__dragSetting.elementTop;
			this.__dragSetting.containerWidth = 0;
			this.__dragSetting.containerHeight = 0;
			if(this.__config.enableDragContainment)
			{
				var containerRect = this.__config.container.getBoundingClientRect();
				this.__dragSetting.containerWidth = containerRect.width;
				this.__dragSetting.containerHeight = containerRect.height;
			}
		}
	};
	
	this.__actionDrag = function(event)
	{
		console.log("In __actionDrag");
		this.__setHiddenDivVisiblity(true);
		var posX = event.clientX;
        var posY = event.clientY;
        var newX = posX - this.__dragSetting.diffX;
        var newY = posY - this.__dragSetting.diffY;
        var newPosition = this.__getRestrictedPosition(newX,newY);
        this.__divHidden.style.top = newPosition.y + "px";
		this.__divHidden.style.left = newPosition.x  + "px";
		this.util.dispatchEvent(this.__config.element,this.DRAGGING,newPosition,{position:newPosition});
	};
	
	this.__endDrag = function(event)
	{
		console.log("In __endDrag");
		this.__dragSetting.isDragging = false;
		this.__config.element.style.top = this.__divHidden.style.top;
		this.__config.element.style.left = this.__divHidden.style.left;
		this.__setHiddenDivVisiblity(false);
		this.__dragSetting = {x:0,y:0,isDragging:false};
		this.util.dispatchEvent(this.__config.element,this.DRAG_END,null,null);
	};
	
	this.__getRestrictedPosition = function(newX,newY)
	{
		if(this.__config.enableDragContainment)
		{
			newX = (newX < 0) ? 0 : newX;
			newY = (newY < 0) ? 0 : newY;
			if((newX + this.__dragSetting.elementWidth) > this.__dragSetting.containerWidth)
			{
				newX = this.__dragSetting.containerWidth - this.__dragSetting.elementWidth;
			}
			if((newY + this.__dragSetting.elementHeight) > this.__dragSetting.containerHeight)
			{
				newY = this.__dragSetting.containerHeight - this.__dragSetting.elementHeight;
			}
		}
		return {x:newX,y:newY};
	};
	
	this.__isDragValid = function()
	{
		if(this.__config.enableDrag)
		{
			var retValue = this.__posX > 0 && this.__posX < this.__elementRect.width && this.__posY > 0 && this.__posY < this.__elementRect.height && this.__posY < 30;
			return retValue;
		}
		return false;
	};
	/*********************************Drag Methods Ends*********************************/
	/*********************************Move On Click Method Starts***********************/
	this.__initializeMoveOnClick = function()
	{
		this.util.addStyleClass(this.__config.element,"nsMoveOnClick");
		this.__containerClickRef = this.__containerClickHandler.bind(this);
		this.util.addEvent(this.__config.container,"click",this.__containerClickRef);
		this.util.addEvent(this.__config.element,"click",this.__elementClickHandler.bind(this));
	};
	
	this.__elementClickHandler = function(event)
	{
		console.log("In __elementClickHandler");
		event = this.util.getEvent(event);
		this.util.preventDefault(event); 
		event.stopPropagation();
		event.stopImmediatePropagation();
	};
	
	this.__containerClickHandler = function(event)
	{
		console.log("In __containerClickHandler");
		if(!this.__isStopMoveOnClick)
		{
			console.log("Inside __containerClickHandler");
			event = this.util.getEvent(event);
			console.log(event.type);
			var element = this.__config.element;
			var parentPosition = this.__getElementPosition(event.currentTarget);
			var newX = event.clientX - parentPosition.x - (element.clientWidth / 2);
			var newY = event.clientY - parentPosition.y - (element.clientHeight / 2);
			var rectElement = this.__config.element.getBoundingClientRect();
			var containerRect = this.__config.container.getBoundingClientRect();
			var elementWidth = rectElement.width;
			var elementHeight = rectElement.height;
			var containerWidth = containerRect.width;
			var containerHeight = containerRect.height;
			newX = (newX < 0) ? 0 : newX;
			newY = (newY < 0) ? 0 : newY;
			if((newX + elementWidth) > containerWidth)
			{
				newX = containerWidth - elementWidth;
			}
			if((newY + elementHeight) > containerHeight)
			{
				newY = containerHeight - elementHeight;
			}
			element.style.left = newX + "px";
			element.style.top = newY + "px";
			this.util.preventDefault(event); 
			event.stopPropagation();
			event.stopImmediatePropagation();
		}
		this.__isStopMoveOnClick = false;
	};
	
	this.__getElementPosition = function(element) 
	{
		var position = {x:0,y:0};
		while(element) 
		{
		   if(element.tagName === "BODY" || element.tagName === "HTML") 
		   {
		      var xScroll = element.scrollLeft || document.documentElement.scrollLeft;
		      var yScroll = element.scrollTop || document.documentElement.scrollTop;
		      position.x += (element.offsetLeft - xScroll + element.clientLeft);
		      position.y += (element.offsetTop - yScroll + element.clientTop);
		   } 
		   else 
		   {
			  position.x += (element.offsetLeft - element.scrollLeft + element.clientLeft);
			  position.x += (element.offsetTop - element.scrollTop + element.clientTop);
		   }
		   element = element.offsetParent;
		}
		return position;
	};
	/*********************************Move On Click Method Ends***************************/
	/*********************************Common Methods Starts*********************************/
	this.__animateAction = function()
	{
		this.util.getRequestAnimationFrame.bind(window)(this.__animateAction.bind(this));
		if(this.__rePaint)
		{
			this.__rePaint = false;
			if(this.__resizeSetting && this.__resizeSetting.isResizing) 
			{
				this.__resizeElement();
				return;
			}
			if(this.__dragSetting && this.__dragSetting.isDragging) 
			{
				this.__dragElement();
				return;
			}
			this.__setElementCursor();
		}
	};
	
	this.__setElementCursor = function() 
	{
			if(this.__config.enableResize && this.__resizeDirection.right && this.__resizeDirection.bottom || this.__resizeDirection.left && this.__resizeDirection.top) 
			{
				 this.__config.element.style.cursor = "nwse-resize";
			} 
			else if(this.__config.enableResize && this.__resizeDirection.right && this.__resizeDirection.top || this.__resizeDirection.bottom && this.__resizeDirection.left) 
			{
				 this.__config.element.style.cursor = "nesw-resize";
			} 
			else if(this.__config.enableResize && (this.__resizeDirection.right || this.__resizeDirection.left)) 
			{
				 this.__config.element.style.cursor = "ew-resize";
			} 
			else if(this.__config.enableResize && (this.__resizeDirection.bottom || this.__resizeDirection.top)) 
			{
				 this.__config.element.style.cursor = "ns-resize";
			} 
			else if(this.__isDragValid()) 
			{
				 this.__config.element.style.cursor = "move";
			} 
			else 
			{
				 this.__config.element.style.cursor = "default";
			}
	};
	
	this.__setHiddenDivVisiblity = function(isVisible) 
	{
		this.__divHidden.style.display = (isVisible ? "" : "none");
		this.__config.element.style.display = (isVisible ? "none" : "");
	};
	
	this.__updateHiddenDivDimension = function() 
	{
		this.__updateElementDimension(this.__divHidden, this.__elementRect.left,this.__elementRect.top, this.__elementRect.width, this.__elementRect.height);
	};
	
	this.__updateElementDimension = function(element,posX,posY,width,height) 
	{
		var updateDimension = function(property,value)
		{
			(value !== -1) ? (element.style[property] = value + "px") : null;
		};
		updateDimension("left",posX);
		updateDimension("top",posY);
		updateDimension("width",width);
		updateDimension("height",height);
	};
	
	this.__createHiddenDiv = function(element)
	{
		var divHidden = this.util.createDiv(element.id + "Hidden", "nsGhostElement");
		divHidden.style.width = this.util.getStyleValue(element,"width");
		divHidden.style.height = this.util.getStyleValue(element,"height");
		
		return divHidden;
	};
	
	this.__initializeHiddenDiv = function()
	{
		if(!this.__divHidden)
		{
			this.util.throwException(1002,"Dragging Util","Function should return Ghost Element");
		}
		this.__divHidden.setAttribute("id",this.__config.element.id + "Hidden");
		this.__divHidden.style.width = this.util.getStyleValue(this.__config.element,"width");
		this.__divHidden.style.height = this.util.getStyleValue(this.__config.element,"height");
		this.__divHidden.style.pointerEvents = "none";
		var element = this.__config.element;
		var parentNode = element.parentNode;
		try
		{
			parentNode.appendChild(this.__divHidden);
		}
		catch(error)
		{
			this.__divHidden = this.__divHidden["__impl4cf1e782hg__"];
			parentNode.appendChild(this.__divHidden);
		}
		
		this.__setHiddenDivVisiblity(false);
	};
	/*********************************Common Methods Ends*********************************/
	this.__initialize();
};
