"use strict";
function NSBinding(element,model) 
{
	this.util = new NSUtil();
	this.__element = element;
	this.__model = model;
	
	this.__initialize();
};

NSBinding.prototype.__initialize = function()
{
	var self = this;
	var initializeProperty = function(key)
	{
		if (typeof self.__model[key] !== "object") 
		{
            Object.defineProperty(self.__element,key, 
            {
                get: function() 
                {
                    return self.__model[key];
                },
                set: function(value) 
                {
                    var changer = self.__watcher(self.__model,key,value);
                    self.__model[key] = value;
                    self.__observing(self.__element,changer);
                },
                enumerable: true
            });
        } 
		else 
		{
            //that.observerArray(self.__model[key],self.__element,key);
        }
	};
	
	Object.keys(properties).forEach(initializeProperty,self.__element);
};

NSBinding.prototype.__watcher = function(item, key, newValue)
{
	var retItem = {name:key,obj:item,oldValue:item[key]};
	if (item[key] !== newValue) 
	{
		retItem["type"] = "updated";
    } 
	else 
	{
		retItem["type"] = "";
    }
    return retItem;
};

NSBinding.prototype.__observing = function(element,itemChange)
{
    var oldItem = itemChange.obj;
    var affectedKey = itemChange.name;
    var affectedNodes = element.templateInstance[itemChange.name] || [];
    this.__observingAttribute(element, undefined, affectedKey);

    affectedNodes.forEach(function(element) {
        if (element.node.tagName === "INPUT") {

            if (element.node !== element.target) {
                element.node.value = oldItem[affectedKey];
            }

        } else {
            var rawTextContent = element.value;
            var replaceArr = that.getReplaceArr(rawTextContent);
            var replaceWith = [];

            if (replaceArr && replaceArr.length > 0) {
                replaceArr.forEach(function(from) {
                    Object.keys(oldItem).forEach(function(With) {
                        if (from === With) {
                            replaceWith.push(oldItem[With]);
                        }
                    })
                })
                element.node.textContent = rawTextContent;
                that.performBinding(element.node, replaceArr, replaceWith);
            }
        }
    });
};

NSBinding.prototype.__observingAttribute = function(element,itemChange)
{
	
};

NSBinding.prototype.setValue = function()
{
	
};

NSBinding.prototype.apply = function()
{
	
};
